{"version":3,"sources":["ng://@uat/bearbones/lib/alternating-panel/alternating-panel.tokens.ts","null","ng://@uat/bearbones/lib/dynamic-animations/dynamic-animations.base.ts","ng://@uat/bearbones/lib/dynamic-animations/dynamic-animations-handler/dynamic-animations-handler.token.ts","ng://@uat/bearbones/lib/dynamic-animations/state-css-mapper/state-css-mapper.service.ts","ng://@uat/bearbones/lib/dynamic-animations/animation-states/animation-states.service.ts","ng://@uat/bearbones/lib/dynamic-animations/dynamic-animations.service.ts","ng://@uat/bearbones/lib/alternating-panel/alternating-panel.component.ts","ng://@uat/bearbones/lib/alternating-panel/alternating-panel.directive.ts","ng://@uat/bearbones/lib/alternating-panel/alternating-panel.module.ts","ng://@uat/bearbones/lib/common/menu-item.directive.ts","ng://@uat/bearbones/lib/collapsing-menu/collapsing-menu.component.ts","ng://@uat/bearbones/lib/common/common.module.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.enums.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.component.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.animations.ts","ng://@uat/bearbones/lib/sliding-panel/toggle/sliding-panel-toggle.directive.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.module.ts","ng://@uat/bearbones/lib/collapsing-menu/collapsing-menu.module.ts","ng://@uat/bearbones/lib/common/close-subscription.ts","ng://@uat/bearbones/lib/content-conductor/content-conductor-constructor/content-conductor-constructor.token.ts","ng://@uat/bearbones/lib/content-conductor/content/content.directive.ts","ng://@uat/bearbones/lib/content-conductor/content-conductor.service.ts","ng://@uat/bearbones/lib/content-conductor/content-container/content-container.directive.ts","ng://@uat/bearbones/lib/content-conductor/default-content-conductor/default-content-conductor.service.ts","ng://@uat/bearbones/lib/content-conductor/default-content-conductor/default-content-conductor.module.ts","ng://@uat/bearbones/lib/content-conductor/content-conductor.component.ts","ng://@uat/bearbones/lib/content-conductor/content-conductor.module.ts","ng://@uat/bearbones/lib/drag-and-drop/drag-and-drop.service.ts","ng://@uat/bearbones/lib/drag-and-drop/dropper.directive.ts","ng://@uat/bearbones/lib/drag-and-drop/drop-zone.directive.ts","ng://@uat/bearbones/lib/drag-and-drop/drag-and-drop.module.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop.service.ts","ng://@uat/bearbones/lib/drag-and-drop-component/draggable/draggable.directive.ts","ng://@uat/bearbones/lib/drag-and-drop-component/dnd.const.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop-container/drag-and-drop-container.component.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop.module.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.component.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.directive.ts","ng://@uat/bearbones/lib/dynamic-component/dynamic-component.directive.ts","ng://@uat/bearbones/lib/dynamic-component/dynamic-component.module.ts","ng://@uat/bearbones/lib/dropdown-input/item-list/dropdown-input-item-list.component.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.module.ts","ng://@uat/bearbones/lib/dropdown-menu/dropdown-menu.component.ts","ng://@uat/bearbones/lib/dropdown-menu/dropdown-menu.module.ts","ng://@uat/bearbones/lib/dynamic-animations/default-dynamic-animations-handler/default-dynamic-animations-handler.service.ts","ng://@uat/bearbones/lib/dynamic-animations/dynamic-animations.module.ts","ng://@uat/bearbones/lib/dynamic-animations/default-dynamic-animations-handler/default-dynamic-animations-handler.module.ts","ng://@uat/bearbones/lib/hamburger-menu/menu-item-right.directive.ts","ng://@uat/bearbones/lib/hamburger-menu/hamburger-menu.component.ts","ng://@uat/bearbones/lib/hamburger-menu/hamburger-menu.module.ts","ng://@uat/bearbones/lib/multi-select/multi-select.component.ts","ng://@uat/bearbones/lib/multi-select/multi-select.module.ts","ng://@uat/bearbones/lib/slideout-menu/slideout-menu.component.ts","ng://@uat/bearbones/lib/slideout-menu/slideout-menu.module.ts","ng://@uat/bearbones/lib/sortable/sortable.directive.ts","ng://@uat/bearbones/lib/sortable/sortable.module.ts","ng://@uat/bearbones/lib/tab/tab.service.ts","ng://@uat/bearbones/lib/tab/tab.directive.ts","ng://@uat/bearbones/lib/tab/tab-content.directive.ts","ng://@uat/bearbones/lib/tab/tab.module.ts","ng://@uat/bearbones/lib/bear-bones.module.ts"],"names":["AltPanelState1Animation","InjectionToken","AltPanelState2Animation","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","BBDynamicAnimationsBase","element","dynamicAnimationsService","_this","this","animationsHandler","createAnimationsHandler","onInit","ngOnInit","baseInit","apply","onDestroy","ngOnDestroy","baseDestroy","defineProperty","prototype","map","setCSSMap","toState","nextState","transitions","setTransitions","init","destroy","Input","BBDynamicAnimationsHandlerConstructorToken","BBStateCssMapperService","rendererFactory","getCSSClass","state","createStateCSSMapper","renderer","createRenderer","remove","removeClass","add","addClass","removeAll","keys","forEach","entry","Injectable","RendererFactory2","BBAnimationStatesService","builder","mapper","buildPlayers","reduce","players","fromState","prev","player","build","create","getPlayer","destroyAllPlayers","createAnimationStateMachine","currentPlayer","currentState","next","newPlayer","reset","onStart","onAnimationStart","onDone","onAnimationDone","play","AnimationBuilder","BBDynamicAnimationsService","constructor","cssMapperService","animationStatesBuilder","Inject","args","BBAlternatingPanelComponent","elRef","daServ","_super","call","nativeElement","__","tslib_1.__extends","Component","selector","template","styles","animations","exportAs","ElementRef","BBAlternatingPanelDirective","Directive","BBAlternatingPanelModule","forRoot","ngModule","providers","NgModule","imports","declarations","exports","BBMenuItem","_viewContainer","ViewContainerRef","BBCollapsingMenu","hostElementRef","zone","panel","isShowing","items","toArray","filter","el","displayedItems","collapsedItems","toggle","ngAfterViewInit","calculateOverflow","projectNodes","displayedDiv","itemElements","areDisplayedItemsToWide","run","setTimeout","hasOverflow","menuCalcedRight","hostDiv","offsetLeft","offsetWidth","toggleDiv","firstOverflowIndex_1","Number","POSITIVE_INFINITY","i","length","ele","collapsedDiv","index","getBoundingClientRect","width","onWindowResize","host","(window:resize)","Renderer","NgZone","HostBinding","ContentChildren","read","descendants","ViewChild","BBCommonModule","CommonModule","BBSlidingPanel","cdRef","SlideDirections","EventEmitter","SlideAnimationDirections","horizontalState","verticalState","show","slideDirection","markForCheck","hide","[@horizontalTrigger]","[@verticalTrigger]","[class.open]","[class.closed]","[class.pinned]","(mouseenter)","(mouseleave)","(mouseover)","(click)","[class.bb-sliding-panel]","trigger","style","transform","transition","transform-origin","animate","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Output","BBSlidingPanelToggle","onNextState","hover","pin","nextStates","previousPinnedState","pinned","Error","showHideSubscription","closed","unsubscribe","documentClick$","fromEvent","document","toggleClick$","toggleMouseEnter$","toggleMouseLeave$","panelMouseEntered$","mouseEnterPanel","asObservable","panelMouseLeft$","mouseLeavePanel","panelClick$","clickPanel","leaveBoth$","pipe","merge","_","showOnHover","enterEither$","toggleClicked$","event","stopPropagation","panelClicked$","documentClicked$","closeOnClickOutside","nextPinnedState$","of","showOnInit","isHovering$","debounceTime","combineLatest","states","subscribe","[class.bb-sliding-panel-toggle]","BBSlidingPanelModule","BBCollapsingMenuModule","closeSubscription","sub","BBContentConductorConstructorToken","BBContentDirective","templateRef","TemplateRef","BBContentConductorService","createContentConductor","containersQueryList","contentsQueryList","BBContentContainerDirective","vcRef","ccService","console","log","BBDefaultContentConductorService","mapContainers","containers","container","containerName","viewContainer","initialContainer","templates","containersMap","containersSub","changes","c","contentsSub","t","createEmbeddedView","moveView","previousContainer","nextContainer","view","detach","insert","detachView","moveViews","viewsCache","push","detachViews","detachedViews","x","reattachViews","views","reattachView","BBDefaultContentConductorModule","provide","useValue","BBContentConductorComponent","onToggle","oldCont","cont","conductor","ngAfterContentInit","contents","ngAfterViewChecked","ViewChildren","BBContentConductorModule","DragAndDropService","DropperDirective","dndService","draggable","dragstart","dragend","bbdropperClass","bbholdingClass","undefined","dataTransfer","setData","bbpayload","bbdropperId","bbstart","emit","Renderer2","HostListener","DropZoneDirective","bbdropzoneClass","bbdropzoneHoverClass","dropzones","includes","name","dragover","preventDefault","dragenter","bbdropzoneId","bbenter","dragleave","bbleave","drop","dropped","attributes","bbdropper","value","removeChild","parentNode","appendChild","bbdata","bbdrop","BBDragAndDropModule","BBDragAndDropService","BBDraggableDirective","DraggableContext","_isBeingDragged","dragged","dragStartSubscription","dragEndSubscription","registerDragAndDropEvents","target","draggableViewRef","rootNodes","setAttribute","rect","srcElement","y","top","height","left","e","mouseOffset","offsetX","clientX","offsetY","clientY","dragStartedOnView","err","dragEndedOnView","BBDragAndDropContainerComponent","lowIndex","highIndex","viewBeingDragged","DefaultDragLocationTarget","embeddedViewRef","dndContainer","draggableTemplateRef","draggableEmbeddedViews","dragSubscriptions","onDragStart","onDragEnd","dragStartEvent","draggingMouseOffset","viewIndex","indexOf","splice","dropEffect","shortestDistance","MAX_SAFE_INTEGER","closestIndex","nextClosestIndex","centerCoordinates","dy","calculate1DimensionDistance","distance","Math","abs","dragLocation","min","max","warn","onDragEnter","onDragOver","onDrop","draggablesQL","draggables","initDraggable","p1","p2","calculate2DimensionDistance","x1","x2","y1","y2","sqrt","pow","BBDragAndDropComponentModule","BBDropdownInputServiceToken","BBDropdownInput","_diServ","chDetRef","BehaviorSubject","diServ","numItems","inputElementRef","maxItems","setMaxItems","inputSub","inputElement","inputValueChangeDelayms","distinctUntilChanged","newText","setSearchText","itemsSub","items$","num","hasItems","detectChanges","clearItems","onNewItemContainers","clearAutoSelection","clearSelection","dynamicContainers","autoSelectItem","chooseCurrentItem","currentItem","selectedIndex","getCurrentItem","autoSelectedIndex","setTextOnChoice","matchText","listItemChosen","component","currentCompRef","instance","list","dynamicComponentsData","autoSelectionMode","containerIndex_1","find","cnt","toLowerCase","containerIndex_2","substr","changeAutoSelection","selectPreviousListItem","getNextSelection","selectNextListItem","indexChange","changeSelection","listElement","listElements","containerElement","panelElementRef","inViewData","elementOffsetFromView","inView","scrollTop","scrollBy","listRec","contRec","topViz","botViz","bottom","onKeyDown","keyCode","EventKeys","UPARROW","DOWNARROW","ENTER","onOutsideClick","wasInsideClicked","wasFocused","onInsideClick","onHostFocusIn","onHostFocusOut","onListItemMouseOver","onListItemClicked","(focusout)","(focusin)","forwardRef","BBDropdownInputDirective","onFocus","canShow","onBlur","(focus)","(blur)","BBDynamicComponentDirective","resolver","compData","createComponent","inputProviders","provName","injector","ReflectiveInjector","fromResolvedProviders","resolve","parentInjector","compRef","resolveComponentFactory","hostView","inputs","input","changeDetectorRef","ComponentFactoryResolver","BBDynamicComponentModule","BBDropdownInputItemsList","listItems","li","selected","itemSelected","itemAutoSelected","newContainers","dynamicComponentContainers","newContainersSub","newList","error","onListItemClick","listItemClick","listItemMouseOver","BBDropdownInputModule","BBDropdownMenu","BBDropdownMenuModule","BBDefaultDynamicAnimationsHandlerService","mapCache","cssMapper","stateCache","animationsStateMachine","transitionsCache","BBDynamicAnimationsModule","BBDefaultDynamicAnimationsHandlerModule","BBMenuItemRight","BBHamburgerMenu","concat","rightItems","_cocoInit","expanded","window","matchMedia","expandOnQuery","matches","expandedSubscription","togglePanelState","showPanel","hidePanel","[class.expanded]","[class.collapsed]","BBHamburgerMenuModule","BBMultiSelectComponent","selectionItems","item","filterInput","filterChangeDelayms","filterText","filterItems","text","payload","selections","choices","onChoiceClicked","onSelectionClicked","itemUnselected","BBMultiSelectModule","BBSlideoutMenu","[class.slide-left]","[class.slide-right]","BBSlideoutMenuModule","SortableDirective","options","initChildren","holdingClass","draggedItem","bbend","hoverClass","updateDropzoneClass","doDrop","dropTarget","newPosition","children","setProperty","orderChanged","restingClass","cssClass","adding","classList","contains","BBSortableModule","TabService","TabDirective","tabService","active","bbshowstart","tabName","tabsets","tabset","setActive","onClick","parentElement","child","activeClassElement","activeClassTarget","hasAttribute","activeClass","childActiveClass","bbactiveclass","parentActiveClass","bbshowend","TabContentDirective","setVisibility","ngDoCheck","display","activeTab","setStyle","BBTabModule","BB_MODULES","BearBonesModule","BBRootModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\nimport { AnimationMetadata } from \"@angular/animations\";\r\n\r\n/**\r\n * Provides the animation to play when the panel transitions \r\n * from state 2 to state 1.\r\n */\r\nexport const AltPanelState1Animation = \r\n  new InjectionToken<AnimationMetadata|AnimationMetadata[]>('BB_ALT_PANEL_STATE_1_ANIMATION');\r\n\r\n  /**\r\n   * Provides the animation to play when the panel transitions \r\n   * from state 1 to state 2.\r\n   */\r\nexport const AltPanelState2Animation = \r\n  new InjectionToken<AnimationMetadata|AnimationMetadata[]>('BB_ALT_PANEL_STATE_2_ANIMATION');\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Input, OnInit, OnDestroy } from '@angular/core';\r\nimport { BBDynamicAnimationsService } from './dynamic-animations.service';\r\nimport { BBDynamicAnimationsHandler } from './dynamic-animations-handler/dynamic-animations-handler.model';\r\nimport { BBStateCSSMap } from './state-css-map/state-css-map.model';\r\nimport { BBAnimationTransitions } from './animation-transitions/animation-transitions.model';\r\n\r\n/**\r\n * This base class uses the {@link BBDynamicAnimationsService} to generate\r\n * a {@link BBDynamicAnimationsHandler} and attach it to the element \r\n * passed into the super call.\r\n * \r\n * This base class is only suitable for animating a single element.  In order \r\n * to animate more consider using the {@link BBDynamicAnimationsService} \r\n * directly and wiring up a separate instance of \r\n * {@link BBDynamicAnimationsHandler} to each element.\r\n * \r\n * It defines the series of inputs that can be used to control the animation\r\n * of the specified element.\r\n * \r\n * @member cssMap An `@Input` for the mapping of states to css classes as a \r\n * {@link BBStateCSSMap}.\r\n * @member state An `@Input` for the state as a string.\r\n * @member transitions An `@Input` for the map of state transitions to \r\n * animations as a {@link BBAnimationTransitions}.\r\n * \r\n * @example\r\n * `@Component()`\r\n * export class BBAlternatingPanelComponent extends DynamicAnimationsBase {\r\n *     constructor(\r\n *         protected elRef: ElementRef,\r\n *         protected daServ: BBDynamicAnimationsService,\r\n *     ) {\r\n *         super(elRef.nativeElement, daServ);\r\n *     }\r\n * }\r\n */\r\nexport abstract class BBDynamicAnimationsBase implements OnInit, OnDestroy {\r\n    protected animationsHandler: BBDynamicAnimationsHandler;\r\n\r\n    @Input() set cssMap (map: BBStateCSSMap) {\r\n        this.animationsHandler.setCSSMap(map);\r\n    }\r\n    \r\n    @Input() set state(toState: string) {\r\n        this.animationsHandler.nextState(toState);\r\n    }\r\n    \r\n    @Input() set transitions(transitions: BBAnimationTransitions) {\r\n        this.animationsHandler.setTransitions(transitions);\r\n    }\r\n     \r\n    /**\r\n     * BBDynamicAnimationsBase constructor\r\n     * @param element The element, not ElementRef, to apply the animations to.\r\n     * @param dynamicAnimationsService The {@link BBDynamicAnimationsService} to use for the animations.\r\n     */\r\n    constructor(\r\n        protected element: any,\r\n        protected dynamicAnimationsService: BBDynamicAnimationsService,\r\n    ) {\r\n        this.animationsHandler = this.dynamicAnimationsService\r\n          .createAnimationsHandler(this.element);\r\n\r\n        /*\r\n         * Override the behaviour of ngOnInit and \r\n         * ngOnDestroy so that an inheritor of this \r\n         * class does not have to call the super \r\n         * version of each.\r\n         */\r\n\r\n        const onInit = this.ngOnInit;\r\n        this.ngOnInit = () => {\r\n            this.baseInit();\r\n            onInit.apply(this);\r\n        };          \r\n  \r\n        const onDestroy = this.ngOnDestroy;\r\n        this.ngOnDestroy = () => {\r\n            this.baseDestroy();\r\n            onDestroy.apply(this);\r\n        };          \r\n    }\r\n\r\n    ngOnInit() {  \r\n    }\r\n    \r\n    ngOnDestroy() {\r\n    }\r\n\r\n    private baseInit() {\r\n        this.animationsHandler.init();\r\n    }\r\n\r\n    private baseDestroy() {\r\n        this.animationsHandler.destroy();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { InjectionToken } from '@angular/core';\r\nimport { BBDynamicAnimationsHandlerConstructor } from './dynamic-animations-handler.constructor';\r\n\r\nexport const BBDynamicAnimationsHandlerConstructorToken = \r\n    new InjectionToken<BBDynamicAnimationsHandlerConstructor>('BBDynamicAnimationsHandlerToken');","import { Injectable, RendererFactory2 } from '@angular/core';\nimport { BBStateCSSMapper } from './state-css-mapper.model';\nimport { BBStateCSSMap } from '../state-css-map/state-css-map.model';\n\n/**\n * This service creates a closure that handles \n * adding and removing css classes form a given element\n * based on the {@link BBStateCSSMap}.\n */\n@Injectable()\nexport class BBStateCssMapperService {\n\n  constructor(private rendererFactory: RendererFactory2) {\n  }\n\n  /**\n   * Get the css class for the given state.\n   * \n   * @param state The state.\n   * @param map The {@link BBStateCSSMap} to look the state up in.\n   */\n  getCSSClass(state:string, map: BBStateCSSMap) {\n    return map && map[state];\n  }\n\n  /**\n   * Create the {@link BBStateCSSMapper} to apply to the given element.\n   * \n   * @param element The element to apply the css classes to.\n   * @param map The {@link BBStateCSSMap} that defines the css classes and states.\n   */\n  createStateCSSMapper(element: any, map: BBStateCSSMap) {\n    let renderer = this.rendererFactory.createRenderer(element,null);\n\n    return <BBStateCSSMapper>{\n      remove: (state:string)=> {\n        renderer.removeClass(element,this.getCSSClass(state,map));\n      },\n      add: (state:string)=> {\n        renderer.addClass(element,this.getCSSClass(state,map));\n      },\n      removeAll: ()=> {\n        Object.keys(map).forEach(entry=>renderer.removeClass(element, map[entry]));\n      },\n      destroy: ()=> {\n        renderer.destroy();\n        renderer = null;\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AnimationPlayer, AnimationBuilder } from '@angular/animations';\nimport { BBAnimationTransitions } from '../animation-transitions/animation-transitions.model';\nimport { BBAnimationPlayers } from '../animation-players/animation-players.model';\nimport { BBAnimationStateMachine } from '../animation-state-machine/animation-state-machine.model';\nimport { BBStateCSSMapper } from '../state-css-mapper/state-css-mapper.model';\n\n/**\n * This service creates an animation transition \n * state machine with the method \n * [createAnimationStateMachine]{@link BBAnimationStatesService#createAnimationStateMachine} \n * from a given BBAnimationTransitions object.\n * \n * The returned state machine is in the shape of \n * [BBAnimationStateMachine]{@link BBAnimationStateMachine} which consists of 3 \n * methods:\n * \n */\n@Injectable()\nexport class BBAnimationStatesService {\n\n  constructor(\n    private builder: AnimationBuilder) {}\n\n  /**\n   * Build a group of [Animation Players]{@link @angular/animations#AnimationPlayer}.\n   * \n   * @param element The element to apply the animations to.\n   * @param transitions The map of state transition animations for the element.\n   * @returns A data structure representing the transition names and animation\n   * players in the shape of [BBAnimationPlayers]{@link BBAnimationPlayers}\n   */\n  buildPlayers(\n    element: any, \n    transitions: BBAnimationTransitions) {\n\n    return Object.keys(transitions).reduce<BBAnimationPlayers>(\n      (players,fromState)=>{\n        players[fromState] = Object.keys(transitions[fromState])\n          .reduce<{[toState:string]: AnimationPlayer}>(\n            (prev,toState)=>{\n              const player = this.builder\n                .build(transitions[fromState][toState])\n                .create(element);\n              prev[toState] = player; \n              return prev;\n            },{});\n      return players;\n    },{});\n  }\n\n  /**\n   * Create the callback function for an animation to \n   * execute when the animation starts.  The callback \n   * will remove the css class defined by the state \n   * and the [BBStateCSSMapper]{@link BBStateCSSMapper}.\n   * \n   * @param state The string that represents the state.\n   * @param mapper The [BBStateCSSMapper]{@link BBStateCSSMapper}\n   * that modifies the css of an element.\n   */\n  onAnimationStart = (\n    state: string, \n    mapper: BBStateCSSMapper = null) => () => {\n      if(mapper) {\n        mapper.remove(state);\n      }\n  }\n\n /**\n   * Create the callback function for an animation to \n   * execute when the animation finishes.  The callback \n   * will add the css class defined by the state \n   * and the [BBStateCSSMapper]{@link BBStateCSSMapper}.\n   * \n   * @param state The string that represents the state.\n   * @param mapper The [BBStateCSSMapper]{@link BBStateCSSMapper}\n   * that modifies the css of an element.\n   */\n  onAnimationDone = (\n    state: string, \n    mapper: BBStateCSSMapper = null) => () => {\n      if(mapper) {\n        mapper.add(state);\n      }\n  }\n\n  /**\n   * Get the player for a specific transition.\n   * @param fromState The current state.\n   * @param toState The next state.\n   * @param players The {@link BBAnimationPlayers} to look up the player in.\n   */\n  getPlayer(\n    fromState: string, \n    toState: string, \n    players: BBAnimationPlayers) {\n      return players && \n        players[fromState] && \n        players[fromState][toState];\n  }\n\n  /**\n   * Destroy the {@link @angular/animations#AnimationPlayer} objects\n   * inside the {@link BBAnimationPlayers}.\n   * @param players \n   */\n  destroyAllPlayers(players: BBAnimationPlayers) {\n    if(players) {\n      Object.keys(players).forEach(fromState=>{\n        Object.keys(players[fromState]).forEach(toState=>{\n          players[fromState][toState].destroy();\n        })\n      });\n    }\n  }\n\n  /**\n   * Create a {@link BBAnimationStateMachine} to apply to an\n   * element when the state is transitioned.\n   * @param element The element to apply the animations to.\n   * @param transitions The {@link BBAnimationTransitions} map of \n   * the state transition animations to play.\n   */\n  createAnimationStateMachine(\n    element: any, \n    transitions: BBAnimationTransitions = {}) {\n\n    let players = this.buildPlayers(element, transitions);\n    let currentState: string = '';\n    let currentPlayer: AnimationPlayer;\n\n    return <BBAnimationStateMachine> {\n        init: (state:string, mapper: BBStateCSSMapper = null)=> { \n          currentState = state;\n\n          if(mapper) {\n            mapper.add(currentState);\n          }\n        },\n\n        next: (nextState: string, mapper: BBStateCSSMapper = null) => {\n          if(currentState !== nextState) {\n\n            const newPlayer = this.getPlayer(currentState, nextState,players);\n\n            if(currentPlayer) {\n              currentPlayer.reset();\n            }\n\n            if(newPlayer) {\n              currentPlayer = newPlayer;\n\n              /*\n               * Reseting the player clears the callbacks\n               * so reregister them each time before playing.\n               */\n              currentPlayer.onStart(\n                this.onAnimationStart(currentState,mapper));\n              currentPlayer.onDone(\n                this.onAnimationDone(nextState,mapper));\n\n              currentPlayer.play();\n            } \n            /*\n             * In case an animation isn't defined for\n             * the transition but a css class is handle\n             * that by explicitly swapping out  the css \n             * classes when the transition player doesn't \n             * exist.\n             */\n            else {\n              if(mapper) {\n                mapper.remove(currentState);\n                mapper.add(nextState); \n              }\n            } \n\n            currentState = nextState;\n          }\n          return currentState;\n        },\n\n        destroy: ()=> {\n          this.destroyAllPlayers(players);\n          currentPlayer = null;\n          currentState = null;\n          currentPlayer = null;\n          players = null;\n        }\n    } \n\n  }\n}\n\n","import { Injectable, Inject } from '@angular/core';\nimport { BBDynamicAnimationsHandlerConstructor } from './dynamic-animations-handler/dynamic-animations-handler.constructor';\nimport { BBDynamicAnimationsHandlerConstructorToken } from './dynamic-animations-handler/dynamic-animations-handler.token';\nimport { BBStateCssMapperService } from './state-css-mapper/state-css-mapper.service';\nimport { BBAnimationStatesService } from './animation-states/animation-states.service';\n\n/**\n * This import is required for ts to resolve the return of \n * the createAnimationsHandler function.  Without it compilation\n * will fail.\n */\nimport { BBDynamicAnimationsHandler } from './dynamic-animations-handler/dynamic-animations-handler.model';\n\n/*\nimport { BBAnimationStateMachine } from './animation-state-machine/animation-state-machine.model';\nimport { BBStateCSSMapper } from './state-css-mapper/state-css-mapper.model';\nimport { BBStateCSSMap } from './state-css-map/state-css-map.model';\nimport { BBAnimationTransitions } from './animation-transitions/animation-transitions.model';\n*/\n\n/**\n * This service is used to create a {@link BBDynamicAnimationsHandler} \n * with the {@link BBDynamicAnimationsService.createAnimationsHandler} method.\n * \n * The {@link BBDynamicAnimationsHandler} \n * can be used to handle animations based on state transitions\n * for the specified element.\n * \n * The {@link BBDynamicAnimationsHandler} can be wired up to a \n * particular component or directive to automatically handle \n * the animations for the specified element.\n * \n * @example\n * `@Directive()`\n * export class AnimatedDirective {\n *   private animationsHandler: BBDynamicAnimationsHandler;\n * \n *   `@Input()` set cssMap (map: BBStateCSSMap) {\n *     this.animationsHandler.setCSSMap(map);\n *   }\n * \n *   `@Input()` set state(toState: string) {\n *     this.animationsHandler.nextState(toState);\n *   }\n * \n *   `@Input()` set transitions(transitions: BBAnimationTransitions) {\n *     this.animationsHandler.setTransitions(transitions);\n *   }\n * \n *   constructor(\n *     private elRef: ElementRef,\n *     private daService: DynamicAnimationsService,\n *   ) {\n *     this.animationsHandler = this.daService\n *       .createAnimationsHandler(this.elRef.nativeElement);\n *   }\n * \n *   ngOnInit() {  \n *     this.animationsHandler.init();\n *   }\n * \n *   ngOnDestroy() {\n *     this.animationsHandler.destroy();\n *   }\n * }\n * \n */\n@Injectable()\nexport class BBDynamicAnimationsService {\n\n  constructor(\n    @Inject(BBDynamicAnimationsHandlerConstructorToken) \n    private constructor: BBDynamicAnimationsHandlerConstructor,\n    private cssMapperService: BBStateCssMapperService,\n    private animationStatesBuilder: BBAnimationStatesService,\n  ) { }\n\n  /**\n   * Create a {@link BBDynamicAnimationsHandler} for \n   * the given element.\n   * \n   * See {@link DynamicAnimationsService} for example\n   * usage.\n   * \n   * @param element The element to attach the animations\n   * handler to. \n   */\n  createAnimationsHandler(element: any) {\n    return new this.constructor(\n      element,\n      this.cssMapperService,\n      this.animationStatesBuilder);\n  }\n}\n\n\n\n\n\n    //private cssMapperService: BBStateCssMapperService,\n    //private aStateBuilder: BBAnimationStatesService,\n\n\n\n\n\n\n\n\n\n\n /*\n    let animationsStateMachine: BBAnimationStateMachine;\n    let cssMapper: BBStateCSSMapper;\n    let stateCache: string = '';\n    let mapCache: BBStateCSSMap = {};\n    let transitionsCache: BBAnimationTransitions = {};\n    */\n\n    /*\n\n    return <BBDynamicAnimationsHandler>{\n      setCSSMap: (map: BBStateCSSMap) => {\n        if(mapCache !== map) {\n          mapCache = map;\n\n          if(cssMapper) {\n            cssMapper.removeAll();\n            cssMapper.destroy();\n          }\n\n          cssMapper = this.cssMapperService\n            .createStateCSSMapper(element,mapCache);\n        }\n      },\n\n      nextState: (toState:string) => {\n        if(stateCache !== toState) {\n          stateCache = toState;\n\n          if(animationsStateMachine) {\n            animationsStateMachine.next(\n              stateCache, \n              cssMapper);\n          }\n        }\n      },\n\n      setTransitions: (transitions: BBAnimationTransitions) => {\n        if(transitionsCache !== transitions) {\n          transitionsCache = transitions;\n\n          if(animationsStateMachine) {\n\n            if(cssMapper) {\n              cssMapper.removeAll();\n            }\n\n            animationsStateMachine.destroy();\n          }    \n\n          animationsStateMachine = \n            this.aStateBuilder\n              .createAnimationStateMachine(\n                element,\n                transitionsCache);\n        }\n      },\n\n      init: () => {  \n        if(animationsStateMachine) {\n          animationsStateMachine.init(\n            stateCache,\n            cssMapper);\n        }\n      },\n\n      destroy: () => {\n        animationsStateMachine.destroy();\n        cssMapper.destroy();\n        stateCache = null;\n        mapCache = null;\n        transitionsCache = null;\n      }\n    }\n    */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { Component, ElementRef } from '@angular/core';\nimport { BBDynamicAnimationsBase } from '../dynamic-animations/dynamic-animations.base';\nimport { BBDynamicAnimationsService } from '../dynamic-animations/dynamic-animations.service';\n\n/**\n * \n */\n@Component({\n  selector: '[bb-alt-panel]',\n  template: `<ng-content></ng-content>`,\n  styles: [``],\n  animations: [],\n  exportAs: 'bbAltPanel',\n})\nexport class BBAlternatingPanelComponent extends BBDynamicAnimationsBase {\n  constructor(\n    protected elRef: ElementRef,\n    protected daServ: BBDynamicAnimationsService,\n  ) {\n    super(elRef.nativeElement, daServ);\n  }\n}\n","import { Directive, Input, ElementRef } from '@angular/core';\nimport { BBDynamicAnimationsService } from '../dynamic-animations/dynamic-animations.service';\nimport { BBAnimationTransitions } from '../dynamic-animations/animation-transitions/animation-transitions.model';\nimport { BBDynamicAnimationsHandler } from '../dynamic-animations/dynamic-animations-handler/dynamic-animations-handler.model';\nimport { BBStateCSSMap } from '../dynamic-animations/state-css-map/state-css-map.model';\n\n@Directive({\n  selector: '[bbAlternatingPanel]'\n})\nexport class BBAlternatingPanelDirective {\n  private animationsHandler: BBDynamicAnimationsHandler;\n\n  @Input() set cssMap (map: BBStateCSSMap) {\n    this.animationsHandler.setCSSMap(map);\n  }\n\n  @Input() set state(toState: string) {\n    this.animationsHandler.nextState(toState);\n  }\n\n  @Input() set transitions(transitions: BBAnimationTransitions) {\n    this.animationsHandler.setTransitions(transitions);\n  }\n\n  constructor(\n    private elRef: ElementRef,\n    private daServ: BBDynamicAnimationsService,\n  ) {\n    this.animationsHandler = this.daServ\n      .createAnimationsHandler(this.elRef.nativeElement);\n  }\n\n  ngOnInit() {  \n    this.animationsHandler.init();\n  }\n\n  ngOnDestroy() {\n    this.animationsHandler.destroy();\n  }\n  \n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBAlternatingPanelComponent } from './alternating-panel.component';\nimport { BBAlternatingPanelDirective } from './alternating-panel.directive';\nimport { BBDynamicAnimationsModule } from '../dynamic-animations/dynamic-animations.module';\n\nimport { BBAnimationStatesService } from '../dynamic-animations/animation-states/animation-states.service';\nimport { BBStateCssMapperService } from '../dynamic-animations//state-css-mapper/state-css-mapper.service';\n\n\n@NgModule({\n  imports: [\n    //CommonModule,\n    //BBDynamicAnimationsModule.forRoot(),\n  ],\n  \n  declarations: [\n    BBAlternatingPanelComponent,\n    BBAlternatingPanelDirective, \n  ],\n\n  exports: [\n    BBAlternatingPanelComponent,\n    BBAlternatingPanelDirective\n  ]\n})\nexport class BBAlternatingPanelModule { \n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBAlternatingPanelModule,\n      providers: [\n        //BBAnimationStatesService,\n        //BBStateCssMapperService\n      ]\n    };\n  }  \n}\n","import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[bb-menu-item]',\r\n})\r\nexport class  BBMenuItem {\r\n    constructor(\r\n        private _viewContainer: ViewContainerRef) { }\r\n}","import { \r\n  Component,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  EventEmitter,\r\n  TemplateRef,\r\n  ViewRef,\r\n  Renderer,\r\n  ViewChild,\r\n  HostBinding,\r\n  NgZone,\r\n } from '@angular/core';\r\nimport { BBMenuItem } from '../common/menu-item.directive';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-collapsing-menu]',\r\n  template: `<div class=\"menu-container\">\r\n  <div #displayedItems class=\"displayed\">\r\n  </div>\r\n\r\n  <div  #toggle\r\n        [class.hidden]=\"!hasOverflow\" \r\n        [bb-sliding-panel-toggle]=\"panel\"\r\n        [toggleOnClick]=\"toggleOnClick\"\r\n        [closeOnClickOutside]=\"closeOnClickOutside\"\r\n        [showOnHover]=\"showOnHover\">\r\n    \r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n  <div bb-sliding-panel \r\n       #panel=\"bbSlidingPanel\"\r\n       #collapsedItems \r\n       slideDirection=\"down\"\r\n       #panel=\"bbSlidingPanel\">\r\n  </div>\r\n</div>`,\r\n  styles: [`div.displayed{flex-grow:1;flex-direction:row;flex-shrink:0;display:flex}div.menu-container{position:relative;height:inherit;flex-direction:row;display:flex;align-items:center;flex-shrink:0;flex-grow:1}div.bb-sliding-panel{display:flex;flex-direction:column;flex-grow:1;position:absolute;right:0;top:100%}div.hidden{visibility:hidden}`],\r\n  host:{\r\n    '(window:resize)': \"onWindowResize()\",\r\n  },\r\n  exportAs: \"bbCollapsingMenu\"\r\n})\r\nexport class BBCollapsingMenu {\r\n  @HostBinding('class.bb-collapsing-menu') applyHostClass = true;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should  \r\n   * open based on a click event or not.\r\n   */\r\n  @Input() toggleOnClick = true;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should open \r\n   * on mouse over or not.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should close\r\n   * When clicked outside the toggle or panel or not.\r\n   */\r\n  @Input() closeOnClickOutside = true;\r\n\r\n  @ContentChildren(BBMenuItem, {read:ElementRef, descendants: false}) \r\n    items: QueryList<ElementRef>;\r\n  @ViewChild('displayedItems', {read:ElementRef}) \r\n    displayedItems: ElementRef;\r\n  @ViewChild('collapsedItems', {read:ElementRef}) \r\n    collapsedItems: ElementRef;\r\n  @ViewChild('toggle', {read:ElementRef}) \r\n    toggle: ElementRef;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  /**\r\n   * Per issue 10098 ContentChildren currently also adds the host component\r\n   * to a QueryList that it satisfies making it necessary to filter the \r\n   * host component out of it's own list in case someone wants to nest\r\n   * a collapsing menu inside another BB component that uses BBMenuItems.\r\n   * \r\n   * https://github.com/angular/angular/issues/10098#issuecomment-235157642\r\n   */\r\n  private get itemElements(): ElementRef[] {\r\n    return this.items.toArray()\r\n      .filter(el=> el.nativeElement !== this.hostElementRef.nativeElement);\r\n  }\r\n\r\n  private get hostDiv(): HTMLDivElement {\r\n    return this.hostElementRef.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get displayedDiv(): HTMLDivElement {\r\n    return this.displayedItems.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get collapsedDiv(): HTMLDivElement {\r\n    return this.collapsedItems.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get toggleDiv(): HTMLDivElement {\r\n    return this.toggle.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  hasOverflow = false;\r\n\r\n  constructor(\r\n    private renderer: Renderer, \r\n    private hostElementRef: ElementRef,\r\n    private zone: NgZone) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.calculateOverflow();\r\n  }\r\n\r\n  /**\r\n   * Determine which, if any, items need to be \r\n   * moved into the collapsed panel when they \r\n   * overflow the menu width.\r\n   */\r\n  private calculateOverflow() {\r\n      this.renderer.projectNodes(this.displayedDiv, \r\n        this.itemElements.map(el=>{ return el.nativeElement }));\r\n\r\n      if(this.areDisplayedItemsToWide()) {\r\n\r\n        this.zone.run(()=>{\r\n          setTimeout(()=>{\r\n            this.hasOverflow = true})});\r\n\r\n        const menuCalcedRight = \r\n          (this.hostDiv.offsetLeft + \r\n          this.hostDiv.offsetWidth - \r\n          this.toggleDiv.offsetWidth);\r\n\r\n        let firstOverflowIndex = Number.POSITIVE_INFINITY;\r\n        let overflowAmount = 0;\r\n                   \r\n        // find the first item that is outside the menu's size - toggle size\r\n        for(let i = 0; i < this.itemElements.length; i++) {\r\n          const ele = (this.itemElements[i].nativeElement as HTMLElement);\r\n          const eleCalcedRight = (ele.offsetLeft + this.hostDiv.offsetLeft + ele.offsetWidth);\r\n\r\n          // calculate how much an item overflows the container\r\n          // taking the toggles width into account.\r\n          overflowAmount = eleCalcedRight - menuCalcedRight;\r\n\r\n          if(overflowAmount > 0) {\r\n            firstOverflowIndex = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // all items are collapsed\r\n        if (firstOverflowIndex == 0) {\r\n            this.renderer.projectNodes(this.collapsedDiv,\r\n              this.itemElements.map(el=>{return el.nativeElement}));\r\n        }\r\n\r\n        // the overflow items make enough room for the toggle\r\n        else {\r\n            this.renderer.projectNodes(this.collapsedDiv,\r\n              this.itemElements\r\n                .filter((el,index)=>{\r\n                  return (index >= firstOverflowIndex)})\r\n                .map(el=>{return el.nativeElement}));\r\n        }\r\n      }\r\n      else {\r\n        this.zone.run(()=>{\r\n          setTimeout(()=>{\r\n            this.hasOverflow = false})});\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Determine if the menu content width is larger than the menu width\r\n   */\r\n  private areDisplayedItemsToWide() {\r\n    return this.displayedDiv.getBoundingClientRect().width > \r\n      this.hostDiv.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Event handlers\r\n   */\r\n\r\n  onWindowResize() {\r\n    this.calculateOverflow();\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBMenuItem } from './menu-item.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    BBMenuItem,\r\n  ],\r\n  exports: [\r\n    BBMenuItem,\r\n  ]\r\n})\r\nexport class BBCommonModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBCommonModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","export enum SlideAnimationDirections {\r\n    CLOSE = 'close',\r\n    SLIDE_LEFT = 'slide-left',\r\n    SLIDE_RIGHT = 'slide-right',\r\n    SLIDE_UP = 'slide-up',\r\n    SLIDE_DOWN = 'slide-down',\r\n}\r\n\r\nexport enum SlideDirections {\r\n    LEFT = 'left',\r\n    RIGHT = 'right',\r\n    UP = 'up',\r\n    DOWN = 'down',\r\n}","import { \r\n  Component, \r\n  Input, \r\n  Output, \r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  HostListener,\r\n  NgZone,\r\n  HostBinding,\r\n} from '@angular/core';\r\n\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  keyframes,\r\n  animate,\r\n  group\r\n} from '@angular/animations';\r\n\r\nimport { \r\n  verticalSlideAnimations, \r\n  horizontalSlideAnimations } from './sliding-panel.animations';\r\nimport { SlideAnimationDirections, SlideDirections } from './sliding-panel.enums';\r\n\r\n\r\n\r\n/**\r\n * A sliding panel is a div element that can be \r\n * set to slide up, down, left, or right.\r\n * \r\n * It can be tied to a slidiing panel toggle\r\n * or can be shown or hidden by calling the\r\n * public members show, hide, or toggle. \r\n */\r\n@Component({\r\n  selector: 'div[bb-sliding-panel]',\r\n  template: `<ng-content></ng-content>`,\r\n  styles: [``],\r\n  host: {\r\n    '[@horizontalTrigger]':'horizontalState',\r\n    '[@verticalTrigger]':'verticalState',\r\n    '[class.open]':'isShowing',\r\n    '[class.closed]':'!isShowing',\r\n    '[class.pinned]':'pinned',\r\n    '(mouseenter)':'mouseEnterPanel.emit($event)',\r\n    '(mouseleave)':'mouseLeavePanel.emit($event)',\r\n    '(mouseover)':'mouseOverPanel.emit($event)',\r\n    '(click)':'clickPanel.emit($event)',\r\n    '[class.bb-sliding-panel]':\"'true'\"\r\n  },\r\n  animations: [\r\n    verticalSlideAnimations(), \r\n    horizontalSlideAnimations(),\r\n  ],\r\n  exportAs: 'bbSlidingPanel',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BBSlidingPanel {\r\n  /**\r\n   * Specify the direction of the panels sliding animation.\r\n   * Valid values: 'up', 'down', 'left', or 'right'\r\n   */\r\n  @Input() slideDirection: SlideDirections = SlideDirections.DOWN;\r\n\r\n  /**\r\n   * Event for when the mouse enters the panel.\r\n   */\r\n  @Output() mouseEnterPanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the mouse leaves the panel.\r\n   */\r\n  @Output() mouseLeavePanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the mouse is over the panel.\r\n   */\r\n  @Output() mouseOverPanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the panel is clicked.\r\n   */\r\n  @Output() clickPanel= new EventEmitter<MouseEvent>();\r\n\r\n  public pinned = false;\r\n\r\n\r\n  /**\r\n   * Trigger for the horizontal animations.\r\n   */\r\n  horizontalState : SlideAnimationDirections = SlideAnimationDirections.CLOSE;\r\n\r\n  /**\r\n   * Trigger for the vertical animations.\r\n   */\r\n  verticalState : SlideAnimationDirections = SlideAnimationDirections.CLOSE;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) { }\r\n\r\n  /**\r\n   * Returns whether the panel is open or closed.\r\n   */\r\n  public get isShowing() {\r\n    return (this.horizontalState !== SlideAnimationDirections.CLOSE ||\r\n        this.verticalState !== SlideAnimationDirections.CLOSE);\r\n  }\r\n\r\n  /**\r\n   * Show the panel with a sliding animation.\r\n   */\r\n  public show() {\r\n    switch(this.slideDirection) {\r\n      case SlideDirections.LEFT: {\r\n        this.horizontalState = SlideAnimationDirections.SLIDE_LEFT;\r\n        break;\r\n      }\r\n      case SlideDirections.RIGHT: {\r\n        this.horizontalState = SlideAnimationDirections.SLIDE_RIGHT;\r\n        break;\r\n      }\r\n      case SlideDirections.UP: {\r\n        this.verticalState = SlideAnimationDirections.SLIDE_UP;\r\n        break;\r\n      }\r\n      case SlideDirections.DOWN: {\r\n        this.verticalState = SlideAnimationDirections.SLIDE_DOWN;\r\n        break;\r\n      }\r\n      default: {\r\n        this.horizontalState = SlideAnimationDirections.CLOSE;\r\n        this.verticalState = SlideAnimationDirections.CLOSE;\r\n        break;\r\n      }\r\n    }\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Hide the panel with a sliding animation.\r\n   */\r\n  public hide() {\r\n    this.horizontalState = SlideAnimationDirections.CLOSE;\r\n    this.verticalState = SlideAnimationDirections.CLOSE;\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Toggle the panel state with a sliding animation.\r\n   */\r\n  public toggle() {\r\n    if(this.isShowing){\r\n      this.hide();\r\n    }\r\n    else{\r\n      this.show();\r\n    }\r\n  }\r\n\r\n}\r\n","import { animation, trigger, state, style, transition, group, animate } from \"@angular/animations\";\r\nimport { AnimationMetadata } from '@angular/animations';\r\nimport { SlideAnimationDirections } from \"./sliding-panel.enums\";\r\n\r\nexport function verticalSlideAnimations(): AnimationMetadata  {\r\n    return trigger('verticalTrigger', [\r\n        state(SlideAnimationDirections.CLOSE, style({\r\n            transform: 'scaleY(0)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_DOWN, style({\r\n            transform: 'scaleY(1)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_UP, style({\r\n            transform: 'scaleY(1)', \r\n        })),\r\n        transition(\r\n                /*\r\n                SlideDirections.CLOSE + \r\n                ' => ' + \r\n                SlideDirections.SLIDE_DOWN, \r\n                */\r\n                `${SlideAnimationDirections.CLOSE} => ${SlideAnimationDirections.SLIDE_DOWN}`, \r\n                [\r\n            style({ \r\n                transform: 'scaleY(0)', \r\n                'transform-origin': 'top' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleY(1)', \r\n                    'transform-origin': 'top' \r\n            })),\r\n        ]),\r\n        transition(\r\n            `${SlideAnimationDirections.SLIDE_DOWN} => ${SlideAnimationDirections.CLOSE}`,\r\n            /*\r\n                SlideDirections.SLIDE_DOWN + \r\n                ' => ' + \r\n                SlideDirections.CLOSE, \r\n            */\r\n            [\r\n            style({ \r\n                transform: 'scaleY(1)', \r\n                'transform-origin': 'top' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleY(0)', \r\n                    'transform-origin': 'top' \r\n            \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_UP, [\r\n            style({ \r\n                transform: 'scaleY(0)', \r\n                'transform-origin': 'bottom' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleY(1)', \r\n                    'transform-origin': 'bottom' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_UP + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleY(1)', \r\n                'transform-origin': 'bottom' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleY(0)', \r\n                    'transform-origin': 'bottom' \r\n            \r\n            })),\r\n        ])\r\n        \r\n    ]);\r\n}\r\n\r\nexport function horizontalSlideAnimations(): AnimationMetadata  {\r\n    return trigger('horizontalTrigger', [\r\n        state(SlideAnimationDirections.CLOSE, style({\r\n            transform: 'scaleX(0)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_RIGHT, style({\r\n            transform: 'scaleX(1)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_LEFT, style({\r\n            transform: 'scaleX(1)', \r\n        })),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_RIGHT, [\r\n            style({ \r\n                transform: 'scaleX(0)', \r\n                'transform-origin': 'left' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleX(1)', \r\n                    'transform-origin': 'left' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_RIGHT + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleX(1)', \r\n                'transform-origin': 'left' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleX(0)', \r\n                    'transform-origin': 'left' \r\n            \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_LEFT, [\r\n            style({ \r\n                transform: 'scaleX(0)', \r\n                'transform-origin': 'right' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleX(1)', \r\n                    'transform-origin': 'right' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_LEFT + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleX(1)', \r\n                'transform-origin': 'right' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleX(0)', \r\n                    'transform-origin': 'right' \r\n            \r\n            })),\r\n        ])\r\n        \r\n    ]);\r\n}\r\n","import { \r\n  Directive, \r\n  Input, \r\n  HostListener, \r\n  HostBinding, \r\n  NgZone, \r\n  ElementRef, \r\n  OnInit,\r\n  OnDestroy,\r\n  AfterViewInit} from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel.component';\r\nimport { Observable ,  Subscription ,  fromEvent ,  of } from 'rxjs';\r\nimport { filter ,  combineLatest ,  merge ,  map ,  debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * Control a sliding panels shown or hidden state.\r\n * \r\n * Should only be attached to elements that have\r\n * a click event.\r\n */\r\n@Directive({\r\n  selector: '[bb-sliding-panel-toggle]',\r\n  host: {\r\n    '[class.open]':'panel.isShowing',\r\n    '[class.closed]':'!panel.isShowing',\r\n    '[class.pinned]':'panel.pinned',\r\n    '[class.bb-sliding-panel-toggle]':\"'true'\"\r\n  },\r\n  exportAs:'bbSlidingPanelToggle'\r\n})\r\nexport class BBSlidingPanelToggle implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * The panel that the toggle is attached to.\r\n   * \r\n   * If this value is not set an error will be \r\n   * thrown during init.\r\n   */\r\n  @Input('bb-sliding-panel-toggle') panel: BBSlidingPanel;\r\n\r\n  /**\r\n   * Controls whether the panel should open based \r\n   * on a click event or not.\r\n   */\r\n  @Input() toggleOnClick = false;\r\n\r\n  /**\r\n   * Controls whether the panel should open \r\n   * on mouse over or not.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Controls whether the panel should close When\r\n   * clicked outside the toggle or panel or not.\r\n   */\r\n  @Input() closeOnClickOutside = false;\r\n\r\n  /**\r\n   * Sets the initial state of the panel \r\n   * by pinning open it if true.\r\n   */\r\n  @Input() showOnInit: boolean;\r\n\r\n  /**\r\n   * Keep track of the previous pin state.\r\n   * This is needed to determine if the \r\n   * new pin state should actually cause a\r\n   * transition or not.\r\n   */\r\n  private previousPinnedState: boolean = false;\r\n  \r\n  /**\r\n   * Save he subscription so the stream\r\n   * can be properly closed.\r\n   */\r\n  private showHideSubscription: Subscription;\r\n\r\n  constructor(private element: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if(!this.panel){\r\n      throw new Error('No SlidingPanel component supplied to ' + \r\n                      'the bb-sliding-panel-toggle directive ' + \r\n                      '([bb-sliding-panel-toggle]=\"$PanelVariable\").');\r\n    }\r\n\r\n    if(this.showHideSubscription && !this.showHideSubscription.closed) {\r\n      this.showHideSubscription.unsubscribe();\r\n    }\r\n\r\n    /*\r\n     * Streams of the events necessary \r\n     * for the logic of the toggle.\r\n     */\r\n\r\n    let documentClick$ = fromEvent<MouseEvent>(document, 'click');\r\n    \r\n    let toggleClick$ = fromEvent<MouseEvent>(this.element.nativeElement, 'click');\r\n    let toggleMouseEnter$ = fromEvent<MouseEvent>(this.element.nativeElement, 'mouseenter');\r\n    let toggleMouseLeave$ = fromEvent<MouseEvent>(this.element.nativeElement, 'mouseleave');\r\n\r\n    let panelMouseEntered$ = this.panel.mouseEnterPanel.asObservable();\r\n    let panelMouseLeft$ = this.panel.mouseLeavePanel.asObservable();\r\n    let panelClick$ = this.panel.clickPanel.asObservable();\r\n\r\n    /*\r\n     * Reduce both leaving events to \r\n     * a false emission.\r\n     */\r\n    let leaveBoth$ = toggleMouseLeave$\r\n      .pipe(\r\n        merge(panelMouseLeft$),\r\n        filter(_=>this.showOnHover), \r\n        map(_=>false));\r\n\r\n    /*\r\n     * Reduce both enter events to \r\n     * a true emission.\r\n     */\r\n    let enterEither$ = toggleMouseEnter$\r\n      .pipe(\r\n        merge(panelMouseEntered$),\r\n        filter(_=>this.showOnHover),\r\n        map(_=>true));\r\n\r\n    /*\r\n     * When the toggle is clicked \r\n     * stop the event from bubbling\r\n     * and toggle the pinned state.\r\n     */\r\n    let toggleClicked$ = toggleClick$\r\n      .pipe(\r\n        map(_=> {\r\n          /*\r\n           * should probably be done with\r\n           * a do operator, once it works again,\r\n           * for both toggle clicked and panel\r\n           * clicked\r\n           */\r\n          event.stopPropagation();\r\n          return !this.previousPinnedState }));\r\n\r\n    /*\r\n     * When the panel is clicked\r\n     * stop the event from bubbling\r\n     * and just continue to emit the\r\n     * previous pinned state.\r\n     */\r\n    let panelClicked$ = panelClick$\r\n      .pipe(map(_=>{\r\n        event.stopPropagation();\r\n        return this.previousPinnedState }));\r\n\r\n    /*\r\n     * A document click is only\r\n     * triggered when the panel\r\n     * and the toggle don't prevent\r\n     * the bubbling so just emit \r\n     * false as the next pinned state.\r\n     */\r\n    let documentClicked$ = documentClick$\r\n      .pipe(\r\n        filter(_=>this.closeOnClickOutside),\r\n        map(_=>false));\r\n    \r\n    /*\r\n     * Combine all the pinned state\r\n     * streams.\r\n     */\r\n    let nextPinnedState$ = of(this.showOnInit)\r\n      .pipe(\r\n        merge(toggleClicked$, panelClicked$, documentClicked$));\r\n\r\n    /*\r\n     * Combine all the mouse movement\r\n     * streams.\r\n     */\r\n    let isHovering$ = of(false)\r\n      .pipe(\r\n        merge(leaveBoth$, enterEither$),\r\n        /*\r\n          * 50 here is arbitrary but \r\n          * seems to be below the \r\n          * human threshhold for noticing\r\n          * the delay while letting \r\n          * slower systems have plenty of\r\n          * time to process the events.\r\n          * \r\n          * Maybe it should be configurable?\r\n          */\r\n        debounceTime(50));\r\n\r\n    /*\r\n     * Combine the hover and pinned state\r\n     * streams into a stream that determines\r\n     * whether the panel state needs to change.\r\n     */\r\n    this.showHideSubscription = \r\n      isHovering$\r\n        .pipe(\r\n          combineLatest(nextPinnedState$),\r\n          map(states=>({hover:states[0],pin:states[1] })))\r\n        .subscribe(this.onNextState);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if(this.showHideSubscription && !this.showHideSubscription.closed) {\r\n      this.showHideSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  showPanel = () => this.onNextState({hover: false, pin: true});\r\n  hidePanel = () => this.onNextState({hover: false, pin: false});\r\n\r\n  /**\r\n   * Determine what the next panel state\r\n   * should be based on the new hover and\r\n   * pin states.\r\n   */\r\n  private onNextState = (nextStates:{hover: boolean, pin: boolean}) => {\r\n    if(nextStates.hover ) {\r\n      if(this.previousPinnedState && !nextStates.pin) { \r\n        this.panel.hide();  \r\n      }\r\n      else {\r\n        this.panel.show();\r\n      }\r\n    }\r\n    else {\r\n      if(!this.previousPinnedState && nextStates.pin) {\r\n        this.panel.show();\r\n      }\r\n      else if(!nextStates.pin){\r\n        this.panel.hide();\r\n      }\r\n    }\r\n    this.previousPinnedState = nextStates.pin;\r\n    this.panel.pinned = nextStates.pin;\r\n  }\r\n\r\n  \r\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { BBSlidingPanel } from './sliding-panel.component';\r\nimport { BBSlidingPanelToggle } from './toggle/sliding-panel-toggle.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBSlidingPanel, \r\n    BBSlidingPanelToggle, \r\n  ],\r\n\r\n  exports: [\r\n    BBSlidingPanel, \r\n    BBSlidingPanelToggle,\r\n  ]\r\n})\r\nexport class BBSlidingPanelModule { \r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBSlidingPanelModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBCommonModule } from '../common/common.module';\r\nimport { BBCollapsingMenu } from './collapsing-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBCommonModule,\r\n    BBSlidingPanelModule\r\n  ],\r\n  declarations: [BBCollapsingMenu],\r\n  exports: [BBCollapsingMenu]\r\n})\r\nexport class BBCollapsingMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBCollapsingMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","import { Subscription } from 'rxjs';\r\n\r\nexport function closeSubscription(sub: Subscription) {\r\n    if(sub && !sub.closed) {\r\n        sub.unsubscribe();\r\n    }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { BBContentConductorConstructor } from './content-conductor-constructor.model';\r\n\r\nexport const BBContentConductorConstructorToken = \r\n    new InjectionToken<BBContentConductorConstructor>('BBContainersConductorConstructorToken');","import { Directive, EmbeddedViewRef, ViewRef, ViewContainerRef, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[bb-content]'\n})\nexport class BBContentDirective {\n  constructor(private templateRef: TemplateRef<any>) {\n  }\n}\n","import { Injectable, QueryList, TemplateRef, Inject } from '@angular/core';\nimport { BBContentContainer } from './content-container/content-container.model';\nimport { BBContentConductorConstructorToken } from './content-conductor-constructor/content-conductor-constructor.token';\nimport { BBContentConductorConstructor } from './content-conductor-constructor/content-conductor-constructor.model';\n\n/*\n * Even though this import is not used it is required for typescript\n * to resolve the return type of the createContentConductor method.\n * If it is removed this service will not compile correctly.\n */\nimport { BBContentConductor } from './content-conductor.model';\n\n@Injectable()\nexport class BBContentConductorService {\n \n  constructor(\n    @Inject(BBContentConductorConstructorToken) \n    private constructor: BBContentConductorConstructor) { }\n\n  createContentConductor<T extends BBContentContainer>(\n    containersQueryList: QueryList<T>,\n    contentsQueryList : QueryList<TemplateRef<any>>) {\n    \n    return  new this.constructor(\n      containersQueryList,\n      contentsQueryList\n    );\n  }\n  \n}\n","import { Directive, ViewContainerRef, Input } from '@angular/core';\nimport { BBContentConductorService } from '../content-conductor.service';\nimport { BBContentContainer } from './content-container.model';\n\n@Directive({\n  selector: '[bb-content-container]'\n})\nexport class BBContentContainerDirective implements BBContentContainer {\n  @Input('bb-content-container') containerName: string;\n\n  get viewContainer() { return this.vcRef; }\n\n  constructor(\n    private vcRef: ViewContainerRef,\n    private ccService: BBContentConductorService) {\n      console.log('BBContentContainerDirective');\n  }\n  \n  ngOnInit() {\n    //this.ccService.registerContainer(this.containerName, this.vcRef);\n    console.log('content container vcr:', this.vcRef);\n  }\n}\n\n\n\n","import { QueryList, TemplateRef, ViewRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { BBContentConductor } from '../content-conductor.model';\nimport { BBContentContainer } from '../content-container/content-container.model';\nimport { BBContainersMap } from '../containers-map/containers-map.model';\n\nexport class BBDefaultContentConductorService<T extends BBContentContainer> implements BBContentConductor<T> {\n\n  constructor(\n    private containersQueryList: QueryList<T>,\n    private contentsQueryList : QueryList<TemplateRef<any>>\n  ) {}\n    \n  private containers: T[];\n  private templates: TemplateRef<any>[];\n  private containersMap: BBContainersMap = {};\n  private containersSub: Subscription;\n  private contentsSub: Subscription;\n\n  private mapContainers<T extends BBContentContainer>(\n    containers: T[]) {\n      return containers.reduce((map,container)=>{\n        map[container.containerName] = container.viewContainer;\n        return map;\n      },{});\n  }\n  \n  init(initialContainer: string) {\n    this.containers = this.containersQueryList.toArray();\n    this.templates = this.contentsQueryList.toArray();\n\n    this.containersMap = this.mapContainers(this.containers);\n    this.containersSub = this.containersQueryList\n      .changes\n      .subscribe((c: T[])=>{\n        this.containers = c;\n        this.mapContainers(this.containers);\n      });\n\n    this.contentsSub = this.contentsQueryList\n      .changes\n      .subscribe((t: TemplateRef<any>[])=>{\n        this.templates = t;\n      });\n\n    if(initialContainer && this.templates) {\n      this.templates.map(template=>\n        this.containersMap[initialContainer]\n          .createEmbeddedView(template));\n    }\n  }\n\n  destroy() {\n    if(this.containersSub && !this.containersSub.closed) { \n      this.containersSub.unsubscribe(); \n    }\n\n    if(this.contentsSub && !this.contentsSub.closed) {\n      this.contentsSub.unsubscribe();\n    }\n  }\n\n  moveView( \n    previousContainer: string,\n    nextContainer:string, \n    index: number ) {\n      index = index || this.containersMap[previousContainer].length;\n      const view = this.containersMap[previousContainer].detach(index);\n      this.containersMap[nextContainer].insert(view);\n  }\n\n  detachView(\n    container:string,\n    index?: number) {\n      return this.containersMap[container].detach(index);\n  }\n\n  moveViews(previousContainer: string, nextContainer: string) {\n    const length = this.containersMap[previousContainer].length;\n    const viewsCache: ViewRef[] = [];\n    for(let i=0; i<length; i++) {\n      viewsCache.push(\n        this.containersMap[previousContainer].detach(0));\n    }\n    \n    viewsCache.forEach(view=>{\n      this.containersMap[nextContainer].insert(\n        view,\n        this.containersMap[nextContainer].length);\n    });\n  }\n\n  detachViews(container: string) {\n    const detachedViews = [];\n    const length = this.containersMap[container].length;\n\n    for(let x = 0; x < length; x++) {\n      detachedViews.push(this.containersMap[container].detach(x));\n    }\n\n    return detachedViews;\n  }\n\n  reattachViews(container:string, views: ViewRef[]) {\n    views.forEach(view=>\n      this.containersMap[container].insert(view));\n  }\n\n  reattachView(container: string, view: ViewRef) {\n\n  }\n\n  \n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { BBContentConductorConstructorToken } from '../content-conductor-constructor/content-conductor-constructor.token';\nimport { BBDefaultContentConductorService } from './default-content-conductor.service';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n})\nexport class BBDefaultContentConductorModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDefaultContentConductorModule,\n      providers: [\n        { \n          provide: BBContentConductorConstructorToken, \n          useValue: BBDefaultContentConductorService  \n        }\n      ]\n    };\n  }\n}\n","import { Component, OnInit, ContentChildren, QueryList, ViewContainerRef, TemplateRef, ViewChildren } from '@angular/core';\nimport { BBContentDirective } from './content/content.directive';\nimport { BBContentConductorService } from './content-conductor.service';\nimport { BBContentContainerDirective } from './content-container/content-container.directive';\nimport { BBContentConductor } from './content-conductor.model';\nimport { BBContentContainer } from './content-container/content-container.model';\n\n@Component({\n  selector: '[bb-content-conductor]',\n  template: `<div>\n  <h4>One</h4>\n  <!--\n  <ng-container bb-content-container='one' *ngTemplateOutlet=\"contents.toArray()\"></ng-container>\n  -->\n  <div >\n    <div bb-content-container=\"one\"></div>\n  </div>\n\n  <!--\n  <ng-container *ngIf=\"cont === 'one'\">\n    <ng-container *ngFor=\"let template of contents.toArray()\">\n      <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    </ng-container>\n  </ng-container>\n  -->\n  \n</div>\n<div>\n  <h4>Two</h4>\n\n  <div >\n    <div bb-content-container=\"two\"></div>\n  </div>\n\n  <!--\n  <ng-container *ngIf=\"cont === 'two'\">\n    <ng-container *ngFor=\"let template of contents.toArray()\">\n      <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    </ng-container>\n  </ng-container>\n  -->\n</div>\n<button (click)=\"onToggle()\">Toggle</button>`,\n  styles: [``]\n})\nexport class BBContentConductorComponent implements OnInit {\n  @ContentChildren(BBContentDirective,{ read: TemplateRef, descendants: true }) \n  contents: QueryList<TemplateRef<any>>;\n\n  @ViewChildren(BBContentContainerDirective) // BBContentContainerDirective) \n  containers: QueryList<BBContentContainerDirective>;\n\n  cont: 'one' | 'two' = 'one';\n\n  conductor: BBContentConductor<BBContentContainer>;\n\n  constructor(\n    private ccService: BBContentConductorService,\n    private vcRef: ViewContainerRef) { }\n\n  ngOnInit() {\n  }\n\n  onToggle() {\n    const oldCont = this.cont;\n    if(this.cont === 'one') { \n      this.cont = 'two'; \n    } \n    else if(this.cont === 'two') { \n      this.cont = 'one'; \n    }\n    this.conductor.moveViews(oldCont,this.cont);\n  }\n\n  ngAfterContentInit() {\n\n  }\n\n  ngAfterViewInit() {\n    this.conductor = this.ccService\n      .createContentConductor(this.containers, this.contents);\n\n    this.conductor.init(this.cont);\n  }\n\n  ngAfterViewChecked() {\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBContentConductorService } from './content-conductor.service';\nimport { BBContentDirective } from './content/content.directive';\nimport { BBContentConductorComponent } from './content-conductor.component';\nimport { BBContentContainerDirective } from './content-container/content-container.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    BBContentDirective, \n    BBContentConductorComponent, \n    BBContentContainerDirective, \n  ],\n  exports: [\n    BBContentDirective, \n    BBContentConductorComponent, \n    BBContentContainerDirective\n  ]\n})\nexport class BBContentConductorModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBContentConductorModule,\n      providers: [BBContentConductorService]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DragAndDropService {\n  el: any;\n  dropzoneIndex: number;\n  droppableIndex: number;\n  model: Array<any>;\n  dropzones: Array<string> = [];\n\n  constructor() { }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { DragAndDropService } from './drag-and-drop.service';\n\n@Directive({\n  selector: '[bbDropper]'\n})\nexport class DropperDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public dndService: DragAndDropService\n  ) {\n      el.nativeElement.draggable = true;\n      el.nativeElement.dragstart = this.dragstart;\n      el.nativeElement.dragend = this.dragend;\n  }\n\n  ngOnInit() {\n      if (this.bbdropperClass) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropperClass);\n      }\n  }\n\n  @Input('bbdropper') name: string;\n  @Input('bbdropperClass') bbdropperClass: string;\n  @Input('bbholdingClass') bbholdingClass: string;\n  @Input('bbpayload') bbpayload:string;\n  @Input('bbdropperId') bbdropperId: string;\n  @Output() bbstart = new EventEmitter();\n  @Output() bbend = new EventEmitter();\n\n  @HostListener('dragstart', ['$event']) dragstart(event:any) {\n      if (this.bbholdingClass !== undefined) {\n          this.renderer.addClass(this.el.nativeElement, this.bbholdingClass);\n      }\n      event.dataTransfer.setData('text/plain', this.bbpayload || null);\n      this.dndService.el = this.el;\n      if(this.bbdropperId) {\n          this.bbstart.emit(this.bbdropperId);\n      }\n  }\n\n  @HostListener('dragend') dragend() {\n      if (this.bbholdingClass !== undefined) {\n          this.renderer.removeClass(this.el.nativeElement, this.bbholdingClass);\n      }\n      if(this.bbdropperId) {\n          this.bbstart.emit(this.bbdropperId);\n      }\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, HostListener, EventEmitter } from '@angular/core';\nimport { DragAndDropService } from './drag-and-drop.service';\n\n@Directive({\n  selector: '[bbDropZone]'\n})\nexport class DropZoneDirective {\n  constructor(\n    public el: ElementRef,\n    public dndService: DragAndDropService,\n    public renderer: Renderer2\n  ) { }\n\n  ngOnInit() {\n      if (this.bbdropzoneClass !== undefined) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (!this.dndService.dropzones.includes(this.name)) {\n          this.dndService.dropzones.push(this.name);\n      }\n  }\n\n  @Input('bbdropzone') name: string;\n\n  @Input('bbdropzoneClass') bbdropzoneClass: string;\n  @Input('bbdropzoneHoverClass') bbdropzoneHoverClass: string;\n  @Input('bbdropzoneId') bbdropzoneId: string;\n  @Output() bbdata = new EventEmitter();\n  @Output() bbenter = new EventEmitter();\n  @Output() bbleave = new EventEmitter();\n  @Output() bbdrop = new EventEmitter();\n\n  @HostListener('dragover', ['$event']) dragover(event) {\n      event.preventDefault();\n  }\n\n  @HostListener('dragenter') dragenter() {\n      if (this.bbdropzoneHoverClass) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (this.bbdropzoneId) {\n          this.bbenter.emit(this.bbdropzoneId);\n      }\n  }\n\n  @HostListener('dragleave') dragleave() {\n      if (this.bbdropzoneHoverClass) {\n          this.renderer.removeClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (this.bbdropzoneId) {\n          this.bbleave.emit(this.bbdropzoneId);\n      }\n  }\n\n  @HostListener('drop', ['$event']) drop(event) {\n      event.preventDefault();\n      this.renderer.removeClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n\n      let dropped = this.dndService.el.nativeElement;\n      if (dropped.attributes.bbdropper.value === this.name) {\n          this.renderer.removeChild(this.dndService.el.nativeElement.parentNode, this.dndService.el.nativeElement);\n          this.renderer.appendChild(this.el.nativeElement, this.dndService.el.nativeElement);\n          if (dropped.attributes.bbpayload) {\n              this.bbdata.emit(dropped.attributes.bbpayload.value);\n          }\n      }\n      if (this.bbdropzoneId) {\n          this.bbdrop.emit(this.bbdropzoneId);\n      }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DragAndDropService } from './drag-and-drop.service';\nimport { DropperDirective } from './dropper.directive';\nimport { DropZoneDirective } from './drop-zone.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    DropperDirective,\n    DropZoneDirective,\n  ],\n  exports: [\n    DropperDirective,\n    DropZoneDirective,\n  ]\n})\nexport class BBDragAndDropModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDragAndDropModule,\n      providers: [DragAndDropService]\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class BBDragAndDropService {\n\n  constructor() { }\n\n}\n","import { \n  Directive, \n  OnInit, \n  ElementRef, \n  ViewRef, \n  ViewContainerRef, \n  TemplateRef, \n  EmbeddedViewRef, \n  OnDestroy,\n  EventEmitter,\n  Output} from '@angular/core';\nimport { Observable ,  Subscription ,  fromEvent } from 'rxjs';\nimport { bbDnDType } from '../dnd.const';\nimport { closeSubscription } from '../../common';\nimport { BBDragAndDropService } from '../drag-and-drop.service';\nimport { BBVector, BBDragStartEvent } from '../dnd.models';\n\n/**\n * BB Draggable Structural Directive\n */\n@Directive({\n  selector: '[bbDraggable]'\n})\nexport class BBDraggableDirective implements OnInit, OnDestroy {\n  @Output() dragStartedOnView = new EventEmitter<BBDragStartEvent>();\n  @Output() dragEndedOnView = new EventEmitter<ViewRef>();\n  \n  /**\n   * \n   */\n  public get isBeingDragged() {\n    return this._isBeingDragged;\n  }\n\n  /**\n   * \n   */\n  public get draggableTemplateRef() {\n    return this.templateRef;\n  }\n\n  /**\n   * \n   */\n  private draggableViewRef: ViewRef;\n\n  /**\n   * \n   */\n  private embeddedTemplateRef: EmbeddedViewRef<any>;\n\n  /**\n   * \n   */\n  private dragStartSubscription: Subscription;\n\n  /**\n   * \n   */\n  private dragEndSubscription: Subscription;\n\n  /**\n   * \n   */\n  private set isDragged(dragged: boolean) {\n    this._isBeingDragged = dragged;\n\n    if(this._isBeingDragged) {\n      //this.dragStartedOnView.next(this.draggableViewRef);\n      //this.viewContainer.detach();\n    } else {\n      //this.dragEndedOnView.next(this.draggableViewRef);\n      //this.viewContainer.insert(this.draggedViewRef);\n    }\n  }\n\n  /**\n   * \n   */\n  private _isBeingDragged = false;\n\n  /**\n   * \n   */\n  private context = new DraggableContext();\n\n  /**\n   * \n   * @param dndService \n   * @param templateRef \n   */\n  constructor(\n    private dndService: BBDragAndDropService,    \n    private templateRef: TemplateRef<any>\n  ) {\n  }\n\n  /**\n   * \n   */\n  ngOnInit() {\n    /*\n    this.embeddedTemplateRef = \n      this.viewContainer.createEmbeddedView(this.templateRef);\n    this.registerDragAndDropEvents(this.embeddedTemplateRef.rootNodes[0]);\n    this.draggedViewRef = this.viewContainer.get(0);\n    */\n  }\n\n  /**\n   * \n   */\n  ngOnDestroy() {\n    closeSubscription(this.dragStartSubscription);\n    closeSubscription(this.dragEndSubscription);\n  }\n\n  /**\n   * \n   * @param target \n   */\n  registerDragAndDropEvents(view: EmbeddedViewRef<any>) {\n    this.draggableViewRef = view;\n    let target = view.rootNodes[0] as HTMLElement;\n\n    target.setAttribute(\"draggable\",\"true\");\n\n    this.dragStartSubscription = \n      fromEvent<DragEvent>(target,\"dragstart\")\n        .subscribe((event: DragEvent)=>{\n          event.dataTransfer.setData(bbDnDType,'bbdraggable');\n          //event.dataTransfer.effectAllowed = \"move\";\n          //event.dataTransfer.setDragImage(\n          //  target.cloneNode(true) as HTMLElement,0,0);\n\n          let rect = event.srcElement.getBoundingClientRect();\n          let y = rect.top + (rect.height / 2);\n          let x = rect.left + (rect.width / 2);\n          console.log(x,y);\n\n          let e: BBDragStartEvent = {\n            view: this.draggableViewRef,\n            mouseOffset: {\n              offsetX: event.clientX - x,\n              offsetY: event.clientY - y\n            }\n          }\n\n          /*\n          let center = document.createElement(\"div\") as HTMLDivElement;\n          center.style.position = 'absolute';\n          center.style.left = `${mouseOffset.offsetX}px`;\n          center.style.top = `${mouseOffset.offsetY}px`;\n          center.style.borderRadius= \"20px\"\n          center.style.height = \"20px\";\n          center.style.width= \"20px\";\n          \n          let i = new Image();\n          \n          let clone = event.srcElement.cloneNode(true) as HTMLLIElement;\n          clone.appendChild(center);\n          i.appendChild(clone);\n          console.log(i);\n          event.dataTransfer.setDragImage(\n             i,event.pageX, event.pageY);\n          */\n\n          /*\n          event.dataTransfer.setDragImage(\n            event.srcElement,event.clientX, event.clientY);\n          */\n\n          /* Chrome calls dragend if the dom is changed during  */\n          /* drag start so in order to not call dragend         */\n          /* immediately we have to fire the dom manipulations  */\n          /* outside of the event                               */\n          setTimeout(()=>{\n            this.dragStartedOnView.next(e)\n          });\n        },\n        err=>console.log(err),\n        ()=>{});\n\n    this.dragEndSubscription = \n    fromEvent(target,\"dragend\")\n        .subscribe((event: DragEvent)=>{\n          //this.isDragged = false;\n          this.dragEndedOnView.next(this.draggableViewRef);\n        },\n        err=>console.log(err),\n        ()=>{});\n  }\n\n\n}\n\nexport class DraggableContext {\n  public implicit$: any = null;\n}\n","export const bbDnDType = \"bb/dnd\";","import { \n  Directive, \n  OnInit, \n  QueryList, \n  AfterContentInit, \n  ContentChildren,  \n  ElementRef,\n  ViewContainerRef,\n  Component,\n  ViewChild,\n  TemplateRef,\n  EmbeddedViewRef,\n  ViewRef,\n  OnDestroy} from '@angular/core';\nimport { BBDraggableDirective } from '../draggable/draggable.directive';\nimport { Observable ,  Subscription ,  fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { bbDnDType } from '../dnd.const';\nimport { BBDragAndDropService } from '../drag-and-drop.service';\nimport { BBDragStartEvent, BBVector } from '../dnd.models';\n\n@Component({\n  selector: '[bbDnDContainer]',\n  template: `<ng-container #dndContainer></ng-container>\r\n\r\n<ng-content></ng-content>\r\n`,\n  styles: [``]\n})\nexport class BBDragAndDropContainerComponent implements OnInit, AfterContentInit, OnDestroy {\n  @ContentChildren(BBDraggableDirective) draggablesQL: QueryList<BBDraggableDirective>;\n  @ViewChild(\"dndContainer\", {read: ViewContainerRef}) dndContainer: ViewContainerRef;\n  \n  private draggingMouseOffset: BBVector;\n  private dragStartEvent: BBDragStartEvent;\n  private draggableEmbeddedViews: EmbeddedViewRef<any>[] = [];\n  private dragSubscriptions: Subscription[] = [];\n\n  private readonly DefaultDragLocationTarget: DragLocationTarget = {\n    lowIndex: -1, \n    highIndex: -1,\n    viewBeingDragged: null\n  };\n\n  private dragLocation : DragLocationTarget = this.DefaultDragLocationTarget;\n  \n  constructor(\n    private dndService: BBDragAndDropService,\n    private hostElementRef: ElementRef    \n  ) {\n    console.warn('BB Drag and Drop is still under development.')\n  }\n\n  ngOnInit() {\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragenter\")\n      .subscribe(this.onDragEnter));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragover\")\n      .pipe(\n        debounceTime(50))\n      .subscribe(this.onDragOver));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragover\")\n      .subscribe((e:Event)=>\n        e.preventDefault()));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"drop\")\n      .subscribe(this.onDrop));\n  }\n\n  ngAfterContentInit() {\n    this.dragSubscriptions.push(\n    this.draggablesQL\n      .changes\n      .subscribe((draggables:BBDraggableDirective[])=>{\n      }));\n    console.log(\"container\");\n    console.log(this.dndContainer);\n    this.draggablesQL.map(this.initDraggable);\n  }\n\n  ngOnDestroy() {\n    this.dragSubscriptions.forEach(sub=>{\n      if(!sub.closed) {\n        sub.unsubscribe();\n      }\n    })\n  }\n\n  /**\n   * \n   * @param draggable \n   * @param index \n   */\n  initDraggable = (draggable: BBDraggableDirective, index: number) => {\n    let embeddedViewRef = \n      this.dndContainer.createEmbeddedView(draggable.draggableTemplateRef)\n    this.draggableEmbeddedViews.push(embeddedViewRef);\n    draggable.registerDragAndDropEvents(embeddedViewRef);\n    this.dragSubscriptions.push(\n      draggable.dragStartedOnView.subscribe(this.onDragStart));\n    this.dragSubscriptions.push(\n      draggable.dragEndedOnView.subscribe(this.onDragEnd));\n  }\n\n  /**\n   * \n   * @param event \n   */\n  onDragStart = (event: BBDragStartEvent) => {\n    this.dragStartEvent = event;\n    this.draggingMouseOffset = event.mouseOffset;\n    let viewIndex = this.dndContainer.indexOf(event.view);\n    this.dndContainer.detach(viewIndex);\n    this.draggableEmbeddedViews.splice(viewIndex,1);\n  }\n\n  /**\n   * \n   * @param view \n   */\n  onDragEnd = (view: EmbeddedViewRef<any>) => {\n    //this.dndContainer.insert(view);\n    return;\n  }\n\n  onDragEnter = (event:DragEvent) => {\n    console.log(\"dragenter\");\n    event.dataTransfer.dropEffect = \"move\";\n    event.preventDefault();\n  }\n\n  onDragOver = (event:DragEvent) => {\n    console.log(\"dragover\");\n    // console.log(event.dataTransfer.types);\n    let shortestDistance = Number.MAX_SAFE_INTEGER;\n    let closestView: EmbeddedViewRef<any> = null;\n    let closestIndex = 0; \n    let nextClosestIndex = 0;\n\n    this.draggableEmbeddedViews\n      /*\n       * TODO: Long term optimization maybe use the item\n       * filtered out's index as the starting location\n       * for further hit tests since we know that it\n       * is the one being dragged.  Ie.  If Index 4 is\n       * filtered out then start hit tests at index 3 \n       * and 5 instead of starting hit tests at index \n       * 0 and checking all items.\n       */\n      .filter(view=>view!==this.dragStartEvent.view)\n      .map(view=>{\n        let element = (view.rootNodes[0] as HTMLElement);\n        let rect = element.getBoundingClientRect();\n        return {\n          view: view,\n          x: rect.left + (rect.width / 2),\n          y: rect.top + (rect.height / 2)\n        }})\n      .forEach((centerCoordinates, i) =>{\n        let dy = this.calculate1DimensionDistance(\n          centerCoordinates.y,\n          event.clientY + this.dragStartEvent.mouseOffset.offsetY);\n\n        console.log(`${i} = ${dy} y's: ${centerCoordinates.y} - ${event.clientY} + ${this.dragStartEvent.mouseOffset.offsetY}`)\n          \n        let distance = Math.abs(dy);\n\n        if(distance < shortestDistance) {\n          shortestDistance = distance;\n          closestView = centerCoordinates.view;\n          closestIndex = i;\n\n          // determine which side of the closest draggable\n          // the draggable being dragged is on and set the\n          // next closest accordingly\n          nextClosestIndex = (dy < 0)? closestIndex + 1: closestIndex - 1;\n\n          this.dragLocation = {\n            lowIndex: Math.min(closestIndex,nextClosestIndex),\n            highIndex: Math.max(closestIndex,nextClosestIndex),\n            viewBeingDragged: this.dragStartEvent.view\n          };\n        }\n      });\n\n    event.preventDefault();\n\n    /* this signifies that the container is a valid drop target  */\n    /* TODO: doesn't work at the moment? the BBDnDType is never */\n    /* properly attached to the event even though I am setting   */\n    /* the type inside the draggable directive event...          */\n    /*\n    if(event.dataTransfer.types.includes(bbDnDType)) {\n      console.log('bb transfer detected');\n    }\n    */\n  }\n\n  onDrop = (event:DragEvent) => {\n    this.dndContainer.insert(\n      this.dragLocation.viewBeingDragged,\n      this.dragLocation.highIndex);\n\n    this.draggableEmbeddedViews.splice(\n      this.dragLocation.highIndex,\n      0,\n      this.dragLocation.viewBeingDragged as EmbeddedViewRef<any>);\n  }\n\n  /**\n   * \n   * @param p1 \n   * @param p2 \n   */\n  private calculate1DimensionDistance(p1: number, p2: number) {\n    return p1 - p2;\n  }\n\n  /**\n   * \n   * @param x1 \n   * @param x2 \n   * @param y1 \n   * @param y2 \n   */\n  private calculate2DimensionDistance(x1: number,x2: number,y1: number,y2: number) {\n    return Math.sqrt(\n      this.calculate1DimensionDistance(x1,x2)**2 + \n      this.calculate1DimensionDistance(y1,y2)**2);\n  }\n\n    \n  \n}\n\nexport interface DragLocationTarget {\n  lowIndex: number;\n  highIndex: number;\n  viewBeingDragged: ViewRef;\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBDragAndDropContainerComponent } from './drag-and-drop-container/drag-and-drop-container.component';\nimport { BBDraggableDirective } from './draggable/draggable.directive';\nimport { BBDragAndDropService } from './drag-and-drop.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    BBDragAndDropContainerComponent,\n    BBDraggableDirective\n  ],\n  exports: [\n    BBDragAndDropContainerComponent,\n    BBDraggableDirective\n  ],\n  providers: [BBDragAndDropService]\n})\nexport class BBDragAndDropComponentModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDragAndDropComponentModule,\n      providers: []\n    };\n  }\n }\n","import { \r\n  Component, \r\n  Input,\r\n  Output,\r\n  Inject,\r\n  forwardRef,\r\n  EventEmitter,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  InjectionToken,\r\n  HostListener,\r\n  HostBinding,\r\n  ViewChild  \r\n      } from '@angular/core';\r\n\r\nimport { Observable ,  Subscription ,  BehaviorSubject ,  fromEvent } from 'rxjs';\r\nimport { debounceTime ,  map ,  distinctUntilChanged } from 'rxjs/operators';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\nimport { BBDropdownInputItemsList } from './item-list/dropdown-input-item-list.component';\r\nimport { BBDynamicComponentDirective } from '../dynamic-component/dynamic-component.directive';\r\nimport { DropdownInputService } from './service/dropdown-input-service.interface';\r\nimport { DropdownInputItemChosenEvent, DropdownInputItemsMouseEvent } from './events/dropdown-input-item-events.interface';\r\n\r\nexport const BBDropdownInputServiceToken = new InjectionToken<DropdownInputService>('DdIService');\r\n\r\n@Component({\r\n  selector: 'div[bb-dropdown-input]',\r\n  template: `<div class=\"dropdown-anchor\">\r\n  <input #dropdownInput\r\n\t\t (keydown)=\"onKeyDown($event)\"\r\n\t\t [attr.placeholder]=\"placeholderText\"/>\r\n  \t<div bb-sliding-panel\r\n\t     class=\"results\" \r\n\t\t slideDirection=\"down\"\r\n\t\t #panel=\"bbSlidingPanel\">\r\n\t\t <ul bb-dropdown-input-items-list\r\n\t\t \t#dropdownList\r\n\t\t    [dynamicComponentsData]=\"diServ.items$ | async\"\r\n\t\t\t(listItemMouseOver)=\"onListItemMouseOver($event)\"\r\n\t\t\t(listItemClick)=\"onListItemClicked($event)\"\r\n\t\t\t(newContainers)=\"onNewItemContainers($event)\">\r\n\t\t </ul>\r\n  \t</div>\t\r\n</div>\r\n`,\r\n  styles: [`div.dropdown-anchor{position:relative}.dropdown-anchor>div.bb-sliding-panel{position:absolute}.dropdown-anchor>.bb-sliding-panel ul.bb-dropdown-input-items-list{display:flex;flex:1;flex-direction:column;padding-left:0;list-style:none}`],\r\n  host: {\r\n    '(focusout)':\"onHostFocusOut($event)\",\r\n    '(focusin)':\"onHostFocusIn($event)\",\r\n  },\r\n  exportAs:'bbDropdownInput',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BBDropdownInput {\r\n  @HostBinding('class.bb-dropdown-input') applyHostClass = true;\r\n\r\n  /**\r\n   * Set maximum number of items for the service.\r\n   */\r\n  @Input() maxItems: number;\r\n\r\n  /**\r\n   * Toggles whether the displayText should be set into the input\r\n   * box when an item is 'chosen'.  Defaults to true. \r\n   */\r\n  @Input() setTextOnChoice = true;\r\n\r\n  /**\r\n   * Set the place holder text on the input element.\r\n   */\r\n  @Input() placeholderText = '';\r\n\r\n  /**\r\n   * Sets how long, in ms, the delay is \r\n   * between updates to the DropdownInputService\r\n   * when the value of the input element\r\n   * has been changed.\r\n   * \r\n   * Defaults to 400ms.\r\n   */\r\n  @Input() public inputValueChangeDelayms = 400;\r\n\r\n  /**\r\n   * The auto selection mode determine which item will be selected if the\r\n   * choose item method is executed when no item has been specifically\r\n   * selected by user interaction.\r\n   * \r\n   * 'none'    - nothing is chosen without user interaction\r\n   *  \r\n   * 'lazy'    - the first item in the list is chosen\r\n   *  \r\n   * 'exact'   - if any item's displayText matches the input exactly,\r\n   *             ignoring case, the first match is chosen\r\n   * \r\n   * 'only'    - if there is only a single item in the list it is chosen\r\n   * \r\n   * 'partial' - math the first item in the list that, ignoring case, \r\n   *             exactly matches the current value\r\n   */\r\n  @Input() autoSelectionMode: 'none' | 'lazy' | 'exact' | 'only' | 'partial' = 'none'; \r\n\r\n  /**\r\n   * The index of the auto selection mode selection made.\r\n   */\r\n  private autoSelectedIndex = -1;\r\n\r\n  private selectedIndex = -1;\r\n\r\n  /**\r\n   * Emit the data for the list item selected either through \r\n   * a mouse click or hitting enter when it is in the selected \r\n   * state.\r\n   */\r\n  @Output() listItemChosen = new EventEmitter<DropdownInputItemChosenEvent>();\r\n\r\n  /**\r\n   * Return true if the service has returned\r\n   * at least 1 item to the component.\r\n   */\r\n  public get hasItems() {\r\n      return this.numItems > 0;\r\n  }\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  @ViewChild('dropdownInput', {read: ElementRef}) inputElementRef: ElementRef;\r\n  @ViewChild('panel', {read: ElementRef}) panelElementRef: ElementRef;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n  @ViewChild('dropdownList') list: BBDropdownInputItemsList;\r\n\r\n  public get inputElement() {\r\n    return (this.inputElementRef.nativeElement as HTMLInputElement);\r\n  }\r\n\r\n  // determine the location of clicks\r\n  // to determine if the dropdown should\r\n  // show or not.\r\n  private outsideClick = new EventEmitter();\r\n  private insideClick = new EventEmitter();\r\n\r\n  private clickedInside = new BehaviorSubject(false);\r\n\r\n  /* user interaction state tracking */\r\n  private wasInsideClicked = false;\r\n  private wasFocused = false;\r\n\r\n  // for tracking the state of the panel\r\n  private inputSub: Subscription;\r\n\r\n  private itemsSub: Subscription;\r\n  private numItems: number = 0;\r\n\r\n  /*\r\n   * Internal list of the dynamic components' containers.\r\n   */\r\n  private dynamicContainers: BBDynamicComponentDirective[];\r\n\r\n  public diServ: DropdownInputService;\r\n\r\n  constructor(\r\n    @Inject(forwardRef(()=>BBDropdownInputServiceToken)) private _diServ: DropdownInputService,\r\n    private ele: ElementRef,\r\n    private chDetRef: ChangeDetectorRef) {\r\n      this.diServ = _diServ;\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if(this.maxItems) {\r\n      this.diServ.setMaxItems(this.maxItems);\r\n    }\r\n\r\n    /*\r\n     * Track the value changes of the input element\r\n     * without bringing in angular forms to keep\r\n     * the requirements for bb as low as possible.\r\n     */\r\n    this.inputSub = \r\n      fromEvent(this.inputElement, 'keyup')\r\n        .pipe(\r\n          map((event:KeyboardEvent)=>(event.target as HTMLInputElement).value),\r\n          debounceTime(this.inputValueChangeDelayms),\r\n          distinctUntilChanged())\r\n        .subscribe(\r\n            newText=>{\r\n              this.diServ.setSearchText(newText);\r\n            },\r\n        err=>console.log(err),\r\n        ()=>{/*done*/});\r\n\r\n    this.itemsSub = this.diServ.items$\r\n      .pipe(\r\n        map(items=> items? items.length:-1))\r\n      .subscribe(\r\n        num=> {\r\n          this.numItems = num;\r\n\r\n          if(this.hasItems){\r\n            this.panel.show();\r\n          }\r\n          else {\r\n            this.panel.hide();\r\n          }\r\n          this.chDetRef.markForCheck();\r\n          this.chDetRef.detectChanges();\r\n        },\r\n        err=>console.log(err),\r\n        ()=>{/*done*/});\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.inputSub.unsubscribe();\r\n    this.itemsSub.unsubscribe();\r\n    this.diServ.clearItems();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selection criteria and\r\n   * perform a new auto selection.\r\n   */\r\n   onNewItemContainers(\r\n    containers: BBDynamicComponentDirective[]) {\r\n      this.clearAutoSelection();\r\n      this.clearSelection();\r\n      this.dynamicContainers = containers;\r\n      if(this.dynamicContainers && this.dynamicContainers.length > 0){\r\n        this.autoSelectItem();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Choose either the currently selected item or\r\n   * the auto chosen item and emit it.\r\n   */\r\n  private chooseCurrentItem() {\r\n      let currentItem: DropdownInputItemChosenEvent;\r\n      if (this.selectedIndex >= 0) {\r\n            currentItem = this.getCurrentItem(this.selectedIndex);\r\n      }\r\n      else {\r\n          if (this.autoSelectedIndex >= 0) {\r\n            currentItem = this.getCurrentItem(this.autoSelectedIndex);\r\n          }\r\n      }\r\n\r\n      if(currentItem){\r\n        if (this.setTextOnChoice) {\r\n          this.inputElement.value = currentItem.matchText;\r\n        }\r\n\r\n        this.listItemChosen.emit(currentItem);\r\n        this.clearSelection();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Return a data structure of the dynamic component\r\n   * described by the index value.\r\n   */\r\n  private getCurrentItem(index: number): DropdownInputItemChosenEvent {\r\n    return {\r\n      component: this.dynamicContainers[index].currentCompRef.instance,\r\n      index: index,\r\n      matchText: this.list.dynamicComponentsData[index].matchText,\r\n    }\r\n  }\r\n\r\n  /* Soft Selection Handling */\r\n  private autoSelectItem() {\r\n    let index = -1;\r\n    switch (this.autoSelectionMode) {\r\n        case 'none': {\r\n            // do nothing\r\n            break;\r\n        }\r\n        case 'lazy': {\r\n            if (this.dynamicContainers) {\r\n                index = 0;\r\n            }\r\n            break;\r\n        }\r\n        case 'exact': {\r\n          if (this.dynamicContainers) {\r\n            let containerIndex = -1;\r\n\r\n            this.list.dynamicComponentsData.find(\r\n            (cnt,i) => {\r\n              if (cnt.matchText.toLowerCase() === \r\n                this.inputElement.value.toLowerCase()) {\r\n                containerIndex = i;\r\n                return true;\r\n              }\r\n            });\r\n            if (containerIndex >= 0) {\r\n                index = containerIndex;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 'partial': {\r\n          if (this.dynamicContainers) {\r\n            let containerIndex = -1;\r\n\r\n            this.list.dynamicComponentsData.find(\r\n            (cnt,i) => {\r\n              if (cnt.matchText.toLowerCase()\r\n                  .substr(0,\r\n                    this.inputElement.value.length) === \r\n                  this.inputElement.value.toLowerCase()) {\r\n                containerIndex = i;\r\n                return true;\r\n              }\r\n            });\r\n            if (containerIndex >= 0) {\r\n                index = containerIndex;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 'only': {\r\n            if (this.dynamicContainers && this.dynamicContainers.length === 1) {\r\n                index = 0;\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (index != this.autoSelectedIndex) {\r\n      this.clearAutoSelection();\r\n\r\n      if (index >= 0) {\r\n        this.list.changeAutoSelection(index, true);\r\n      }\r\n      this.autoSelectedIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear current auto selection\r\n   */\r\n  private clearAutoSelection() {\r\n    if (this.autoSelectedIndex >= 0) {\r\n      this.list.changeAutoSelection(this.autoSelectedIndex, false);\r\n      this.autoSelectedIndex = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select previous, wrapping\r\n   */\r\n  private selectPreviousListItem(e: KeyboardEvent) {\r\n    this.getNextSelection(-1);\r\n    \r\n  }\r\n\r\n  /**\r\n   * Select next, wrapping\r\n   */\r\n  private selectNextListItem(e: KeyboardEvent) {\r\n    this.getNextSelection(1);\r\n  }\r\n\r\n  /**\r\n   * Get the next selection based on the indexChange\r\n   * and wrapping around the array of items.\r\n   */\r\n  private getNextSelection(indexChange:number) {\r\n    if (this.dynamicContainers && this.dynamicContainers.length > 0) {\r\n        this.list.changeSelection(this.selectedIndex, false);\r\n\r\n        // move selection index\r\n        this.selectedIndex += indexChange;\r\n\r\n        // wrap the selection\r\n        if (this.selectedIndex < 0) {\r\n            this.selectedIndex = this.dynamicContainers.length - 1;\r\n        }\r\n        else if (this.selectedIndex >= this.dynamicContainers.length) {\r\n            this.selectedIndex = 0;\r\n        }\r\n\r\n        // set the selection\r\n        this.list.changeSelection(this.selectedIndex, true);\r\n\r\n        // the container element is considered to be the angular binding comment, so we have to go up 1 level to the li element\r\n        const listElement = this.list.listElements[this.selectedIndex];\r\n        const containerElement = (this.panelElementRef.nativeElement as HTMLDivElement);\r\n\r\n        // check if item is in view\r\n        const inViewData = this.elementOffsetFromView(listElement, containerElement);\r\n        if (!inViewData.inView) {\r\n            containerElement.scrollTop += inViewData.scrollBy;\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * clear current selection\r\n   */\r\n  private clearSelection() {\r\n    if (this.selectedIndex >= 0) {\r\n      this.list.changeSelection(this.selectedIndex, false);\r\n      this.selectedIndex = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if an element is within the view of the container element\r\n   * and if it isn't also determine the vertical offset from being in view\r\n   * it is at.\r\n   * @param listElement the element to determine if it is in view\r\n   * @param container the viewing container of the element\r\n   */\r\n  private elementOffsetFromView(listElement: HTMLElement, container: HTMLElement) {\r\n      const listRec = listElement.getBoundingClientRect();\r\n      const contRec = container.getBoundingClientRect();\r\n      const topViz = listRec.top >= contRec.top;\r\n      const botViz = listRec.bottom <= contRec.bottom;\r\n\r\n      const inViewData = {\r\n          inView: topViz && botViz,\r\n          scrollBy: 0 \r\n      }\r\n\r\n      if (!botViz) {\r\n          inViewData.scrollBy = listRec.bottom - contRec.bottom;\r\n      }\r\n      else if (!topViz) {\r\n          inViewData.scrollBy = -(contRec.top - listRec.top);\r\n      }\r\n      \r\n      return inViewData;\r\n  }\r\n\r\n\r\n  /* Event Handlers */\r\n\r\n  /**\r\n   * Read for extra control keys pressed, up and down arrows and enter,\r\n   * and take the appropriate action based on them.\r\n   * Up Arrow - select the previous item on the list, or the last item if none has been selected yet\r\n   * Down Arrow - select the next item on the list, or the first if none has been selected \r\n   * Enter - 'choose' the currently selected item\r\n   * @param e\r\n   */\r\n   onKeyDown(e: KeyboardEvent) {\r\n      switch (e.keyCode) {\r\n          case EventKeys.UPARROW:\r\n              this.clearAutoSelection();\r\n              this.selectPreviousListItem(e);\r\n              e.preventDefault();\r\n              break;\r\n          case EventKeys.DOWNARROW:\r\n              this.clearAutoSelection();\r\n              this.selectNextListItem(e);\r\n              e.preventDefault();\r\n              break;\r\n          case EventKeys.ENTER:\r\n              this.chooseCurrentItem();\r\n              e.preventDefault();\r\n              break;\r\n          default:\r\n              // do nothing\r\n              break;\r\n      }\r\n  }\r\n\r\n\r\n  @HostListener('document:click',['$event']) \r\n  onOutsideClick(e: MouseEvent) {\r\n    if(!this.wasInsideClicked) {\r\n      this.wasFocused = false;\r\n      setTimeout(_=>{\r\n        if(!this.wasFocused){\r\n          this.panel.hide();\r\n          this.chDetRef.markForCheck();\r\n          this.chDetRef.detectChanges();\r\n        }},150);\r\n    }\r\n    this.wasInsideClicked = false;\r\n  }\r\n\r\n  @HostListener('click',['$event']) \r\n  onInsideClick(e: MouseEvent) {\r\n    this.wasInsideClicked = true;\r\n    this.wasFocused = true;\r\n  }\r\n\r\n  onHostFocusIn(e: FocusEvent) {\r\n    if(this.hasItems){\r\n      this.panel.show();\r\n      this.chDetRef.markForCheck();\r\n      this.chDetRef.detectChanges();\r\n    }\r\n    this.wasFocused = true;\r\n  }\r\n\r\n  onHostFocusOut(e: FocusEvent){\r\n    this.wasFocused = false;\r\n    setTimeout(_=>{\r\n      if(!this.wasFocused){\r\n        this.panel.hide();\r\n        this.chDetRef.markForCheck();\r\n      }},150);\r\n  }\r\n\r\n  onListItemMouseOver(e: DropdownInputItemsMouseEvent) {\r\n    this.clearAutoSelection();\r\n    this.clearSelection();\r\n    this.selectedIndex = e.index;\r\n    this.list.changeSelection(this.selectedIndex,true);\r\n  }\r\n\r\n  onListItemClicked(e: DropdownInputItemsMouseEvent) {\r\n    this.selectedIndex = e.index;\r\n    this.list.changeSelection(this.selectedIndex,true);\r\n    this.chooseCurrentItem();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Enumerate the desired key codes for key events\r\n */\r\nenum EventKeys {\r\n    ENTER = 13,\r\n    UPARROW = 38,\r\n    DOWNARROW = 40,\r\n};\r\n","import { Directive, Input } from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Directive({\r\n  selector: '[bb-sliding-panel-focus]',\r\n  host: {\r\n    '(focus)':\"onFocus($event)\",\r\n    '(blur)':\"onBlur($event)\"\r\n  }\r\n})\r\nexport class BBDropdownInputDirective {\r\n  @Input('bb-sliding-panel-focus') panel: BBSlidingPanel;\r\n  @Input() canShow: boolean = false;\r\n\r\n  constructor() { }\r\n\r\n  onFocus(e: FocusEvent) {\r\n    if(this.canShow) {\r\n      console.log('showing');\r\n      this.panel.show();\r\n    }\r\n  }\r\n\r\n  onBlur(e: FocusEvent) {\r\n    this.panel.hide();\r\n  }\r\n\r\n\r\n}\r\n","import {\r\n    Directive,  \r\n    Component,\r\n    ComponentFactoryResolver,\r\n    ComponentRef,\r\n    ChangeDetectionStrategy,\r\n    Input,\r\n    ReflectiveInjector,\r\n    ViewChild,\r\n    ViewContainerRef } from '@angular/core';\r\nimport { DynamicComponentData } from './dynamic-component-data.interface';\r\n\r\n/**\r\n */\r\n@Directive({\r\n  selector: '[bb-dynamic-component]',\r\n  exportAs:'dynamicComp',\r\n})\r\nexport class BBDynamicComponentDirective {\r\n    public currentCompRef: ComponentRef<any>;\r\n\r\n    public dccClasses: any = {};\r\n\r\n    @Input('bb-dynamic-component') public set componentData(compData: DynamicComponentData) {\r\n      this.createComponent(compData);\r\n    }\r\n\r\n    constructor(protected vcRef: ViewContainerRef,\r\n                protected resolver: ComponentFactoryResolver) {\r\n    }\r\n\r\n    protected createComponent(compData: DynamicComponentData) {\r\n      if (!compData) {\r\n        return;\r\n      }\r\n\r\n      if (this.currentCompRef) {\r\n        this.currentCompRef.destroy();\r\n      }\r\n\r\n      let inputProviders: any[] = []\r\n\r\n      if (compData.providers) {\r\n        inputProviders = Object.keys(compData.providers).map(\r\n          (provName: any) => {\r\n            return { provide: provName, useValue: compData.providers[provName] };\r\n          });\r\n      }\r\n\r\n      let injector =\r\n        ReflectiveInjector\r\n          .fromResolvedProviders(\r\n            ReflectiveInjector.resolve(inputProviders),\r\n            this.vcRef.parentInjector);\r\n      \r\n      let compRef: ComponentRef<any> =\r\n        this.resolver\r\n          .resolveComponentFactory(compData.component)\r\n          .create(injector);\r\n\r\n      this.vcRef.insert(compRef.hostView);\r\n\r\n      if (compData.inputs) {\r\n        Object.keys(compData.inputs).map(\r\n          input => {\r\n            compRef.instance[input] = compData.inputs[input];\r\n          }\r\n        )\r\n      }\r\n\r\n      compRef.changeDetectorRef.markForCheck();\r\n      this.currentCompRef = compRef;\r\n    }\r\n\r\n \r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBDynamicComponentDirective } from './dynamic-component.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [BBDynamicComponentDirective],\n  exports: [BBDynamicComponentDirective]\n})\nexport class BBDynamicComponentModule { }\n","import {\r\n    Component,\r\n    ComponentRef,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    ComponentFactoryResolver,\r\n    ReflectiveInjector,\r\n    ViewContainerRef,\r\n    ViewChildren,\r\n    QueryList,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    HostBinding,\r\n} from '@angular/core';\r\nimport { Observable ,  Subscription } from 'rxjs';\r\nimport { DropdownItemComponentData } from '../service/dropdown-input-service.interface';\r\nimport { BBDynamicComponentDirective } from '../../dynamic-component/dynamic-component.directive';\r\nimport { DropdownInputItemsMouseEvent } from '../events/dropdown-input-item-events.interface';\r\n\r\n@Component({\r\n    selector:'ul[bb-dropdown-input-items-list]',\r\n    template: `<li *ngFor=\"let compData of dynamicComponentsData; let i = index;\"\r\n    #listItem\r\n    class=\"item\"\r\n    [class.auto-selected]=\"itemAutoSelected[i]\"\r\n    [class.selected]=\"itemSelected[i]\"\r\n    (click)=\"onListItemClick($event, i)\"\r\n    (mouseover)=\"onListItemMouseOver($event, i)\">\r\n    <ng-template #container=\"dynamicComp\" [bb-dynamic-component]=\"compData\"></ng-template>\r\n</li>\r\n\r\n\r\n`,\r\n    styles: [``],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BBDropdownInputItemsList {\r\n    @HostBinding('class.bb-dropdown-input-items-list') applyHostClass = true;\r\n\r\n    @Input() public dynamicComponentsData: DropdownItemComponentData[] = [];\r\n\r\n    public dynamicComponentClasses: any[];\r\n\r\n    @ViewChildren('container') \r\n        public dynamicComponentContainers: QueryList<BBDynamicComponentDirective>;\r\n\r\n    @ViewChildren('listItem',{read:ViewContainerRef})\r\n        public listItems: QueryList<ViewContainerRef>;\r\n\r\n    public get listElements() {\r\n        return this.listItems.toArray().map(li=>{\r\n            return (li.element.nativeElement as HTMLLIElement);\r\n        });\r\n    }\r\n\r\n    @Output() public newContainers = new EventEmitter<BBDynamicComponentDirective[]>();\r\n\r\n    @Output() public listItemMouseOver = new EventEmitter<DropdownInputItemsMouseEvent>();\r\n\r\n    @Output() public listItemClick = new EventEmitter<DropdownInputItemsMouseEvent>();\r\n\r\n    private newContainersSub: Subscription;\r\n\r\n    itemAutoSelected: boolean[] = [];\r\n    itemSelected: boolean[] = [];\r\n\r\n    constructor(private chDetRef: ChangeDetectorRef) {\r\n    }\r\n\r\n    public changeSelection(index:number, selected: boolean) {\r\n        this.itemSelected[index]=selected;\r\n        this.chDetRef.markForCheck();\r\n        this.chDetRef.detectChanges();\r\n    }\r\n\r\n    public changeAutoSelection(index: number, selected: boolean) {\r\n        this.itemAutoSelected[index]=selected;\r\n        this.chDetRef.markForCheck();\r\n        this.chDetRef.detectChanges();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // emit the original list\r\n        this.newContainers.emit(this.dynamicComponentContainers.toArray());\r\n        \r\n        if (this.newContainersSub) {\r\n            this.newContainersSub.unsubscribe();\r\n        }\r\n\r\n        this.newContainersSub =\r\n            this.dynamicComponentContainers\r\n                .changes\r\n                .subscribe(\r\n                    newList => {\r\n                        this.itemAutoSelected = [];\r\n                        this.itemSelected = [];\r\n                        this.newContainers.emit(newList.toArray());\r\n                    },\r\n                    (error: string) => console.log(error),\r\n                    () => {\r\n                        this.newContainersSub.unsubscribe()\r\n                    });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.newContainersSub) {\r\n            this.newContainersSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onListItemClick(\r\n        e: MouseEvent, \r\n        index: number){\r\n        this.listItemClick.emit({\r\n            event: e,\r\n            index: index\r\n        });\r\n    }\r\n\r\n    onListItemMouseOver(\r\n        e: MouseEvent, \r\n        index: number) {\r\n        this.listItemMouseOver.emit({\r\n            event: e,\r\n            index: index\r\n        });\r\n    }\r\n}\r\n\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBDropdownInput } from './dropdown-input.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\nimport { BBDropdownInputDirective } from './dropdown-input.directive';\r\nimport { BBDynamicComponentModule } from '../dynamic-component/dynamic-component.module';\r\nimport { BBDropdownInputItemsList } from './item-list/dropdown-input-item-list.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n    BBDynamicComponentModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBDropdownInput,\r\n    BBDropdownInputDirective, \r\n    BBDropdownInputItemsList,\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBDropdownInput,\r\n  ]\r\n})\r\nexport class BBDropdownInputModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBDropdownInputModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Renderer,\r\n  ViewChild,\r\n  ElementRef,\r\n  ContentChildren,\r\n  HostBinding } from '@angular/core';\r\nimport {BBMenuItem} from '../common/menu-item.directive';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-dropdown-menu]',\r\n  template: `<div [bb-sliding-panel-toggle]=\"panel\" \r\n     [toggleOnClick]=\"toggleOnClick\"\r\n     [showOnHover]=\"showOnHover\"\r\n     [closeOnClickOutside]=\"closeOnClickOutside\">\r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n</div>\r\n<div class=\"dropdown-container\">\r\n  <div bb-sliding-panel \r\n    #panel=\"bbSlidingPanel\"\r\n    slideDirection=\"down\">\r\n    <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.dropdown-container{position:relative}/deep/ .dropdown-container>div.bb-sliding-panel{position:absolute;top:0}.dropdown-container div.bb-sliding-panel{display:flex;flex:1;flex-direction:column}`],\r\n  exportAs:'bbDropdownMenu'\r\n})\r\nexport class BBDropdownMenu {\r\n  @HostBinding('class.bb-dropdown-menu') applyHostClass = true;\r\n\r\n  @Input() public showOnHover = false;\r\n  @Input() public toggleOnClick = true;\r\n  @Input() public closeOnClickOutside = true;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  constructor() { }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBDropdownMenu } from './dropdown-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule\r\n  ],\r\n  \r\n  declarations: [\r\n    BBDropdownMenu\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBDropdownMenu\r\n  ]\r\n})\r\nexport class BBDropdownMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBDropdownMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","import { BBDynamicAnimationsHandler } from '../dynamic-animations-handler/dynamic-animations-handler.model';\nimport { BBAnimationTransitions } from '../animation-transitions/animation-transitions.model';\nimport { BBStateCSSMap } from '../state-css-map/state-css-map.model';\nimport { BBStateCSSMapper } from '../state-css-mapper/state-css-mapper.model';\nimport { BBAnimationStateMachine } from '../animation-state-machine/animation-state-machine.model';\nimport { BBAnimationStatesService } from '../animation-states/animation-states.service';\nimport { BBStateCssMapperService } from '../state-css-mapper/state-css-mapper.service';\n\nexport class BBDefaultDynamicAnimationsHandlerService implements BBDynamicAnimationsHandler {\n\n  constructor( \n    private element: any,\n    private cssMapperService: BBStateCssMapperService,\n    private animationStatesBuilder: BBAnimationStatesService\n) {}\n\n  private animationsStateMachine: BBAnimationStateMachine;\n  private cssMapper: BBStateCSSMapper;\n  private stateCache: string = '';\n  private mapCache: BBStateCSSMap = {};\n  private transitionsCache: BBAnimationTransitions = {};\n\n  setCSSMap(map: BBStateCSSMap) {\n    if(this.mapCache !== map) {\n      this.mapCache = map;\n\n      if(this.cssMapper) {\n        this.cssMapper.removeAll();\n        this.cssMapper.destroy();\n      }\n\n      this.cssMapper = this.cssMapperService\n        .createStateCSSMapper(this.element,this.mapCache);\n    }\n  }\n\n  nextState(toState:string) {\n    if(this.stateCache !== toState) {\n      this.stateCache = toState;\n\n      if(this.animationsStateMachine) {\n        this.animationsStateMachine.next(\n          this.stateCache, \n          this.cssMapper);\n      }\n    }\n  }\n\n  setTransitions(transitions: BBAnimationTransitions) {\n    if(this.transitionsCache !== transitions) {\n      this.transitionsCache = transitions;\n\n      if(this.animationsStateMachine) {\n\n        if(this.cssMapper) {\n          this.cssMapper.removeAll();\n        }\n\n        this.animationsStateMachine.destroy();\n      }    \n\n      this.animationsStateMachine = \n        this.animationStatesBuilder\n          .createAnimationStateMachine(\n            this.element,\n            this.transitionsCache);\n    }\n  }\n\n  init() {  \n    console.log('init: ',\n      this.cssMapperService,\n      this.animationStatesBuilder\n    );\n\n\n    if(this.animationsStateMachine) {\n      this.animationsStateMachine.init(\n        this.stateCache,\n        this.cssMapper);\n    }\n  }\n\n  destroy() {\n    this.animationsStateMachine.destroy();\n    this.cssMapper.destroy();\n    this.stateCache = null;\n    this.mapCache = null;\n    this.transitionsCache = null;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBDynamicAnimationsService } from './dynamic-animations.service';\nimport { BBStateCssMapperService } from './state-css-mapper/state-css-mapper.service';\nimport { BBAnimationStatesService } from './animation-states/animation-states.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: []\n})\nexport class BBDynamicAnimationsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDynamicAnimationsModule,\n      providers: [\n        BBDynamicAnimationsService,\n        BBAnimationStatesService, \n        BBStateCssMapperService\n      ]\n    };\n  }  \n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBDynamicAnimationsHandlerConstructorToken } from '../dynamic-animations-handler/dynamic-animations-handler.token';\nimport { BBDefaultDynamicAnimationsHandlerService } from './default-dynamic-animations-handler.service';\nimport { BBDynamicAnimationsModule } from '../dynamic-animations.module';\n\n@NgModule({\n  imports: [\n    //CommonModule,\n    BBDynamicAnimationsModule.forRoot(),\n  ],\n  declarations: []\n})\nexport class BBDefaultDynamicAnimationsHandlerModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDefaultDynamicAnimationsHandlerModule,\n      providers: [\n        { \n          provide: BBDynamicAnimationsHandlerConstructorToken, \n          useValue: BBDefaultDynamicAnimationsHandlerService \n        }\n      ]\n    };\n  }  \n\n }\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[bb-menu-item-right]',\r\n})\r\nexport class  BBMenuItemRight {\r\n    constructor() { }\r\n}","import { \r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  HostBinding,\r\n  OnInit,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  NgZone,\r\n } from '@angular/core';\r\n\r\nimport { \r\n  BBSlidingPanel, \r\n  BBSlidingPanelToggle } from '../sliding-panel';\r\n\r\nimport {BBMenuItem} from '../common/menu-item.directive';\r\nimport {BBMenuItemRight} from './menu-item-right.directive';\r\nimport { Observable ,  fromEvent ,  of ,  Subscription } from 'rxjs';\r\nimport { merge ,  map ,  distinctUntilChanged } from 'rxjs/operators';\r\n\r\n/**\r\n * A hamburger menu is either a div or nav element\r\n * that has arbitrary items as it's content with the\r\n * bb-menu-item or bb-menu-item-right directives.\r\n * \r\n * It takes a standard css media query as an input,\r\n * expandOnQuery, and when that query returns true \r\n * the menu will display the items inside it's borders.\r\n * \r\n * If the query is false the menu will be rendered in \r\n * the collapsed state where a toggle will be right \r\n * justified and when clicked will show and hide the\r\n * menu item contents in a panel that drops down.\r\n * \r\n * The toggle itself is set by adding the bb-menu-toggle\r\n * directive to content inside the menu element that \r\n * should act as the toggle.\r\n * \r\n * The hamburger menu component is exported as BBHamburgerMenu\r\n * and provides the state of the panel with isOpen and the \r\n * state of the menu itself as expanded.  These can be used \r\n * to modify the menu content itself based on the current\r\n * state of the menu.\r\n */\r\n@Component({\r\n  selector: 'div[bb-hamburger-menu], nav[bb-hamburger-menu]',\r\n  template: `<div class=\"menu-container\">\r\n  <ng-content select=\"[bb-fixed-content]\"></ng-content>\r\n\r\n  <div bb-sliding-panel\r\n      class=\"menu-items-container\"\r\n      slideDirection=\"down\"\r\n      #panel=\"bbSlidingPanel\">\r\n    <div class=\"menu-items\">\r\n      <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n    </div>\r\n    <div class=\"menu-items-right\">\r\n      <ng-content select=\"[bb-menu-item-right]\"></ng-content>\r\n    </div>\r\n  </div>\r\n  \r\n  <div [bb-sliding-panel-toggle]=\"panel\"\r\n       #toggle=\"bbSlidingPanelToggle\" \r\n       [toggleOnClick]=\"toggleOnClick\"\r\n       [showOnHover]=\"showOnHover\"\r\n       [showOnInit]=\"expanded\"\r\n       [closeOnClickOutside]=\"closeOnClickOutside\">\r\n      <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.menu-container{display:flex;flex:1;flex-direction:row;align-items:center;position:relative;min-height:inherit;max-height:inherit;height:inherit}:host.bb-hamburger-menu.expanded div.menu-items-container{display:flex;flex-direction:row;flex:1;justify-content:space-between}:host.bb-hamburger-menu.expanded div.menu-items,:host.bb-hamburger-menu.expanded div.menu-items-right{display:flex;flex-direction:row;flex-grow:1;flex-shrink:1;flex-basis:auto}:host.bb-hamburger-menu.expanded div.menu-items-right{justify-content:flex-end}:host.bb-hamburger-menu.collapsed div.menu-items-container{display:flex;flex-direction:column;flex:1}:host.bb-hamburger-menu.collapsed div.menu-items,:host.bb-hamburger-menu.collapsed div.menu-items-right{display:flex;flex-direction:column;flex-grow:1;flex-shrink:1;flex-basis:auto}:host.bb-hamburger-menu.expanded div.bb-sliding-panel-toggle{visibility:hidden;width:0}div.bb-sliding-panel-toggle{display:inline-block}:host.collapsed div.menu-items-container{position:absolute;top:100%;left:0;right:0}:host.collapsed div.menu-container{justify-content:space-between}div.menu-items{flex-grow:1;flex-shrink:1;flex-basis:auto}`],\r\n  host: {\r\n    '[class.expanded]': \"expanded\",\r\n    '[class.collapsed]': \"!expanded\",\r\n  },\r\n  exportAs:'bbHamburgerMenu'\r\n})\r\nexport class BBHamburgerMenu implements OnInit, OnDestroy, AfterViewInit {\r\n  @HostBinding('class.bb-hamburger-menu') applyHostClass = true;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n  @ViewChild('toggle') toggle: BBSlidingPanelToggle;\r\n\r\n  @ContentChildren(BBMenuItem, { read:ElementRef, descendants:true }) \r\n  items: QueryList<ElementRef>;\r\n  @ContentChildren(BBMenuItemRight, {read:ElementRef, descendants:true}) \r\n  rightItems: QueryList<ElementRef>;\r\n\r\n  /**\r\n   * Get the items currently being displayed\r\n   * in the hamburger menu.\r\n   */\r\n  public get itemElementRefs(): ElementRef[] {\r\n    return this.items.toArray().concat(this.rightItems.toArray());\r\n  }\r\n\r\n  /**\r\n   * Return if the panel is open or not.\r\n   */\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  /**\r\n   * A css media query as a string that\r\n   * will determine when the hamburger menu\r\n   * should expand the items onto the menu \r\n   * bar and remove the dropdown toggle\r\n   */\r\n  @Input() expandOnQuery: string;\r\n         \r\n  /**\r\n   * Show the menu if the toggle is hovered\r\n   * over.  Defaults to false.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Close the menu if a click happens outside\r\n   * it.  Defaults to true.\r\n   */\r\n  @Input() closeOnClickOutside = true;\r\n\r\n  /**\r\n   * Allow the toggle to work on the\r\n   * click event.\r\n   */\r\n  readonly toggleOnClick = true;\r\n\r\n  /**\r\n   * Cache for the closeOnClickOutside\r\n   * input.\r\n   */\r\n  private _cocoInit = false;\r\n\r\n  /**\r\n   * Use a flag member for the expanded \r\n   * state because host bindings can't \r\n   * use the async pipe so we have to \r\n   * cache the media query results.\r\n   */\r\n  public expanded = false;;\r\n\r\n  /**\r\n   * Track the subscription to the window\r\n   * resize event and media query result\r\n   * stream.\r\n   */\r\n  private expandedSubscription: Subscription;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    /*\r\n     * Save the close on click outside\r\n     * state.  This will be toggled so\r\n     * that the panel doesnt enter the\r\n     * closed state when the menu bar \r\n     * is in the expanded state.\r\n     * \r\n     * Otherwise the panel collapses and\r\n     * the items disappear with no toggle\r\n     * to bring them back.\r\n     */\r\n    this._cocoInit = this.closeOnClickOutside;\r\n    \r\n    /*\r\n     * Determine the initial expansion state\r\n     * based on the media query.\r\n     */\r\n    this.expanded = window.matchMedia(this.expandOnQuery).matches;\r\n\r\n    if(this.expanded) {  \r\n      this.closeOnClickOutside = false;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    /*\r\n     * Set up the stream\r\n     */\r\n    this.expandedSubscription = \r\n      fromEvent(window,\"resize\")\r\n      .pipe(\r\n        map(_=>window.matchMedia(this.expandOnQuery).matches),\r\n        distinctUntilChanged())\r\n      .subscribe(expanded=>{\r\n          this.expanded = expanded;\r\n          this.togglePanelState();\r\n      });  \r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if(this.expandedSubscription && !this.expandedSubscription.closed) {\r\n      this.expandedSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the state of the panel \r\n   * to showing or hiding based\r\n   * on the cached expanded member\r\n   */\r\n  private togglePanelState() {\r\n    if(this.expanded) {  \r\n      this.closeOnClickOutside = false;\r\n      this.toggle.showPanel();\r\n    }\r\n    else {\r\n      this.closeOnClickOutside = this._cocoInit;\r\n      this.toggle.hidePanel();\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\nimport { BBHamburgerMenu } from './hamburger-menu.component';\r\nimport { BBMenuItemRight } from './menu-item-right.directive';\r\nimport {BBCommonModule} from '../common/common.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n    BBCommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBHamburgerMenu,\r\n    BBMenuItemRight,\r\n  ],\r\n  \r\n  exports: [\r\n    BBHamburgerMenu,\r\n    BBMenuItemRight,\r\n  ]\r\n})\r\nexport class BBHamburgerMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBHamburgerMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { \r\n    Component, \r\n    OnInit, \r\n    Input, \r\n    Output,\r\n    EventEmitter,\r\n    ViewChild, \r\n    ElementRef } from '@angular/core';\r\nimport { Observable ,  fromEvent } from 'rxjs';\r\nimport { map ,  debounceTime ,  distinctUntilChanged } from 'rxjs/operators';\r\nimport { BBMultiSelectItem } from './multi-select-item.interface';\r\n\r\n@Component({\r\n    selector: 'div[bb-multi-select]',\r\n    template: `<input class=\"selections-filter\" #filter [attr.placeholder]=\"placeholderText\"/>\r\n<div class=\"container-labels\">\r\n    <span>Items</span><span>Selected</span>\r\n</div>\r\n<div class=\"selections-container\">\r\n    <div class=\"choices\">\r\n        <ul>\r\n            <li *ngFor=\"let choice of choices\">\r\n                <a (click)=\"onChoiceClicked(choice)\">{{choice.text}}</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"selections\">\r\n        <ul>\r\n            <li *ngFor=\"let selection of selections\">\r\n                <a (click)=\"onSelectionClicked(selection)\">{{selection.text}}</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>`,\r\n    styles: [`:host div{display:flex;flex-direction:column}input.selections-filter{justify-content:center}div.container-labels,div.selections-container{width:inherit;display:flex;flex-direction:row;justify-content:space-between}.selections-container ul{padding-left:0}.choices ul,.selections ul{list-style:none}div.container-labels{border-bottom:1px solid #000}`],\r\n})\r\nexport class BBMultiSelectComponent implements OnInit {\r\n    @Input() placeholderText = \"Search...\";\r\n    @Input() filterChangeDelayms = 200;\r\n\r\n    @Input() selectionItems: BBMultiSelectItem[];\r\n\r\n    get choices(): BBMultiSelectItem[] {\r\n        return this.selectionItems.filter(item=>{ return !item.selected});\r\n    }\r\n\r\n    get selections(): BBMultiSelectItem[] {\r\n        return this.selectionItems.filter(item=>{ return item.selected});\r\n    }\r\n\r\n    @ViewChild('filter') filterInput: ElementRef;\r\n\r\n    @Output() itemSelected = new EventEmitter<BBMultiSelectItem>();\r\n    @Output() itemUnselected = new EventEmitter<BBMultiSelectItem>();\r\n\r\n    constructor() {\r\n        console.log('Warning this component is still under heavy development.');\r\n        console.log('It isn\\'t completely functional yet and is subject to change.');\r\n    }\r\n\r\n    ngOnInit() { \r\n        fromEvent(this.filterInput.nativeElement, 'keyup')\r\n        .pipe(\r\n            map((event:KeyboardEvent)=>(event.target as HTMLInputElement).value),\r\n            debounceTime(this.filterChangeDelayms),\r\n            distinctUntilChanged())\r\n        .subscribe(\r\n            filterText=> this.filterItems(filterText)\r\n        );\r\n\r\n        // temp testing code\r\n        if(!this.selectionItems) {\r\n            this.selectionItems = [\r\n                {\r\n                    text: 'Name',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Position',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Year of Birth',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Rookie Season',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Height',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Weight',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Forty Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Bench Weight',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Vertical Jump',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Broad Jump',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Shuttle Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Cone Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Draft Position',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'College',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'College Division',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Current Team',\r\n                    payload: {},\r\n                    selected: false,\r\n                }\r\n            ];\r\n        }\r\n\r\n        this.selections.push(this.choices[1]);\r\n    }\r\n\r\n    onChoiceClicked(item: BBMultiSelectItem) {\r\n        item.selected = true;\r\n        this.itemSelected.emit(item);\r\n    }\r\n\r\n    onSelectionClicked(item: BBMultiSelectItem) {\r\n        item.selected = false;\r\n        this.itemUnselected.emit(item);\r\n    }\r\n\r\n    filterItems(text: string) {\r\n        console.log(text);\r\n    }\r\n}\r\n\r\n\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBMultiSelectComponent } from './multi-select.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBMultiSelectComponent\r\n  ],\r\n  \r\n  exports: [\r\n    BBMultiSelectComponent\r\n  ]\r\n})\r\nexport class BBMultiSelectModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBMultiSelectModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import { Component, Input, HostBinding, ViewChild } from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-slideout-menu]',\r\n  template: `<div class=\"slide-container\">\r\n  <div [bb-sliding-panel-toggle]=\"panel\" \r\n    [toggleOnClick]=\"pinOnClick\"\r\n    [showOnHover]=\"showOnMouseOver\"\r\n    [closeOnClickOutside]=\"closeOnClickOutside\">\r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n  <div class=\"slide-position\">\r\n    <div class=\"slide-anchor\">\r\n      <div bb-sliding-panel \r\n        #panel=\"bbSlidingPanel\"\r\n        [slideDirection]=\"slideDirection\">\r\n          <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.slide-container{position:relative}.slide-container>div.slide-position{position:absolute;top:0}/deep/ .slide-left>div.slide-container{background-color:red}/deep/ .slide-left div.slide-position{left:0}/deep/ .slide-right div.slide-position{right:0}.slide-container>>div.slide-anchor{position:relative}/deep/ .slide-anchor>div.bb-sliding-panel{position:absolute;display:flex;flex-direction:row;flex:1}/deep/ .slide-left div.bb-sliding-panel{right:0}/deep/ .slide-right div.bb-sliding-panel{left:0}`],\r\n  host: {\r\n    '[class.slide-left]':\"slideLeft\",\r\n    '[class.slide-right]':\"!slideLeft\"\r\n  }\r\n})\r\nexport class BBSlideoutMenu {\r\n  @HostBinding('class.bb-slideout-menu') applyHostClass = true;\r\n\r\n  @Input() public showOnMouseOver = true;\r\n  @Input() public pinOnClick = true;\r\n  @Input() public closeOnClickOutside = true;\r\n  @Input() slideDirection: \"left\" | \"right\" = \"right\";\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  get slideLeft() {\r\n    return this.slideDirection === \"left\";\r\n  }\r\n\r\n  constructor() { }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBSlideoutMenu } from './slideout-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBSlideoutMenu\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBSlideoutMenu\r\n  ]\r\n})\r\nexport class BBSlideoutMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBSlideoutMenuModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[bbSortable]'\n})\nexport class SortableDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2\n  ) { }\n\n  @Input('bbsortable') name: string;\n  @Input('bboptions') options: any;\n\n  // Event emitters\n  @Output() orderChanged = new EventEmitter();\n  @Output() bbstart = new EventEmitter();\n  @Output() bbend = new EventEmitter();\n  @Output() bbenter = new EventEmitter();\n  @Output() bbleave = new EventEmitter();\n  @Output() bbdrop = new EventEmitter();\n\n  draggedItem:number;\n  dropTarget:any;\n\n  ngOnInit() {\n      if (!this.options) {\n          this.options = {};\n      }\n  }\n\n  ngAfterContentInit() {\n      this.initChildren();\n  }\n\n  // Dropper listeners\n  @HostListener('dragstart', ['$event']) dragstart(event) {\n      event.dataTransfer.setData('text/plain', event.target['bbvalue'] || null);\n      if (this.options.holdingClass !== undefined) {\n          this.renderer.addClass(event.target, this.options.holdingClass);\n      }\n\n      this.draggedItem = +event.target['bbsortable-index'];\n      this.bbstart.emit(this.draggedItem);\n  }\n\n  @HostListener('dragend', ['$event']) dragend(event) {\n      if (this.options.holdingClass !== undefined) {\n          this.renderer.removeClass(event.target, this.options.holdingClass);\n      }\n      this.bbend.emit(this.draggedItem);\n  }\n\n  // Dropzone listeners\n  @HostListener('dragover', ['$event']) dragover(event:any) {\n      event.preventDefault();\n  }\n\n  @HostListener('dragenter', ['$event']) dragenter(event:any) {\n      if (this.options.hoverClass !== undefined) {\n          if (event.target['bbsortable-name'] === this.name && event.target['bbsortable-index'] !== this.draggedItem) {\n              this.renderer.addClass(event.target, this.options.hoverClass);\n          } else {\n              this.updateDropzoneClass(event, this.options.hoverClass, true);\n          }\n      }\n      this.bbenter.emit(+event.target['bbsortable-index']);\n  }\n\n  @HostListener('dragleave', ['$event']) dragleave(event:any) {\n      if (this.options.hoverClass !== undefined) {\n          if (event.target['bbsortable-name'] === this.name && event.target['bbsortable-index'] !== this.draggedItem) {\n              this.renderer.removeClass(event.target, this.options.hoverClass);\n          } else {\n              this.updateDropzoneClass(event, this.options.hoverClass, false);\n          }\n      }\n      this.bbleave.emit(+event.target['bbsortable-index']);\n  }\n\n  @HostListener('drop', ['$event']) drop(event:any) {\n      event.preventDefault();\n\n      let doDrop:boolean = false;\n\n      let dropTarget:any = event.target;\n      if (dropTarget['bbsortable-name'] !== this.name) {\n          while (dropTarget.parentNode !== null) {\n              if (dropTarget.parentNode['bbsortable-name'] === this.name) {\n                  dropTarget = dropTarget.parentNode;\n                  doDrop = true;\n                  break;\n              } else {\n                  dropTarget = dropTarget.parentNode\n              }\n          }\n      } else {\n          doDrop = true;\n      }\n\n      if (doDrop) {\n          if (this.options.hoverClass !== undefined) {\n              this.renderer.removeClass(dropTarget, this.options.hoverClass);\n          }\n          let draggedItem = this.draggedItem;\n          let newPosition = dropTarget['bbsortable-index'];\n\n          if (draggedItem > newPosition) {\n              for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n                  if (i >= newPosition && i < draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i + 1);\n                  }\n\n                  if (i === draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', newPosition);\n                  }\n              }\n          } else {\n              for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n                  if (i > draggedItem && i <= newPosition) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i - 1);\n                  }\n\n                  if (i === draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', newPosition);\n                  }\n              }\n          }\n          this.bbdrop.emit(+newPosition);\n          this.orderChanged.emit({ draggedItem, newPosition });\n      }\n  }\n\n  initChildren() {\n      for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'draggable', true);\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i);\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-name', this.name);\n\n          if (this.options.restingClass) {\n              this.renderer.addClass(this.el.nativeElement.children[i], this.options.restingClass);\n          }\n      }\n  }\n\n  updateDropzoneClass(event:any, cssClass:string, adding:boolean) {\n      let parentNode = event.target.parentNode;\n      while (parentNode !== null) {\n          if (parentNode['bbsortable-name'] === this.name && parentNode['bbsortable-index'] !== this.draggedItem) {\n              if (adding && !parentNode.classList.contains(cssClass)) {\n                  this.renderer.addClass(parentNode, cssClass);\n              } else {\n                  this.renderer.removeClass(parentNode, cssClass);\n              }\n              break;\n          } else {\n              parentNode = parentNode.parentNode;\n          }\n      }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SortableDirective } from './sortable.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SortableDirective,\n  ],\n  exports: [\n    SortableDirective,\n  ]\n})\nexport class BBSortableModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBSortableModule,\n      providers: []\n    };\n  }\n }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TabService {\n  activeTab: string = '';\n  tabsets = {};\n\n  constructor() { }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { TabService } from './tab.service';\n\n@Directive({\n  selector: '[bbTab]'\n})\nexport class TabDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public tabService: TabService\n  ) { }\n\n  @Input('bbtab') tabName: string;\n  @Input('bbtabset') tabset: string;\n  @Input('bbactive') active: boolean;\n  @Input('bbactiveclass') activeClass: string;\n\n  @Output() bbshowstart = new EventEmitter();\n  @Output() bbshowend = new EventEmitter();\n\n  ngOnInit() {\n      if (this.active) {\n          this.bbshowstart.emit(this.tabName);\n          this.tabService.tabsets[this.tabset] = {};\n          this.setActive();\n      }\n  }\n\n  @HostListener('click', ['$event']) onClick(event) {\n      this.bbshowstart.emit(this.tabName);\n      event.preventDefault();\n      this.setActive();\n  }\n\n  setActive() {\n      let parentElement = this.el.nativeElement.parentNode;\n      let child = this.el.nativeElement.children[0];\n\n      let activeClassElement = 'none';\n      let activeClassTarget = 'none';\n\n      // Find out if this element, the parent element, or child elements have an active class set.\n      // Order of precedence: Parent, tab, child.\n      if (parentElement.hasAttribute('bbactiveclass')) {\n          activeClassElement = 'parent';\n          activeClassTarget = parentElement.attributes['bbtarget'].value;\n      }\n\n      if (this.activeClass) {\n          activeClassElement = 'tab';\n      }\n\n      if (child) {\n          if (child.hasAttribute('bbactiveclass')) {\n              activeClassElement = 'child';\n          }\n      }\n\n      // If the tab element itself has it set, apply it.\n      if (activeClassElement === 'tab') {\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  this.renderer.removeClass(parentElement.children[i], this.activeClass);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          this.renderer.addClass(this.el.nativeElement, this.activeClass);\n      } else if (activeClassElement === 'child') {\n          let childActiveClass = child.attributes.bbactiveclass.value;\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  this.renderer.removeClass(parentElement.children[i].children[0], childActiveClass);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          this.renderer.addClass(child, childActiveClass);\n\n      } else if (activeClassElement === 'parent') {\n          let parentActiveClass = parentElement.attributes.bbactiveclass.value;\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  if (activeClassTarget === 'tab') {\n                      this.renderer.removeClass(parentElement.children[i], parentActiveClass);\n                  } else if (activeClassTarget === 'child') {\n                      this.renderer.removeClass(parentElement.children[i].children[0], parentActiveClass);\n                  }\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          if (activeClassTarget === 'tab') {\n              this.renderer.addClass(this.el.nativeElement, parentActiveClass);\n          } else if (activeClassTarget === 'child') {\n              this.renderer.addClass(this.el.nativeElement.children[0], parentActiveClass);\n          }\n      } else {\n          // There are no child elements and bbactiveClass isn't set.\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n      }\n      this.tabService.tabsets[this.tabset]['activeTab'] = this.tabName;\n      this.bbshowend.emit(this.tabName);\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\nimport { TabService } from './tab.service';\n\n@Directive({\n  selector: '[bbTabContent]'\n})\nexport class TabContentDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public tabService: TabService\n  ) { }\n\n  @Input('bbtabcontent') name: string;\n  @Input('bbtabset') tabset: string;\n\n  ngOnInit() {\n      this.setVisibility();\n  }\n\n  ngDoCheck() {\n      this.setVisibility();\n  }\n\n  setVisibility() {\n      let display = this.tabService.tabsets[this.tabset].activeTab === this.name ? 'block' : 'none';\n      this.renderer.setStyle(this.el.nativeElement, 'display', display);\n}\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TabService } from './tab.service';\nimport { TabDirective } from './tab.directive';\nimport { TabContentDirective } from './tab-content.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  \n  declarations: [\n    TabDirective,\n    TabContentDirective\n  ],\n  \n  exports: [\n    TabDirective,\n    TabContentDirective\n  ]\n})\nexport class BBTabModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBTabModule,\n      providers: [TabService]\n    };\n  }\n }\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { BBSlidingPanelModule } from './sliding-panel';\r\nimport { BBDropdownMenuModule } from './dropdown-menu';\r\nimport { BBSlideoutMenuModule } from './slideout-menu';\r\nimport { BBDropdownInputModule } from './dropdown-input';\r\nimport { BBHamburgerMenuModule } from './hamburger-menu';\r\nimport { BBCollapsingMenuModule } from './collapsing-menu';\r\nimport { BBMultiSelectModule } from './multi-select';\r\nimport { BBCommonModule } from './common';\r\nimport { BBDragAndDropComponentModule } from './drag-and-drop-component';\r\nimport { BBTabModule } from './tab';\r\nimport { BBDragAndDropModule } from './drag-and-drop';\r\nimport { BBSortableModule } from './sortable';\r\n\r\nconst BB_MODULES = [\r\n    BBSlidingPanelModule,\r\n    BBDropdownMenuModule,\r\n    BBSlideoutMenuModule,\r\n    BBDropdownInputModule,\r\n    BBHamburgerMenuModule,\r\n    BBCollapsingMenuModule,\r\n    BBMultiSelectModule,\r\n    BBCommonModule,\r\n    BBDragAndDropComponentModule,\r\n    BBTabModule,\r\n    BBDragAndDropModule,\r\n    BBSortableModule,\r\n];\r\n\r\n/**\r\n * This module only exists to allow the demo \r\n * to import the entire library quickly.  It \r\n * should not be used by consumers of the \r\n * library and is not exported as part of \r\n * the distrbuted package.\r\n */\r\n@NgModule({\r\n  imports: [\r\n    BBSlidingPanelModule.forRoot(),\r\n    BBDropdownMenuModule.forRoot(),\r\n    BBSlideoutMenuModule.forRoot(),\r\n    BBDropdownInputModule.forRoot(),\r\n    BBHamburgerMenuModule.forRoot(),\r\n    BBCollapsingMenuModule.forRoot(),\r\n    BBMultiSelectModule.forRoot(),\r\n    BBCommonModule.forRoot(),\r\n    BBDragAndDropComponentModule.forRoot(),\r\n    BBTabModule.forRoot(),\r\n    BBDragAndDropModule.forRoot(),\r\n    BBSortableModule.forRoot(),\r\n    \r\n  ],\r\n  exports: BB_MODULES\r\n})\r\nexport class BBRootModule { }\r\n\r\n@NgModule({\r\n  imports: BB_MODULES,\r\n  exports: BB_MODULES,\r\n})\r\nexport class BearBonesModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {ngModule: BBRootModule, providers: []};\r\n  }\r\n}\r\n"]}