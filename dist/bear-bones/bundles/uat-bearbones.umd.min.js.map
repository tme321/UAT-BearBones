{"version":3,"sources":["ng://@uat/bearbones/lib/alternating-panel/alternating-panel.tokens.ts","ng://@uat/bearbones/lib/alternating-panel/alternating-panel.component.ts","ng://@uat/bearbones/lib/animation-states/state-css-mapper/state-css-mapper.service.ts","ng://@uat/bearbones/lib/animation-states/animation-states.service.ts","ng://@uat/bearbones/lib/alternating-panel/alternating-panel.directive.ts","ng://@uat/bearbones/lib/animation-states/animation-states.module.ts","ng://@uat/bearbones/lib/alternating-panel/alternating-panel.module.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.enums.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.animations.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.component.ts","ng://@uat/bearbones/lib/sliding-panel/toggle/sliding-panel-toggle.directive.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.module.ts","ng://@uat/bearbones/lib/dropdown-menu/dropdown-menu.component.ts","ng://@uat/bearbones/lib/dropdown-menu/dropdown-menu.module.ts","ng://@uat/bearbones/lib/slideout-menu/slideout-menu.component.ts","ng://@uat/bearbones/lib/slideout-menu/slideout-menu.module.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.component.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.directive.ts","ng://@uat/bearbones/lib/dynamic-component/dynamic-component.directive.ts","ng://@uat/bearbones/lib/dynamic-component/dynamic-component.module.ts","ng://@uat/bearbones/lib/dropdown-input/item-list/dropdown-input-item-list.component.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.module.ts","ng://@uat/bearbones/lib/common/menu-item.directive.ts","ng://@uat/bearbones/lib/hamburger-menu/menu-item-right.directive.ts","ng://@uat/bearbones/lib/hamburger-menu/hamburger-menu.component.ts","ng://@uat/bearbones/lib/common/common.module.ts","ng://@uat/bearbones/lib/hamburger-menu/hamburger-menu.module.ts","ng://@uat/bearbones/lib/collapsing-menu/collapsing-menu.component.ts","ng://@uat/bearbones/lib/collapsing-menu/collapsing-menu.module.ts","ng://@uat/bearbones/lib/multi-select/multi-select.component.ts","ng://@uat/bearbones/lib/multi-select/multi-select.module.ts","ng://@uat/bearbones/lib/common/close-subscription.ts","ng://@uat/bearbones/lib/drag-and-drop-component/dnd.const.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop.service.ts","ng://@uat/bearbones/lib/drag-and-drop-component/draggable/draggable.directive.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop-container/drag-and-drop-container.component.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop.module.ts","ng://@uat/bearbones/lib/tab/tab.service.ts","ng://@uat/bearbones/lib/tab/tab.directive.ts","ng://@uat/bearbones/lib/tab/tab-content.directive.ts","ng://@uat/bearbones/lib/tab/tab.module.ts","ng://@uat/bearbones/lib/drag-and-drop/drag-and-drop.service.ts","ng://@uat/bearbones/lib/drag-and-drop/dropper.directive.ts","ng://@uat/bearbones/lib/drag-and-drop/drop-zone.directive.ts","ng://@uat/bearbones/lib/drag-and-drop/drag-and-drop.module.ts","ng://@uat/bearbones/lib/sortable/sortable.directive.ts","ng://@uat/bearbones/lib/sortable/sortable.module.ts","ng://@uat/bearbones/lib/bear-bones.module.ts"],"names":["AltPanelState1Animation","InjectionToken","AltPanelState2Animation","BBAlternatingPanelComponent","elRef","renderer","aBuilder","state1Animation","state2Animation","this","prototype","state","panelStateCache","transitionToState1","transitionToState2","clearCSSStateClasses","addClass","nativeElement","css","state1","state2","ngOnInit","buildAnimations","console","log","JSON","stringify","panel","toggle","panelState","state1Player","build","create","state2Player","removeClass","reset","play","Component","args","selector","template","styles","animations","exportAs","ElementRef","Renderer2","AnimationBuilder","Inject","Input","BBStateCssMapperService","rendererFactory","getCSSClass","map","createStateCSSMapper","element","_this","createRenderer","remove","add","removeAll","Object","keys","forEach","entry","destroy","Injectable","RendererFactory2","BBAnimationStatesService","builder","cssMapper","mapper","buildPlayers","transitions","reduce","players","fromState","prev","toState","player","getPlayer","destroyAllPlayers","createAnimationStateMachine","currentPlayer","currentState","init","next","nextState","newPlayer","onStart","onAnimationStart","onDone","onAnimationDone","BBAlternatingPanelDirective","bbBuilder","cssMapperService","defineProperty","mapCache","stateCache","animationsStateMachine","transitionsCache","Directive","BBAnimationStatesModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","BBAlternatingPanelModule","exports","verticalSlideAnimations","trigger","SlideAnimationDirections","CLOSE","style","transform","SLIDE_DOWN","SLIDE_UP","transition","transform-origin","animate","horizontalSlideAnimations","SLIDE_RIGHT","SLIDE_LEFT","BBSlidingPanel","cdRef","SlideDirections","EventEmitter","horizontalState","verticalState","show","slideDirection","markForCheck","hide","isShowing","host","[@horizontalTrigger]","[@verticalTrigger]","[class.open]","[class.closed]","[class.pinned]","(mouseenter)","(mouseleave)","(mouseover)","(click)","[class.bb-sliding-panel]","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Output","BBSlidingPanelToggle","onNextState","hover","pin","nextStates","previousPinnedState","pinned","Error","showHideSubscription","closed","unsubscribe","documentClick$","fromEvent","document","toggleClick$","toggleMouseEnter$","toggleMouseLeave$","panelMouseEntered$","mouseEnterPanel","asObservable","panelMouseLeft$","mouseLeavePanel","panelClick$","clickPanel","leaveBoth$","pipe","merge","filter","_","showOnHover","enterEither$","toggleClicked$","event","stopPropagation","panelClicked$","documentClicked$","closeOnClickOutside","nextPinnedState$","of","showOnInit","isHovering$","debounceTime","combineLatest","states","subscribe","ngOnDestroy","[class.bb-sliding-panel-toggle]","BBSlidingPanelModule","BBDropdownMenu","HostBinding","ViewChild","BBDropdownMenuModule","BBSlideoutMenu","[class.slide-left]","[class.slide-right]","BBSlideoutMenuModule","BBDropdownInputServiceToken","BBDropdownInput","_diServ","ele","chDetRef","BehaviorSubject","diServ","numItems","inputElementRef","maxItems","setMaxItems","inputSub","inputElement","value","inputValueChangeDelayms","distinctUntilChanged","newText","setSearchText","err","itemsSub","items$","items","length","num","hasItems","detectChanges","clearItems","onNewItemContainers","containers","clearAutoSelection","clearSelection","dynamicContainers","autoSelectItem","chooseCurrentItem","currentItem","selectedIndex","getCurrentItem","autoSelectedIndex","setTextOnChoice","matchText","listItemChosen","emit","index","component","currentCompRef","instance","list","dynamicComponentsData","autoSelectionMode","containerIndex_1","find","cnt","i","toLowerCase","containerIndex_2","substr","changeAutoSelection","selectPreviousListItem","e","getNextSelection","selectNextListItem","indexChange","changeSelection","listElement","listElements","containerElement","panelElementRef","inViewData","elementOffsetFromView","inView","scrollTop","scrollBy","container","listRec","getBoundingClientRect","contRec","topViz","top","botViz","bottom","onKeyDown","keyCode","EventKeys","UPARROW","preventDefault","DOWNARROW","ENTER","onOutsideClick","wasInsideClicked","wasFocused","setTimeout","onInsideClick","onHostFocusIn","onHostFocusOut","onListItemMouseOver","onListItemClicked","(focusout)","(focusin)","forwardRef","read","HostListener","BBDropdownInputDirective","onFocus","canShow","onBlur","(focus)","(blur)","BBDynamicComponentDirective","vcRef","resolver","compData","createComponent","inputProviders","provName","provide","useValue","injector","ReflectiveInjector","fromResolvedProviders","resolve","parentInjector","compRef","resolveComponentFactory","insert","hostView","inputs","input","changeDetectorRef","ViewContainerRef","ComponentFactoryResolver","BBDynamicComponentModule","BBDropdownInputItemsList","listItems","toArray","li","selected","itemSelected","itemAutoSelected","ngAfterViewInit","newContainers","dynamicComponentContainers","newContainersSub","changes","newList","error","onListItemClick","listItemClick","listItemMouseOver","ViewChildren","BBDropdownInputModule","BBMenuItem","_viewContainer","BBMenuItemRight","BBHamburgerMenu","concat","rightItems","_cocoInit","expanded","window","matchMedia","expandOnQuery","matches","expandedSubscription","togglePanelState","showPanel","hidePanel","[class.expanded]","[class.collapsed]","ContentChildren","descendants","BBCommonModule","BBHamburgerMenuModule","BBCollapsingMenu","hostElementRef","zone","el","displayedItems","collapsedItems","calculateOverflow","projectNodes","displayedDiv","itemElements","areDisplayedItemsToWide","run","hasOverflow","menuCalcedRight","hostDiv","offsetLeft","offsetWidth","toggleDiv","firstOverflowIndex_1","Number","POSITIVE_INFINITY","collapsedDiv","width","onWindowResize","(window:resize)","Renderer","NgZone","BBCollapsingMenuModule","BBMultiSelectComponent","selectionItems","item","filterInput","filterChangeDelayms","filterText","filterItems","text","payload","selections","push","choices","onChoiceClicked","onSelectionClicked","itemUnselected","BBMultiSelectModule","closeSubscription","sub","BBDragAndDropService","BBDraggableDirective","dndService","templateRef","DraggableContext","_isBeingDragged","dragged","dragStartSubscription","dragEndSubscription","registerDragAndDropEvents","view","target","draggableViewRef","rootNodes","setAttribute","dataTransfer","setData","rect","srcElement","y","height","x","left","mouseOffset","offsetX","clientX","offsetY","clientY","dragStartedOnView","dragEndedOnView","TemplateRef","BBDragAndDropContainerComponent","lowIndex","highIndex","viewBeingDragged","DefaultDragLocationTarget","draggable","embeddedViewRef","dndContainer","createEmbeddedView","draggableTemplateRef","draggableEmbeddedViews","dragSubscriptions","onDragStart","onDragEnd","dragStartEvent","draggingMouseOffset","viewIndex","indexOf","detach","splice","dropEffect","shortestDistance","MAX_SAFE_INTEGER","closestIndex","nextClosestIndex","centerCoordinates","dy","calculate1DimensionDistance","distance","Math","abs","dragLocation","min","max","warn","onDragEnter","onDragOver","onDrop","ngAfterContentInit","draggablesQL","draggables","initDraggable","p1","p2","calculate2DimensionDistance","x1","x2","y1","y2","sqrt","pow","BBDragAndDropComponentModule","TabService","TabDirective","tabService","active","bbshowstart","tabName","tabsets","tabset","setActive","onClick","parentElement","parentNode","child","children","activeClassElement","activeClassTarget","hasAttribute","attributes","activeClass","setProperty","childActiveClass","bbactiveclass","parentActiveClass","bbshowend","TabContentDirective","setVisibility","ngDoCheck","display","activeTab","name","setStyle","BBTabModule","DragAndDropService","DropperDirective","dragstart","dragend","bbdropperClass","bbholdingClass","undefined","bbpayload","bbdropperId","bbstart","DropZoneDirective","bbdropzoneClass","bbdropzoneHoverClass","dropzones","includes","dragover","dragenter","bbdropzoneId","bbenter","dragleave","bbleave","drop","dropped","bbdropper","removeChild","appendChild","bbdata","bbdrop","BBDragAndDropModule","SortableDirective","options","initChildren","holdingClass","draggedItem","bbend","hoverClass","updateDropzoneClass","doDrop","dropTarget","newPosition","orderChanged","restingClass","cssClass","adding","classList","contains","BBSortableModule","BB_MODULES","BearBonesModule","BBRootModule"],"mappings":"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","sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\nimport { AnimationMetadata } from \"@angular/animations\";\r\n\r\n/**\r\n * Provides the animation to play when the panel transitions \r\n * from state 2 to state 1.\r\n */\r\nexport const AltPanelState1Animation = \r\n  new InjectionToken<AnimationMetadata|AnimationMetadata[]>('BB_ALT_PANEL_STATE_1_ANIMATION');\r\n\r\n  /**\r\n   * Provides the animation to play when the panel transitions \r\n   * from state 1 to state 2.\r\n   */\r\nexport const AltPanelState2Animation = \r\n  new InjectionToken<AnimationMetadata|AnimationMetadata[]>('BB_ALT_PANEL_STATE_2_ANIMATION');\r\n","import { Component, OnInit, Inject, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, AnimationMetadata, AnimationPlayer, AnimationEvent, animate, style } from '@angular/animations';\nimport { AlternatingPanelCSSClasses } from './alternating-panel.css-model';\nimport { AltPanelState1Animation, AltPanelState2Animation } from './alternating-panel.tokens';\n\n/**\n * \n */\n@Component({\n  selector: '[bb-alt-panel]',\n  template: `<ng-content></ng-content>`,\n  styles: [``],\n  animations: [],\n  exportAs: 'bbAltPanel',\n})\nexport class BBAlternatingPanelComponent implements OnInit {\n\n  /**\n   * Defintes the css classes the panel will use.\n   */\n  @Input() css: AlternatingPanelCSSClasses;\n\n  /**\n   * Save the animation to play when\n   * transitioning from state 2 to state 1.\n   */\n  private state1Player: AnimationPlayer;\n\n  /**\n   * Save the animation to play when\n   * transitioning from state 1 to state 2.\n   */\n  private state2Player: AnimationPlayer;\n\n  /**\n   * Store the current panel state for determining \n   * the next transition.\n   */\n  private panelStateCache  = 'init';\n\n  /**\n   * Determine the transition to make when\n   * the state changes.\n   * \n   * If the state is transitioned back to init\n   * or the transition is unrecognized then play \n   * no animation and remove either state\n   * css class that was applied. \n   */\n  private set panelState(state: 'init' | 'state1' | 'state2') {\n    if(state !== this.panelStateCache) {\n      if(this.panelStateCache !== 'init') {\n        if(this.panelStateCache === 'state2' && state === 'state1') {\n          this.transitionToState1();\n        }        \n        else if(this.panelStateCache === 'state1' && state === 'state2') {\n          this.transitionToState2();\n        } \n        else {\n          this.clearCSSStateClasses();\n        }\n        \n      }\n      else {\n        if(state === 'state1') {\n          this.renderer.addClass(this.elRef.nativeElement,this.css.state1);\n        }\n        else if(state === 'state2') {\n          this.renderer.addClass(this.elRef.nativeElement,this.css.state2);\n        }\n      }\n      this.panelStateCache = state;\n    }\n    \n  };\n\n  constructor(\n    private elRef: ElementRef,\n    private renderer: Renderer2,\n    private aBuilder: AnimationBuilder,\n    @Inject(AltPanelState1Animation)\n    private state1Animation: AnimationMetadata | AnimationMetadata[],\n    @Inject(AltPanelState2Animation)\n    private state2Animation: AnimationMetadata | AnimationMetadata[],\n  ) { }\n\n  ngOnInit() {\n    this.buildAnimations();\n\n    console.log(`css: ${JSON.stringify(this.css)}`);\n\n    console.log(`states: ${this.css.state1} & ${this.css.state2}`);\n\n    this.renderer.addClass(this.elRef.nativeElement,this.css.panel);\n\n    this.toggle('state1');\n  }\n\n  /**\n   * Transition the panel to the next state.  If no\n   * next state is passed in the order will be:\n   * \n   * init -> state1 -> state2 -> state1 -> state2...\n   * \n   * @param state The next state to transition to.\n   */\n  toggle(state?: string) {\n    console.log('toggling');\n    state = state || this.panelStateCache;\n    switch(state) {\n      case 'init': {\n        this.panelState = 'state1';\n        break;\n      }\n      case 'state1': {\n        this.panelState = 'state2';\n        break;\n      }\n      case 'state2': {\n        this.panelState = 'state1';\n        break;\n      }\n    }\n  }\n\n  /**\n   * Build the animations injected through the tokens \n   * to play when transitions happen.\n   */\n  private buildAnimations() {\n    this.state1Player = \n      this.aBuilder.build(this.state1Animation)\n        .create(this.elRef.nativeElement);\n\n    this.state2Player = \n      this.aBuilder.build(this.state2Animation)\n        .create(this.elRef.nativeElement);\n  }\n\n  /**\n   * Transition to state 1, removing the state 2 css class  \n   * if it exists, play the animation, and set the state 1 \n   * css class.\n   */\n  private transitionToState1() {\n    this.renderer.removeClass(this.elRef.nativeElement,this.css.state2);\n    this.renderer.addClass(this.elRef.nativeElement,this.css.state1);\n    if(this.state2Player) { this.state2Player.reset(); }\n    this.state1Player.play();\n  }\n\n  /**\n   * Transition to state 2, removing the state 1 css class  \n   * if it exists, play the animation, and set the state 2 \n   * css class.\n   */\n  private transitionToState2() {\n    this.renderer.removeClass(this.elRef.nativeElement,this.css.state1);\n    this.renderer.addClass(this.elRef.nativeElement,this.css.state2);\n    if(this.state1Player) { this.state1Player.reset(); }\n    this.state2Player.play();      \n  }\n\n  /**\n   * Clear both the state 1 and state 2 css classes if they exist.\n   */\n  private clearCSSStateClasses() {\n    this.renderer.removeClass(this.elRef.nativeElement,this.css.state1);\n    this.renderer.removeClass(this.elRef.nativeElement,this.css.state2);\n  }\n}\n","import { Injectable, RendererFactory2 } from '@angular/core';\nimport { BBStateCSSMap } from './state-css-mapper.model';\n\n@Injectable()\nexport class BBStateCssMapperService {\n\n  getCSSClass(state:string, map: BBStateCSSMap) {\n    return map && map[state];\n  }\n\n  constructor(private rendererFactory: RendererFactory2) {\n  }\n\n  createStateCSSMapper(element: any, map: BBStateCSSMap) {\n    let renderer = this.rendererFactory.createRenderer(element,null);\n\n    return <BBStateCSSMapper>{\n      remove: (state:string)=> {\n        renderer.removeClass(element,this.getCSSClass(state,map));\n      },\n      add: (state:string)=> {\n        renderer.addClass(element,this.getCSSClass(state,map));\n      },\n      removeAll: ()=> {\n        Object.keys(map).forEach(entry=>renderer.removeClass(element, map[entry]));\n      },\n      destroy: ()=> {\n        renderer.destroy();\n        renderer = null;\n      }\n    }\n  }\n}\n\nexport interface BBStateCSSMapper {\n  remove: (state:string)=>void;\n  removeAll: ()=>void;\n  add: (state:string)=> void;\n  destroy: ()=> void;\n}\n","import { Injectable, RendererFactory2 } from '@angular/core';\nimport { AnimationPlayer, AnimationBuilder } from '@angular/animations';\nimport { BBAnimationTransitions } from './animation-transitions.model';\nimport { BBAnimationPlayers } from './animation-players.model';\nimport { BBStateCssMapperService } from './state-css-mapper/state-css-mapper.service';\nimport { BBAnimationStateMachine } from './animation-state-machine.model';\nimport { BBStateCSSMapper } from './state-css-mapper/state-css-mapper.service';\n\n/**\n * \n */\n@Injectable()\nexport class BBAnimationStatesService {\n  constructor(\n    private builder: AnimationBuilder,\n    private cssMapper: BBStateCssMapperService,\n    private rendererFactory: RendererFactory2,\n  ) {}\n\n  /**\n   * \n   * @param element The element to apply the animations to.\n   * @param transitions The map of state transition animations for the element.\n   */\n  buildPlayers(\n    element: any, \n    transitions: BBAnimationTransitions) {\n\n    return Object.keys(transitions).reduce<BBAnimationPlayers>(\n      (players,fromState)=>{\n        players[fromState] = Object.keys(transitions[fromState])\n          .reduce<{[toState:string]: AnimationPlayer}>(\n            (prev,toState)=>{\n              const player = this.builder\n                .build(transitions[fromState][toState])\n                .create(element);\n              prev[toState] = player; \n              return prev;\n            },{});\n      return players;\n    },{});\n  }\n\n  onAnimationStart = (\n    state: string, \n    mapper: BBStateCSSMapper = null) => () => {\n      if(mapper) {\n        mapper.remove(state);\n      }\n  }\n\n  onAnimationDone = (\n    state: string, \n    mapper: BBStateCSSMapper = null) => () => {\n      if(mapper) {\n        mapper.add(state);\n      }\n  }\n\n  /**\n   * \n   * @param fromState \n   * @param toState \n   * @param players \n   */\n  getPlayer(\n    fromState: string, \n    toState: string, \n    players: BBAnimationPlayers) {\n      return players && \n        players[fromState] && \n        players[fromState][toState];\n  }\n\n  /**\n   * \n   * @param players \n   */\n  destroyAllPlayers(players: BBAnimationPlayers) {\n    if(players) {\n      Object.keys(players).forEach(fromState=>{\n        Object.keys(players[fromState]).forEach(toState=>{\n          players[fromState][toState].destroy();\n        })\n      });\n    }\n  }\n\n  /**\n   * \n   * @param element \n   * @param transitions \n   */\n  createAnimationStateMachine(\n    element: any, \n    transitions: BBAnimationTransitions = {}) {\n\n    let players = this.buildPlayers(element, transitions);\n    let currentState: string = '';\n    let currentPlayer: AnimationPlayer;\n\n    return <BBAnimationStateMachine> {\n        init: (state:string, mapper: BBStateCSSMapper = null)=> { \n          currentState = state;\n\n          if(mapper) {\n            mapper.add(currentState);\n          }\n        },\n\n        next: (nextState: string, mapper: BBStateCSSMapper = null) => {\n          if(currentState !== nextState) {\n\n            const newPlayer = this.getPlayer(currentState, nextState,players);\n\n            if(currentPlayer) {\n              currentPlayer.reset();\n            }\n\n            if(newPlayer) {\n              currentPlayer = newPlayer;\n\n              /*\n               * Reseting the player clears the callbacks\n               * so reregister them each time before playing.\n               */\n              currentPlayer.onStart(\n                this.onAnimationStart(currentState,mapper));\n              currentPlayer.onDone(\n                this.onAnimationDone(nextState,mapper));\n\n              currentPlayer.play();\n            } \n            /*\n             * In case an animation isn't defined for\n             * the transition but a css class is handle\n             * that by explicitly swapping out  the css \n             * classes when the transition player doesn't \n             * exist.\n             */\n            else {\n              if(mapper) {\n                mapper.remove(currentState);\n                mapper.add(nextState); \n              }\n            } \n\n            currentState = nextState;\n          }\n          return currentState;\n        },\n\n        destroy: ()=> {\n          this.destroyAllPlayers(players);\n          currentPlayer = null;\n          currentState = null;\n          currentPlayer = null;\n          players = null;\n        }\n    } \n\n  }\n}\n\n","import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';\nimport { BBAnimationStatesService } from '../animation-states/animation-states.service';\nimport { BBAnimationTransitions } from '../animation-states/animation-transitions.model';\nimport { BBAnimationStateMachine } from '../animation-states/animation-state-machine.model';\nimport { BBStateCSSMap } from '../animation-states/state-css-mapper/state-css-mapper.model';\nimport { BBStateCssMapperService, BBStateCSSMapper } from '../animation-states/state-css-mapper/state-css-mapper.service';\n\n@Directive({\n  selector: '[bbAlternatingPanel]'\n})\nexport class BBAlternatingPanelDirective {\n\n  private animationsStateMachine: BBAnimationStateMachine;\n  private cssMapper: BBStateCSSMapper;\n\n  private stateCache: string;\n  private mapCache: BBStateCSSMap;\n  private transitionsCache: BBAnimationTransitions;\n  /**\n   * Defintes the css classes the panel will use.\n   */\n  @Input() set css (map: BBStateCSSMap) {\n    if(this.mapCache != map) {\n      this.mapCache = map;\n\n      if(this.cssMapper) {\n        this.cssMapper.removeAll();\n        this.cssMapper.destroy();\n      }\n\n      this.cssMapper = this.cssMapperService.createStateCSSMapper(\n        this.elRef.nativeElement,\n        this.mapCache);\n    }\n  }\n\n  @Input() set state(toState:string) {\n    if(this.stateCache != toState) {\n      this.stateCache = toState;\n\n      if(this.animationsStateMachine) {\n        this.animationsStateMachine.next(this.stateCache, this.cssMapper);\n      }\n    }\n  }\n\n  @Input() set transitions(transitions: BBAnimationTransitions) {\n    if(this.transitionsCache != transitions) {\n      this.transitionsCache = transitions;\n\n      if(this.animationsStateMachine) {\n\n        if(this.cssMapper) {\n          this.cssMapper.removeAll();\n        }\n\n        this.animationsStateMachine.destroy();\n      }    \n\n      this.animationsStateMachine = \n        this.bbBuilder\n          .createAnimationStateMachine(\n            this.elRef.nativeElement,\n            this.transitionsCache);\n    }\n  }\n\n  constructor(\n    private elRef: ElementRef,\n    private renderer: Renderer2,\n    private bbBuilder: BBAnimationStatesService,\n    private cssMapperService: BBStateCssMapperService\n  ) { }\n\n  ngOnInit() {  \n    if(this.animationsStateMachine) {\n      this.animationsStateMachine.init(this.stateCache,this.cssMapper);\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBAnimationStatesService } from './animation-states.service';\nimport { BBStateCssMapperService } from './state-css-mapper/state-css-mapper.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [],\n  providers: []\n})\nexport class BBAnimationStatesModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBAnimationStatesModule,\n      providers: [BBAnimationStatesService, BBStateCssMapperService]\n    };\n  }  \n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBAlternatingPanelComponent } from './alternating-panel.component';\nimport { BBAlternatingPanelDirective } from './alternating-panel.directive';\nimport { BBAnimationStatesModule } from '../animation-states/animation-states.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BBAnimationStatesModule.forRoot(),\n  ],\n  \n  declarations: [\n    BBAlternatingPanelComponent,\n    BBAlternatingPanelDirective, \n  ],\n\n  exports: [\n    BBAlternatingPanelComponent,\n    BBAlternatingPanelDirective\n  ]\n})\nexport class BBAlternatingPanelModule { \n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBAlternatingPanelModule,\n      providers: []\n    };\n  }  \n}\n","export enum SlideAnimationDirections {\r\n    CLOSE = 'close',\r\n    SLIDE_LEFT = 'slide-left',\r\n    SLIDE_RIGHT = 'slide-right',\r\n    SLIDE_UP = 'slide-up',\r\n    SLIDE_DOWN = 'slide-down',\r\n}\r\n\r\nexport enum SlideDirections {\r\n    LEFT = 'left',\r\n    RIGHT = 'right',\r\n    UP = 'up',\r\n    DOWN = 'down',\r\n}","import { animation, trigger, state, style, transition, group, animate } from \"@angular/animations\";\r\nimport { AnimationMetadata } from '@angular/animations';\r\nimport { SlideAnimationDirections } from \"./sliding-panel.enums\";\r\n\r\nexport function verticalSlideAnimations(): AnimationMetadata  {\r\n    return trigger('verticalTrigger', [\r\n        state(SlideAnimationDirections.CLOSE, style({\r\n            transform: 'scaleY(0)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_DOWN, style({\r\n            transform: 'scaleY(1)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_UP, style({\r\n            transform: 'scaleY(1)', \r\n        })),\r\n        transition(\r\n                /*\r\n                SlideDirections.CLOSE + \r\n                ' => ' + \r\n                SlideDirections.SLIDE_DOWN, \r\n                */\r\n                `${SlideAnimationDirections.CLOSE} => ${SlideAnimationDirections.SLIDE_DOWN}`, \r\n                [\r\n            style({ \r\n                transform: 'scaleY(0)', \r\n                'transform-origin': 'top' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleY(1)', \r\n                    'transform-origin': 'top' \r\n            })),\r\n        ]),\r\n        transition(\r\n            `${SlideAnimationDirections.SLIDE_DOWN} => ${SlideAnimationDirections.CLOSE}`,\r\n            /*\r\n                SlideDirections.SLIDE_DOWN + \r\n                ' => ' + \r\n                SlideDirections.CLOSE, \r\n            */\r\n            [\r\n            style({ \r\n                transform: 'scaleY(1)', \r\n                'transform-origin': 'top' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleY(0)', \r\n                    'transform-origin': 'top' \r\n            \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_UP, [\r\n            style({ \r\n                transform: 'scaleY(0)', \r\n                'transform-origin': 'bottom' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleY(1)', \r\n                    'transform-origin': 'bottom' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_UP + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleY(1)', \r\n                'transform-origin': 'bottom' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleY(0)', \r\n                    'transform-origin': 'bottom' \r\n            \r\n            })),\r\n        ])\r\n        \r\n    ]);\r\n}\r\n\r\nexport function horizontalSlideAnimations(): AnimationMetadata  {\r\n    return trigger('horizontalTrigger', [\r\n        state(SlideAnimationDirections.CLOSE, style({\r\n            transform: 'scaleX(0)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_RIGHT, style({\r\n            transform: 'scaleX(1)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_LEFT, style({\r\n            transform: 'scaleX(1)', \r\n        })),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_RIGHT, [\r\n            style({ \r\n                transform: 'scaleX(0)', \r\n                'transform-origin': 'left' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleX(1)', \r\n                    'transform-origin': 'left' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_RIGHT + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleX(1)', \r\n                'transform-origin': 'left' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleX(0)', \r\n                    'transform-origin': 'left' \r\n            \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_LEFT, [\r\n            style({ \r\n                transform: 'scaleX(0)', \r\n                'transform-origin': 'right' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleX(1)', \r\n                    'transform-origin': 'right' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_LEFT + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleX(1)', \r\n                'transform-origin': 'right' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleX(0)', \r\n                    'transform-origin': 'right' \r\n            \r\n            })),\r\n        ])\r\n        \r\n    ]);\r\n}\r\n","import { \r\n  Component, \r\n  Input, \r\n  Output, \r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  HostListener,\r\n  NgZone,\r\n  HostBinding,\r\n} from '@angular/core';\r\n\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  keyframes,\r\n  animate,\r\n  group\r\n} from '@angular/animations';\r\n\r\nimport { \r\n  verticalSlideAnimations, \r\n  horizontalSlideAnimations } from './sliding-panel.animations';\r\nimport { SlideAnimationDirections, SlideDirections } from './sliding-panel.enums';\r\n\r\n\r\n\r\n/**\r\n * A sliding panel is a div element that can be \r\n * set to slide up, down, left, or right.\r\n * \r\n * It can be tied to a slidiing panel toggle\r\n * or can be shown or hidden by calling the\r\n * public members show, hide, or toggle. \r\n */\r\n@Component({\r\n  selector: 'div[bb-sliding-panel]',\r\n  template: `<ng-content></ng-content>`,\r\n  styles: [``],\r\n  host: {\r\n    '[@horizontalTrigger]':'horizontalState',\r\n    '[@verticalTrigger]':'verticalState',\r\n    '[class.open]':'isShowing',\r\n    '[class.closed]':'!isShowing',\r\n    '[class.pinned]':'pinned',\r\n    '(mouseenter)':'mouseEnterPanel.emit($event)',\r\n    '(mouseleave)':'mouseLeavePanel.emit($event)',\r\n    '(mouseover)':'mouseOverPanel.emit($event)',\r\n    '(click)':'clickPanel.emit($event)',\r\n    '[class.bb-sliding-panel]':\"'true'\"\r\n  },\r\n  animations: [\r\n    verticalSlideAnimations(), \r\n    horizontalSlideAnimations(),\r\n  ],\r\n  exportAs: 'bbSlidingPanel',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BBSlidingPanel {\r\n  /**\r\n   * Specify the direction of the panels sliding animation.\r\n   * Valid values: 'up', 'down', 'left', or 'right'\r\n   */\r\n  @Input() slideDirection: SlideDirections = SlideDirections.DOWN;\r\n\r\n  /**\r\n   * Event for when the mouse enters the panel.\r\n   */\r\n  @Output() mouseEnterPanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the mouse leaves the panel.\r\n   */\r\n  @Output() mouseLeavePanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the mouse is over the panel.\r\n   */\r\n  @Output() mouseOverPanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the panel is clicked.\r\n   */\r\n  @Output() clickPanel= new EventEmitter<MouseEvent>();\r\n\r\n  public pinned = false;\r\n\r\n\r\n  /**\r\n   * Trigger for the horizontal animations.\r\n   */\r\n  horizontalState : SlideAnimationDirections = SlideAnimationDirections.CLOSE;\r\n\r\n  /**\r\n   * Trigger for the vertical animations.\r\n   */\r\n  verticalState : SlideAnimationDirections = SlideAnimationDirections.CLOSE;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) { }\r\n\r\n  /**\r\n   * Returns whether the panel is open or closed.\r\n   */\r\n  public get isShowing() {\r\n    return (this.horizontalState !== SlideAnimationDirections.CLOSE ||\r\n        this.verticalState !== SlideAnimationDirections.CLOSE);\r\n  }\r\n\r\n  /**\r\n   * Show the panel with a sliding animation.\r\n   */\r\n  public show() {\r\n    switch(this.slideDirection) {\r\n      case SlideDirections.LEFT: {\r\n        this.horizontalState = SlideAnimationDirections.SLIDE_LEFT;\r\n        break;\r\n      }\r\n      case SlideDirections.RIGHT: {\r\n        this.horizontalState = SlideAnimationDirections.SLIDE_RIGHT;\r\n        break;\r\n      }\r\n      case SlideDirections.UP: {\r\n        this.verticalState = SlideAnimationDirections.SLIDE_UP;\r\n        break;\r\n      }\r\n      case SlideDirections.DOWN: {\r\n        this.verticalState = SlideAnimationDirections.SLIDE_DOWN;\r\n        break;\r\n      }\r\n      default: {\r\n        this.horizontalState = SlideAnimationDirections.CLOSE;\r\n        this.verticalState = SlideAnimationDirections.CLOSE;\r\n        break;\r\n      }\r\n    }\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Hide the panel with a sliding animation.\r\n   */\r\n  public hide() {\r\n    this.horizontalState = SlideAnimationDirections.CLOSE;\r\n    this.verticalState = SlideAnimationDirections.CLOSE;\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Toggle the panel state with a sliding animation.\r\n   */\r\n  public toggle() {\r\n    if(this.isShowing){\r\n      this.hide();\r\n    }\r\n    else{\r\n      this.show();\r\n    }\r\n  }\r\n\r\n}\r\n","import { \r\n  Directive, \r\n  Input, \r\n  HostListener, \r\n  HostBinding, \r\n  NgZone, \r\n  ElementRef, \r\n  OnInit,\r\n  OnDestroy,\r\n  AfterViewInit} from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel.component';\r\nimport { Observable ,  Subscription ,  fromEvent ,  of } from 'rxjs';\r\nimport { filter ,  combineLatest ,  merge ,  map ,  debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * Control a sliding panels shown or hidden state.\r\n * \r\n * Should only be attached to elements that have\r\n * a click event.\r\n */\r\n@Directive({\r\n  selector: '[bb-sliding-panel-toggle]',\r\n  host: {\r\n    '[class.open]':'panel.isShowing',\r\n    '[class.closed]':'!panel.isShowing',\r\n    '[class.pinned]':'panel.pinned',\r\n    '[class.bb-sliding-panel-toggle]':\"'true'\"\r\n  },\r\n  exportAs:'bbSlidingPanelToggle'\r\n})\r\nexport class BBSlidingPanelToggle implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * The panel that the toggle is attached to.\r\n   * \r\n   * If this value is not set an error will be \r\n   * thrown during init.\r\n   */\r\n  @Input('bb-sliding-panel-toggle') panel: BBSlidingPanel;\r\n\r\n  /**\r\n   * Controls whether the panel should open based \r\n   * on a click event or not.\r\n   */\r\n  @Input() toggleOnClick = false;\r\n\r\n  /**\r\n   * Controls whether the panel should open \r\n   * on mouse over or not.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Controls whether the panel should close When\r\n   * clicked outside the toggle or panel or not.\r\n   */\r\n  @Input() closeOnClickOutside = false;\r\n\r\n  /**\r\n   * Sets the initial state of the panel \r\n   * by pinning open it if true.\r\n   */\r\n  @Input() showOnInit: boolean;\r\n\r\n  /**\r\n   * Keep track of the previous pin state.\r\n   * This is needed to determine if the \r\n   * new pin state should actually cause a\r\n   * transition or not.\r\n   */\r\n  private previousPinnedState: boolean = false;\r\n  \r\n  /**\r\n   * Save he subscription so the stream\r\n   * can be properly closed.\r\n   */\r\n  private showHideSubscription: Subscription;\r\n\r\n  constructor(private element: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if(!this.panel){\r\n      throw new Error('No SlidingPanel component supplied to ' + \r\n                      'the bb-sliding-panel-toggle directive ' + \r\n                      '([bb-sliding-panel-toggle]=\"$PanelVariable\").');\r\n    }\r\n\r\n    if(this.showHideSubscription && !this.showHideSubscription.closed) {\r\n      this.showHideSubscription.unsubscribe();\r\n    }\r\n\r\n    /*\r\n     * Streams of the events necessary \r\n     * for the logic of the toggle.\r\n     */\r\n\r\n    let documentClick$ = fromEvent<MouseEvent>(document, 'click');\r\n    \r\n    let toggleClick$ = fromEvent<MouseEvent>(this.element.nativeElement, 'click');\r\n    let toggleMouseEnter$ = fromEvent<MouseEvent>(this.element.nativeElement, 'mouseenter');\r\n    let toggleMouseLeave$ = fromEvent<MouseEvent>(this.element.nativeElement, 'mouseleave');\r\n\r\n    let panelMouseEntered$ = this.panel.mouseEnterPanel.asObservable();\r\n    let panelMouseLeft$ = this.panel.mouseLeavePanel.asObservable();\r\n    let panelClick$ = this.panel.clickPanel.asObservable();\r\n\r\n    /*\r\n     * Reduce both leaving events to \r\n     * a false emission.\r\n     */\r\n    let leaveBoth$ = toggleMouseLeave$\r\n      .pipe(\r\n        merge(panelMouseLeft$),\r\n        filter(_=>this.showOnHover), \r\n        map(_=>false));\r\n\r\n    /*\r\n     * Reduce both enter events to \r\n     * a true emission.\r\n     */\r\n    let enterEither$ = toggleMouseEnter$\r\n      .pipe(\r\n        merge(panelMouseEntered$),\r\n        filter(_=>this.showOnHover),\r\n        map(_=>true));\r\n\r\n    /*\r\n     * When the toggle is clicked \r\n     * stop the event from bubbling\r\n     * and toggle the pinned state.\r\n     */\r\n    let toggleClicked$ = toggleClick$\r\n      .pipe(\r\n        map(_=> {\r\n          /*\r\n           * should probably be done with\r\n           * a do operator, once it works again,\r\n           * for both toggle clicked and panel\r\n           * clicked\r\n           */\r\n          event.stopPropagation();\r\n          return !this.previousPinnedState }));\r\n\r\n    /*\r\n     * When the panel is clicked\r\n     * stop the event from bubbling\r\n     * and just continue to emit the\r\n     * previous pinned state.\r\n     */\r\n    let panelClicked$ = panelClick$\r\n      .pipe(map(_=>{\r\n        event.stopPropagation();\r\n        return this.previousPinnedState }));\r\n\r\n    /*\r\n     * A document click is only\r\n     * triggered when the panel\r\n     * and the toggle don't prevent\r\n     * the bubbling so just emit \r\n     * false as the next pinned state.\r\n     */\r\n    let documentClicked$ = documentClick$\r\n      .pipe(\r\n        filter(_=>this.closeOnClickOutside),\r\n        map(_=>false));\r\n    \r\n    /*\r\n     * Combine all the pinned state\r\n     * streams.\r\n     */\r\n    let nextPinnedState$ = of(this.showOnInit)\r\n      .pipe(\r\n        merge(toggleClicked$, panelClicked$, documentClicked$));\r\n\r\n    /*\r\n     * Combine all the mouse movement\r\n     * streams.\r\n     */\r\n    let isHovering$ = of(false)\r\n      .pipe(\r\n        merge(leaveBoth$, enterEither$),\r\n        /*\r\n          * 50 here is arbitrary but \r\n          * seems to be below the \r\n          * human threshhold for noticing\r\n          * the delay while letting \r\n          * slower systems have plenty of\r\n          * time to process the events.\r\n          * \r\n          * Maybe it should be configurable?\r\n          */\r\n        debounceTime(50));\r\n\r\n    /*\r\n     * Combine the hover and pinned state\r\n     * streams into a stream that determines\r\n     * whether the panel state needs to change.\r\n     */\r\n    this.showHideSubscription = \r\n      isHovering$\r\n        .pipe(\r\n          combineLatest(nextPinnedState$),\r\n          map(states=>({hover:states[0],pin:states[1] })))\r\n        .subscribe(this.onNextState);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if(this.showHideSubscription && !this.showHideSubscription.closed) {\r\n      this.showHideSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  showPanel = () => this.onNextState({hover: false, pin: true});\r\n  hidePanel = () => this.onNextState({hover: false, pin: false});\r\n\r\n  /**\r\n   * Determine what the next panel state\r\n   * should be based on the new hover and\r\n   * pin states.\r\n   */\r\n  private onNextState = (nextStates:{hover: boolean, pin: boolean}) => {\r\n    if(nextStates.hover ) {\r\n      if(this.previousPinnedState && !nextStates.pin) { \r\n        this.panel.hide();  \r\n      }\r\n      else {\r\n        this.panel.show();\r\n      }\r\n    }\r\n    else {\r\n      if(!this.previousPinnedState && nextStates.pin) {\r\n        this.panel.show();\r\n      }\r\n      else if(!nextStates.pin){\r\n        this.panel.hide();\r\n      }\r\n    }\r\n    this.previousPinnedState = nextStates.pin;\r\n    this.panel.pinned = nextStates.pin;\r\n  }\r\n\r\n  \r\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { BBSlidingPanel } from './sliding-panel.component';\r\nimport { BBSlidingPanelToggle } from './toggle/sliding-panel-toggle.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBSlidingPanel, \r\n    BBSlidingPanelToggle, \r\n  ],\r\n\r\n  exports: [\r\n    BBSlidingPanel, \r\n    BBSlidingPanelToggle,\r\n  ]\r\n})\r\nexport class BBSlidingPanelModule { \r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBSlidingPanelModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Renderer,\r\n  ViewChild,\r\n  ElementRef,\r\n  ContentChildren,\r\n  HostBinding } from '@angular/core';\r\nimport {BBMenuItem} from '../common/menu-item.directive';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-dropdown-menu]',\r\n  template: `<div [bb-sliding-panel-toggle]=\"panel\" \r\n     [toggleOnClick]=\"toggleOnClick\"\r\n     [showOnHover]=\"showOnHover\"\r\n     [closeOnClickOutside]=\"closeOnClickOutside\">\r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n</div>\r\n<div class=\"dropdown-container\">\r\n  <div bb-sliding-panel \r\n    #panel=\"bbSlidingPanel\"\r\n    slideDirection=\"down\">\r\n    <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.dropdown-container{position:relative}/deep/ .dropdown-container>div.bb-sliding-panel{position:absolute;top:0}.dropdown-container div.bb-sliding-panel{display:flex;flex:1;flex-direction:column}`],\r\n  exportAs:'bbDropdownMenu'\r\n})\r\nexport class BBDropdownMenu {\r\n  @HostBinding('class.bb-dropdown-menu') applyHostClass = true;\r\n\r\n  @Input() public showOnHover = false;\r\n  @Input() public toggleOnClick = true;\r\n  @Input() public closeOnClickOutside = true;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  constructor() { }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBDropdownMenu } from './dropdown-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule\r\n  ],\r\n  \r\n  declarations: [\r\n    BBDropdownMenu\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBDropdownMenu\r\n  ]\r\n})\r\nexport class BBDropdownMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBDropdownMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","import { Component, Input, HostBinding, ViewChild } from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-slideout-menu]',\r\n  template: `<div class=\"slide-container\">\r\n  <div [bb-sliding-panel-toggle]=\"panel\" \r\n    [toggleOnClick]=\"pinOnClick\"\r\n    [showOnHover]=\"showOnMouseOver\"\r\n    [closeOnClickOutside]=\"closeOnClickOutside\">\r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n  <div class=\"slide-position\">\r\n    <div class=\"slide-anchor\">\r\n      <div bb-sliding-panel \r\n        #panel=\"bbSlidingPanel\"\r\n        [slideDirection]=\"slideDirection\">\r\n          <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.slide-container{position:relative}.slide-container>div.slide-position{position:absolute;top:0}/deep/ .slide-left>div.slide-container{background-color:red}/deep/ .slide-left div.slide-position{left:0}/deep/ .slide-right div.slide-position{right:0}.slide-container>>div.slide-anchor{position:relative}/deep/ .slide-anchor>div.bb-sliding-panel{position:absolute;display:flex;flex-direction:row;flex:1}/deep/ .slide-left div.bb-sliding-panel{right:0}/deep/ .slide-right div.bb-sliding-panel{left:0}`],\r\n  host: {\r\n    '[class.slide-left]':\"slideLeft\",\r\n    '[class.slide-right]':\"!slideLeft\"\r\n  }\r\n})\r\nexport class BBSlideoutMenu {\r\n  @HostBinding('class.bb-slideout-menu') applyHostClass = true;\r\n\r\n  @Input() public showOnMouseOver = true;\r\n  @Input() public pinOnClick = true;\r\n  @Input() public closeOnClickOutside = true;\r\n  @Input() slideDirection: \"left\" | \"right\" = \"right\";\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  get slideLeft() {\r\n    return this.slideDirection === \"left\";\r\n  }\r\n\r\n  constructor() { }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBSlideoutMenu } from './slideout-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBSlideoutMenu\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBSlideoutMenu\r\n  ]\r\n})\r\nexport class BBSlideoutMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBSlideoutMenuModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import { \r\n  Component, \r\n  Input,\r\n  Output,\r\n  Inject,\r\n  forwardRef,\r\n  EventEmitter,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  InjectionToken,\r\n  HostListener,\r\n  HostBinding,\r\n  ViewChild  \r\n      } from '@angular/core';\r\n\r\nimport { Observable ,  Subscription ,  BehaviorSubject ,  fromEvent } from 'rxjs';\r\nimport { debounceTime ,  map ,  distinctUntilChanged } from 'rxjs/operators';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\nimport { BBDropdownInputItemsList } from './item-list/dropdown-input-item-list.component';\r\nimport { BBDynamicComponentDirective } from '../dynamic-component/dynamic-component.directive';\r\nimport { DropdownInputService } from './service/dropdown-input-service.interface';\r\nimport { DropdownInputItemChosenEvent, DropdownInputItemsMouseEvent } from './events/dropdown-input-item-events.interface';\r\n\r\nexport const BBDropdownInputServiceToken = new InjectionToken<DropdownInputService>('DdIService');\r\n\r\n@Component({\r\n  selector: 'div[bb-dropdown-input]',\r\n  template: `<div class=\"dropdown-anchor\">\r\n  <input #dropdownInput\r\n\t\t (keydown)=\"onKeyDown($event)\"\r\n\t\t [attr.placeholder]=\"placeholderText\"/>\r\n  \t<div bb-sliding-panel\r\n\t     class=\"results\" \r\n\t\t slideDirection=\"down\"\r\n\t\t #panel=\"bbSlidingPanel\">\r\n\t\t <ul bb-dropdown-input-items-list\r\n\t\t \t#dropdownList\r\n\t\t    [dynamicComponentsData]=\"diServ.items$ | async\"\r\n\t\t\t(listItemMouseOver)=\"onListItemMouseOver($event)\"\r\n\t\t\t(listItemClick)=\"onListItemClicked($event)\"\r\n\t\t\t(newContainers)=\"onNewItemContainers($event)\">\r\n\t\t </ul>\r\n  \t</div>\t\r\n</div>\r\n`,\r\n  styles: [`div.dropdown-anchor{position:relative}.dropdown-anchor>div.bb-sliding-panel{position:absolute}.dropdown-anchor>.bb-sliding-panel ul.bb-dropdown-input-items-list{display:flex;flex:1;flex-direction:column;padding-left:0;list-style:none}`],\r\n  host: {\r\n    '(focusout)':\"onHostFocusOut($event)\",\r\n    '(focusin)':\"onHostFocusIn($event)\",\r\n  },\r\n  exportAs:'bbDropdownInput',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BBDropdownInput {\r\n  @HostBinding('class.bb-dropdown-input') applyHostClass = true;\r\n\r\n  /**\r\n   * Set maximum number of items for the service.\r\n   */\r\n  @Input() maxItems: number;\r\n\r\n  /**\r\n   * Toggles whether the displayText should be set into the input\r\n   * box when an item is 'chosen'.  Defaults to true. \r\n   */\r\n  @Input() setTextOnChoice = true;\r\n\r\n  /**\r\n   * Set the place holder text on the input element.\r\n   */\r\n  @Input() placeholderText = '';\r\n\r\n  /**\r\n   * Sets how long, in ms, the delay is \r\n   * between updates to the DropdownInputService\r\n   * when the value of the input element\r\n   * has been changed.\r\n   * \r\n   * Defaults to 400ms.\r\n   */\r\n  @Input() public inputValueChangeDelayms = 400;\r\n\r\n  /**\r\n   * The auto selection mode determine which item will be selected if the\r\n   * choose item method is executed when no item has been specifically\r\n   * selected by user interaction.\r\n   * \r\n   * 'none'    - nothing is chosen without user interaction\r\n   *  \r\n   * 'lazy'    - the first item in the list is chosen\r\n   *  \r\n   * 'exact'   - if any item's displayText matches the input exactly,\r\n   *             ignoring case, the first match is chosen\r\n   * \r\n   * 'only'    - if there is only a single item in the list it is chosen\r\n   * \r\n   * 'partial' - math the first item in the list that, ignoring case, \r\n   *             exactly matches the current value\r\n   */\r\n  @Input() autoSelectionMode: 'none' | 'lazy' | 'exact' | 'only' | 'partial' = 'none'; \r\n\r\n  /**\r\n   * The index of the auto selection mode selection made.\r\n   */\r\n  private autoSelectedIndex = -1;\r\n\r\n  private selectedIndex = -1;\r\n\r\n  /**\r\n   * Emit the data for the list item selected either through \r\n   * a mouse click or hitting enter when it is in the selected \r\n   * state.\r\n   */\r\n  @Output() listItemChosen = new EventEmitter<DropdownInputItemChosenEvent>();\r\n\r\n  /**\r\n   * Return true if the service has returned\r\n   * at least 1 item to the component.\r\n   */\r\n  public get hasItems() {\r\n      return this.numItems > 0;\r\n  }\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  @ViewChild('dropdownInput', {read: ElementRef}) inputElementRef: ElementRef;\r\n  @ViewChild('panel', {read: ElementRef}) panelElementRef: ElementRef;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n  @ViewChild('dropdownList') list: BBDropdownInputItemsList;\r\n\r\n  public get inputElement() {\r\n    return (this.inputElementRef.nativeElement as HTMLInputElement);\r\n  }\r\n\r\n  // determine the location of clicks\r\n  // to determine if the dropdown should\r\n  // show or not.\r\n  private outsideClick = new EventEmitter();\r\n  private insideClick = new EventEmitter();\r\n\r\n  private clickedInside = new BehaviorSubject(false);\r\n\r\n  /* user interaction state tracking */\r\n  private wasInsideClicked = false;\r\n  private wasFocused = false;\r\n\r\n  // for tracking the state of the panel\r\n  private inputSub: Subscription;\r\n\r\n  private itemsSub: Subscription;\r\n  private numItems: number = 0;\r\n\r\n  /*\r\n   * Internal list of the dynamic components' containers.\r\n   */\r\n  private dynamicContainers: BBDynamicComponentDirective[];\r\n\r\n  public diServ: DropdownInputService;\r\n\r\n  constructor(\r\n    @Inject(forwardRef(()=>BBDropdownInputServiceToken)) private _diServ: DropdownInputService,\r\n    private ele: ElementRef,\r\n    private chDetRef: ChangeDetectorRef) {\r\n      this.diServ = _diServ;\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if(this.maxItems) {\r\n      this.diServ.setMaxItems(this.maxItems);\r\n    }\r\n\r\n    /*\r\n     * Track the value changes of the input element\r\n     * without bringing in angular forms to keep\r\n     * the requirements for bb as low as possible.\r\n     */\r\n    this.inputSub = \r\n      fromEvent(this.inputElement, 'keyup')\r\n        .pipe(\r\n          map((event:KeyboardEvent)=>(event.target as HTMLInputElement).value),\r\n          debounceTime(this.inputValueChangeDelayms),\r\n          distinctUntilChanged())\r\n        .subscribe(\r\n            newText=>{\r\n              this.diServ.setSearchText(newText);\r\n            },\r\n        err=>console.log(err),\r\n        ()=>{/*done*/});\r\n\r\n    this.itemsSub = this.diServ.items$\r\n      .pipe(\r\n        map(items=> items? items.length:-1))\r\n      .subscribe(\r\n        num=> {\r\n          this.numItems = num;\r\n\r\n          if(this.hasItems){\r\n            this.panel.show();\r\n          }\r\n          else {\r\n            this.panel.hide();\r\n          }\r\n          this.chDetRef.markForCheck();\r\n          this.chDetRef.detectChanges();\r\n        },\r\n        err=>console.log(err),\r\n        ()=>{/*done*/});\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.inputSub.unsubscribe();\r\n    this.itemsSub.unsubscribe();\r\n    this.diServ.clearItems();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selection criteria and\r\n   * perform a new auto selection.\r\n   */\r\n   onNewItemContainers(\r\n    containers: BBDynamicComponentDirective[]) {\r\n      this.clearAutoSelection();\r\n      this.clearSelection();\r\n      this.dynamicContainers = containers;\r\n      if(this.dynamicContainers && this.dynamicContainers.length > 0){\r\n        this.autoSelectItem();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Choose either the currently selected item or\r\n   * the auto chosen item and emit it.\r\n   */\r\n  private chooseCurrentItem() {\r\n      let currentItem: DropdownInputItemChosenEvent;\r\n      if (this.selectedIndex >= 0) {\r\n            currentItem = this.getCurrentItem(this.selectedIndex);\r\n      }\r\n      else {\r\n          if (this.autoSelectedIndex >= 0) {\r\n            currentItem = this.getCurrentItem(this.autoSelectedIndex);\r\n          }\r\n      }\r\n\r\n      if(currentItem){\r\n        if (this.setTextOnChoice) {\r\n          this.inputElement.value = currentItem.matchText;\r\n        }\r\n\r\n        this.listItemChosen.emit(currentItem);\r\n        this.clearSelection();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Return a data structure of the dynamic component\r\n   * described by the index value.\r\n   */\r\n  private getCurrentItem(index: number): DropdownInputItemChosenEvent {\r\n    return {\r\n      component: this.dynamicContainers[index].currentCompRef.instance,\r\n      index: index,\r\n      matchText: this.list.dynamicComponentsData[index].matchText,\r\n    }\r\n  }\r\n\r\n  /* Soft Selection Handling */\r\n  private autoSelectItem() {\r\n    let index = -1;\r\n    switch (this.autoSelectionMode) {\r\n        case 'none': {\r\n            // do nothing\r\n            break;\r\n        }\r\n        case 'lazy': {\r\n            if (this.dynamicContainers) {\r\n                index = 0;\r\n            }\r\n            break;\r\n        }\r\n        case 'exact': {\r\n          if (this.dynamicContainers) {\r\n            let containerIndex = -1;\r\n\r\n            this.list.dynamicComponentsData.find(\r\n            (cnt,i) => {\r\n              if (cnt.matchText.toLowerCase() === \r\n                this.inputElement.value.toLowerCase()) {\r\n                containerIndex = i;\r\n                return true;\r\n              }\r\n            });\r\n            if (containerIndex >= 0) {\r\n                index = containerIndex;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 'partial': {\r\n          if (this.dynamicContainers) {\r\n            let containerIndex = -1;\r\n\r\n            this.list.dynamicComponentsData.find(\r\n            (cnt,i) => {\r\n              if (cnt.matchText.toLowerCase()\r\n                  .substr(0,\r\n                    this.inputElement.value.length) === \r\n                  this.inputElement.value.toLowerCase()) {\r\n                containerIndex = i;\r\n                return true;\r\n              }\r\n            });\r\n            if (containerIndex >= 0) {\r\n                index = containerIndex;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 'only': {\r\n            if (this.dynamicContainers && this.dynamicContainers.length === 1) {\r\n                index = 0;\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (index != this.autoSelectedIndex) {\r\n      this.clearAutoSelection();\r\n\r\n      if (index >= 0) {\r\n        this.list.changeAutoSelection(index, true);\r\n      }\r\n      this.autoSelectedIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear current auto selection\r\n   */\r\n  private clearAutoSelection() {\r\n    if (this.autoSelectedIndex >= 0) {\r\n      this.list.changeAutoSelection(this.autoSelectedIndex, false);\r\n      this.autoSelectedIndex = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select previous, wrapping\r\n   */\r\n  private selectPreviousListItem(e: KeyboardEvent) {\r\n    this.getNextSelection(-1);\r\n    \r\n  }\r\n\r\n  /**\r\n   * Select next, wrapping\r\n   */\r\n  private selectNextListItem(e: KeyboardEvent) {\r\n    this.getNextSelection(1);\r\n  }\r\n\r\n  /**\r\n   * Get the next selection based on the indexChange\r\n   * and wrapping around the array of items.\r\n   */\r\n  private getNextSelection(indexChange:number) {\r\n    if (this.dynamicContainers && this.dynamicContainers.length > 0) {\r\n        this.list.changeSelection(this.selectedIndex, false);\r\n\r\n        // move selection index\r\n        this.selectedIndex += indexChange;\r\n\r\n        // wrap the selection\r\n        if (this.selectedIndex < 0) {\r\n            this.selectedIndex = this.dynamicContainers.length - 1;\r\n        }\r\n        else if (this.selectedIndex >= this.dynamicContainers.length) {\r\n            this.selectedIndex = 0;\r\n        }\r\n\r\n        // set the selection\r\n        this.list.changeSelection(this.selectedIndex, true);\r\n\r\n        // the container element is considered to be the angular binding comment, so we have to go up 1 level to the li element\r\n        const listElement = this.list.listElements[this.selectedIndex];\r\n        const containerElement = (this.panelElementRef.nativeElement as HTMLDivElement);\r\n\r\n        // check if item is in view\r\n        const inViewData = this.elementOffsetFromView(listElement, containerElement);\r\n        if (!inViewData.inView) {\r\n            containerElement.scrollTop += inViewData.scrollBy;\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * clear current selection\r\n   */\r\n  private clearSelection() {\r\n    if (this.selectedIndex >= 0) {\r\n      this.list.changeSelection(this.selectedIndex, false);\r\n      this.selectedIndex = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if an element is within the view of the container element\r\n   * and if it isn't also determine the vertical offset from being in view\r\n   * it is at.\r\n   * @param listElement the element to determine if it is in view\r\n   * @param container the viewing container of the element\r\n   */\r\n  private elementOffsetFromView(listElement: HTMLElement, container: HTMLElement) {\r\n      const listRec = listElement.getBoundingClientRect();\r\n      const contRec = container.getBoundingClientRect();\r\n      const topViz = listRec.top >= contRec.top;\r\n      const botViz = listRec.bottom <= contRec.bottom;\r\n\r\n      const inViewData = {\r\n          inView: topViz && botViz,\r\n          scrollBy: 0 \r\n      }\r\n\r\n      if (!botViz) {\r\n          inViewData.scrollBy = listRec.bottom - contRec.bottom;\r\n      }\r\n      else if (!topViz) {\r\n          inViewData.scrollBy = -(contRec.top - listRec.top);\r\n      }\r\n      \r\n      return inViewData;\r\n  }\r\n\r\n\r\n  /* Event Handlers */\r\n\r\n  /**\r\n   * Read for extra control keys pressed, up and down arrows and enter,\r\n   * and take the appropriate action based on them.\r\n   * Up Arrow - select the previous item on the list, or the last item if none has been selected yet\r\n   * Down Arrow - select the next item on the list, or the first if none has been selected \r\n   * Enter - 'choose' the currently selected item\r\n   * @param e\r\n   */\r\n   onKeyDown(e: KeyboardEvent) {\r\n      switch (e.keyCode) {\r\n          case EventKeys.UPARROW:\r\n              this.clearAutoSelection();\r\n              this.selectPreviousListItem(e);\r\n              e.preventDefault();\r\n              break;\r\n          case EventKeys.DOWNARROW:\r\n              this.clearAutoSelection();\r\n              this.selectNextListItem(e);\r\n              e.preventDefault();\r\n              break;\r\n          case EventKeys.ENTER:\r\n              this.chooseCurrentItem();\r\n              e.preventDefault();\r\n              break;\r\n          default:\r\n              // do nothing\r\n              break;\r\n      }\r\n  }\r\n\r\n\r\n  @HostListener('document:click',['$event']) \r\n  onOutsideClick(e: MouseEvent) {\r\n    if(!this.wasInsideClicked) {\r\n      this.wasFocused = false;\r\n      setTimeout(_=>{\r\n        if(!this.wasFocused){\r\n          this.panel.hide();\r\n          this.chDetRef.markForCheck();\r\n          this.chDetRef.detectChanges();\r\n        }},150);\r\n    }\r\n    this.wasInsideClicked = false;\r\n  }\r\n\r\n  @HostListener('click',['$event']) \r\n  onInsideClick(e: MouseEvent) {\r\n    this.wasInsideClicked = true;\r\n    this.wasFocused = true;\r\n  }\r\n\r\n  onHostFocusIn(e: FocusEvent) {\r\n    if(this.hasItems){\r\n      this.panel.show();\r\n      this.chDetRef.markForCheck();\r\n      this.chDetRef.detectChanges();\r\n    }\r\n    this.wasFocused = true;\r\n  }\r\n\r\n  onHostFocusOut(e: FocusEvent){\r\n    this.wasFocused = false;\r\n    setTimeout(_=>{\r\n      if(!this.wasFocused){\r\n        this.panel.hide();\r\n        this.chDetRef.markForCheck();\r\n      }},150);\r\n  }\r\n\r\n  onListItemMouseOver(e: DropdownInputItemsMouseEvent) {\r\n    this.clearAutoSelection();\r\n    this.clearSelection();\r\n    this.selectedIndex = e.index;\r\n    this.list.changeSelection(this.selectedIndex,true);\r\n  }\r\n\r\n  onListItemClicked(e: DropdownInputItemsMouseEvent) {\r\n    this.selectedIndex = e.index;\r\n    this.list.changeSelection(this.selectedIndex,true);\r\n    this.chooseCurrentItem();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Enumerate the desired key codes for key events\r\n */\r\nenum EventKeys {\r\n    ENTER = 13,\r\n    UPARROW = 38,\r\n    DOWNARROW = 40,\r\n};\r\n","import { Directive, Input } from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Directive({\r\n  selector: '[bb-sliding-panel-focus]',\r\n  host: {\r\n    '(focus)':\"onFocus($event)\",\r\n    '(blur)':\"onBlur($event)\"\r\n  }\r\n})\r\nexport class BBDropdownInputDirective {\r\n  @Input('bb-sliding-panel-focus') panel: BBSlidingPanel;\r\n  @Input() canShow: boolean = false;\r\n\r\n  constructor() { }\r\n\r\n  onFocus(e: FocusEvent) {\r\n    if(this.canShow) {\r\n      console.log('showing');\r\n      this.panel.show();\r\n    }\r\n  }\r\n\r\n  onBlur(e: FocusEvent) {\r\n    this.panel.hide();\r\n  }\r\n\r\n\r\n}\r\n","import {\r\n    Directive,  \r\n    Component,\r\n    ComponentFactoryResolver,\r\n    ComponentRef,\r\n    ChangeDetectionStrategy,\r\n    Input,\r\n    ReflectiveInjector,\r\n    ViewChild,\r\n    ViewContainerRef } from '@angular/core';\r\nimport { DynamicComponentData } from './dynamic-component-data.interface';\r\n\r\n/**\r\n */\r\n@Directive({\r\n  selector: '[bb-dynamic-component]',\r\n  exportAs:'dynamicComp',\r\n})\r\nexport class BBDynamicComponentDirective {\r\n    public currentCompRef: ComponentRef<any>;\r\n\r\n    public dccClasses: any = {};\r\n\r\n    @Input('bb-dynamic-component') public set componentData(compData: DynamicComponentData) {\r\n      this.createComponent(compData);\r\n    }\r\n\r\n    constructor(protected vcRef: ViewContainerRef,\r\n                protected resolver: ComponentFactoryResolver) {\r\n    }\r\n\r\n    protected createComponent(compData: DynamicComponentData) {\r\n      if (!compData) {\r\n        return;\r\n      }\r\n\r\n      if (this.currentCompRef) {\r\n        this.currentCompRef.destroy();\r\n      }\r\n\r\n      let inputProviders: any[] = []\r\n\r\n      if (compData.providers) {\r\n        inputProviders = Object.keys(compData.providers).map(\r\n          (provName: any) => {\r\n            return { provide: provName, useValue: compData.providers[provName] };\r\n          });\r\n      }\r\n\r\n      let injector =\r\n        ReflectiveInjector\r\n          .fromResolvedProviders(\r\n            ReflectiveInjector.resolve(inputProviders),\r\n            this.vcRef.parentInjector);\r\n      \r\n      let compRef: ComponentRef<any> =\r\n        this.resolver\r\n          .resolveComponentFactory(compData.component)\r\n          .create(injector);\r\n\r\n      this.vcRef.insert(compRef.hostView);\r\n\r\n      if (compData.inputs) {\r\n        Object.keys(compData.inputs).map(\r\n          input => {\r\n            compRef.instance[input] = compData.inputs[input];\r\n          }\r\n        )\r\n      }\r\n\r\n      compRef.changeDetectorRef.markForCheck();\r\n      this.currentCompRef = compRef;\r\n    }\r\n\r\n \r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBDynamicComponentDirective } from './dynamic-component.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [BBDynamicComponentDirective],\n  exports: [BBDynamicComponentDirective]\n})\nexport class BBDynamicComponentModule { }\n","import {\r\n    Component,\r\n    ComponentRef,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    ComponentFactoryResolver,\r\n    ReflectiveInjector,\r\n    ViewContainerRef,\r\n    ViewChildren,\r\n    QueryList,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    HostBinding,\r\n} from '@angular/core';\r\nimport { Observable ,  Subscription } from 'rxjs';\r\nimport { DropdownItemComponentData } from '../service/dropdown-input-service.interface';\r\nimport { BBDynamicComponentDirective } from '../../dynamic-component/dynamic-component.directive';\r\nimport { DropdownInputItemsMouseEvent } from '../events/dropdown-input-item-events.interface';\r\n\r\n@Component({\r\n    selector:'ul[bb-dropdown-input-items-list]',\r\n    template: `<li *ngFor=\"let compData of dynamicComponentsData; let i = index;\"\r\n    #listItem\r\n    class=\"item\"\r\n    [class.auto-selected]=\"itemAutoSelected[i]\"\r\n    [class.selected]=\"itemSelected[i]\"\r\n    (click)=\"onListItemClick($event, i)\"\r\n    (mouseover)=\"onListItemMouseOver($event, i)\">\r\n    <ng-template #container=\"dynamicComp\" [bb-dynamic-component]=\"compData\"></ng-template>\r\n</li>\r\n\r\n\r\n`,\r\n    styles: [``],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BBDropdownInputItemsList {\r\n    @HostBinding('class.bb-dropdown-input-items-list') applyHostClass = true;\r\n\r\n    @Input() public dynamicComponentsData: DropdownItemComponentData[] = [];\r\n\r\n    public dynamicComponentClasses: any[];\r\n\r\n    @ViewChildren('container') \r\n        public dynamicComponentContainers: QueryList<BBDynamicComponentDirective>;\r\n\r\n    @ViewChildren('listItem',{read:ViewContainerRef})\r\n        public listItems: QueryList<ViewContainerRef>;\r\n\r\n    public get listElements() {\r\n        return this.listItems.toArray().map(li=>{\r\n            return (li.element.nativeElement as HTMLLIElement);\r\n        });\r\n    }\r\n\r\n    @Output() public newContainers = new EventEmitter<BBDynamicComponentDirective[]>();\r\n\r\n    @Output() public listItemMouseOver = new EventEmitter<DropdownInputItemsMouseEvent>();\r\n\r\n    @Output() public listItemClick = new EventEmitter<DropdownInputItemsMouseEvent>();\r\n\r\n    private newContainersSub: Subscription;\r\n\r\n    itemAutoSelected: boolean[] = [];\r\n    itemSelected: boolean[] = [];\r\n\r\n    constructor(private chDetRef: ChangeDetectorRef) {\r\n    }\r\n\r\n    public changeSelection(index:number, selected: boolean) {\r\n        this.itemSelected[index]=selected;\r\n        this.chDetRef.markForCheck();\r\n        this.chDetRef.detectChanges();\r\n    }\r\n\r\n    public changeAutoSelection(index: number, selected: boolean) {\r\n        this.itemAutoSelected[index]=selected;\r\n        this.chDetRef.markForCheck();\r\n        this.chDetRef.detectChanges();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // emit the original list\r\n        this.newContainers.emit(this.dynamicComponentContainers.toArray());\r\n        \r\n        if (this.newContainersSub) {\r\n            this.newContainersSub.unsubscribe();\r\n        }\r\n\r\n        this.newContainersSub =\r\n            this.dynamicComponentContainers\r\n                .changes\r\n                .subscribe(\r\n                    newList => {\r\n                        this.itemAutoSelected = [];\r\n                        this.itemSelected = [];\r\n                        this.newContainers.emit(newList.toArray());\r\n                    },\r\n                    (error: string) => console.log(error),\r\n                    () => {\r\n                        this.newContainersSub.unsubscribe()\r\n                    });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.newContainersSub) {\r\n            this.newContainersSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onListItemClick(\r\n        e: MouseEvent, \r\n        index: number){\r\n        this.listItemClick.emit({\r\n            event: e,\r\n            index: index\r\n        });\r\n    }\r\n\r\n    onListItemMouseOver(\r\n        e: MouseEvent, \r\n        index: number) {\r\n        this.listItemMouseOver.emit({\r\n            event: e,\r\n            index: index\r\n        });\r\n    }\r\n}\r\n\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBDropdownInput } from './dropdown-input.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\nimport { BBDropdownInputDirective } from './dropdown-input.directive';\r\nimport { BBDynamicComponentModule } from '../dynamic-component/dynamic-component.module';\r\nimport { BBDropdownInputItemsList } from './item-list/dropdown-input-item-list.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n    BBDynamicComponentModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBDropdownInput,\r\n    BBDropdownInputDirective, \r\n    BBDropdownInputItemsList,\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBDropdownInput,\r\n  ]\r\n})\r\nexport class BBDropdownInputModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBDropdownInputModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[bb-menu-item]',\r\n})\r\nexport class  BBMenuItem {\r\n    constructor(\r\n        private _viewContainer: ViewContainerRef) { }\r\n}","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[bb-menu-item-right]',\r\n})\r\nexport class  BBMenuItemRight {\r\n    constructor() { }\r\n}","import { \r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  HostBinding,\r\n  OnInit,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  NgZone,\r\n } from '@angular/core';\r\n\r\nimport { \r\n  BBSlidingPanel, \r\n  BBSlidingPanelToggle } from '../sliding-panel';\r\n\r\nimport {BBMenuItem} from '../common/menu-item.directive';\r\nimport {BBMenuItemRight} from './menu-item-right.directive';\r\nimport { Observable ,  fromEvent ,  of ,  Subscription } from 'rxjs';\r\nimport { merge ,  map ,  distinctUntilChanged } from 'rxjs/operators';\r\n\r\n/**\r\n * A hamburger menu is either a div or nav element\r\n * that has arbitrary items as it's content with the\r\n * bb-menu-item or bb-menu-item-right directives.\r\n * \r\n * It takes a standard css media query as an input,\r\n * expandOnQuery, and when that query returns true \r\n * the menu will display the items inside it's borders.\r\n * \r\n * If the query is false the menu will be rendered in \r\n * the collapsed state where a toggle will be right \r\n * justified and when clicked will show and hide the\r\n * menu item contents in a panel that drops down.\r\n * \r\n * The toggle itself is set by adding the bb-menu-toggle\r\n * directive to content inside the menu element that \r\n * should act as the toggle.\r\n * \r\n * The hamburger menu component is exported as BBHamburgerMenu\r\n * and provides the state of the panel with isOpen and the \r\n * state of the menu itself as expanded.  These can be used \r\n * to modify the menu content itself based on the current\r\n * state of the menu.\r\n */\r\n@Component({\r\n  selector: 'div[bb-hamburger-menu], nav[bb-hamburger-menu]',\r\n  template: `<div class=\"menu-container\">\r\n  <ng-content select=\"[bb-fixed-content]\"></ng-content>\r\n\r\n  <div bb-sliding-panel\r\n      class=\"menu-items-container\"\r\n      slideDirection=\"down\"\r\n      #panel=\"bbSlidingPanel\">\r\n    <div class=\"menu-items\">\r\n      <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n    </div>\r\n    <div class=\"menu-items-right\">\r\n      <ng-content select=\"[bb-menu-item-right]\"></ng-content>\r\n    </div>\r\n  </div>\r\n  \r\n  <div [bb-sliding-panel-toggle]=\"panel\"\r\n       #toggle=\"bbSlidingPanelToggle\" \r\n       [toggleOnClick]=\"toggleOnClick\"\r\n       [showOnHover]=\"showOnHover\"\r\n       [showOnInit]=\"expanded\"\r\n       [closeOnClickOutside]=\"closeOnClickOutside\">\r\n      <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.menu-container{display:flex;flex:1;flex-direction:row;align-items:center;position:relative;min-height:inherit;max-height:inherit;height:inherit}:host.bb-hamburger-menu.expanded div.menu-items-container{display:flex;flex-direction:row;flex:1;justify-content:space-between}:host.bb-hamburger-menu.expanded div.menu-items,:host.bb-hamburger-menu.expanded div.menu-items-right{display:flex;flex-direction:row;flex-grow:1;flex-shrink:1;flex-basis:auto}:host.bb-hamburger-menu.expanded div.menu-items-right{justify-content:flex-end}:host.bb-hamburger-menu.collapsed div.menu-items-container{display:flex;flex-direction:column;flex:1}:host.bb-hamburger-menu.collapsed div.menu-items,:host.bb-hamburger-menu.collapsed div.menu-items-right{display:flex;flex-direction:column;flex-grow:1;flex-shrink:1;flex-basis:auto}:host.bb-hamburger-menu.expanded div.bb-sliding-panel-toggle{visibility:hidden;width:0}div.bb-sliding-panel-toggle{display:inline-block}:host.collapsed div.menu-items-container{position:absolute;top:100%;left:0;right:0}:host.collapsed div.menu-container{justify-content:space-between}div.menu-items{flex-grow:1;flex-shrink:1;flex-basis:auto}`],\r\n  host: {\r\n    '[class.expanded]': \"expanded\",\r\n    '[class.collapsed]': \"!expanded\",\r\n  },\r\n  exportAs:'bbHamburgerMenu'\r\n})\r\nexport class BBHamburgerMenu implements OnInit, OnDestroy, AfterViewInit {\r\n  @HostBinding('class.bb-hamburger-menu') applyHostClass = true;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n  @ViewChild('toggle') toggle: BBSlidingPanelToggle;\r\n\r\n  @ContentChildren(BBMenuItem, { read:ElementRef, descendants:true }) \r\n  items: QueryList<ElementRef>;\r\n  @ContentChildren(BBMenuItemRight, {read:ElementRef, descendants:true}) \r\n  rightItems: QueryList<ElementRef>;\r\n\r\n  /**\r\n   * Get the items currently being displayed\r\n   * in the hamburger menu.\r\n   */\r\n  public get itemElementRefs(): ElementRef[] {\r\n    return this.items.toArray().concat(this.rightItems.toArray());\r\n  }\r\n\r\n  /**\r\n   * Return if the panel is open or not.\r\n   */\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  /**\r\n   * A css media query as a string that\r\n   * will determine when the hamburger menu\r\n   * should expand the items onto the menu \r\n   * bar and remove the dropdown toggle\r\n   */\r\n  @Input() expandOnQuery: string;\r\n         \r\n  /**\r\n   * Show the menu if the toggle is hovered\r\n   * over.  Defaults to false.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Close the menu if a click happens outside\r\n   * it.  Defaults to true.\r\n   */\r\n  @Input() closeOnClickOutside = true;\r\n\r\n  /**\r\n   * Allow the toggle to work on the\r\n   * click event.\r\n   */\r\n  readonly toggleOnClick = true;\r\n\r\n  /**\r\n   * Cache for the closeOnClickOutside\r\n   * input.\r\n   */\r\n  private _cocoInit = false;\r\n\r\n  /**\r\n   * Use a flag member for the expanded \r\n   * state because host bindings can't \r\n   * use the async pipe so we have to \r\n   * cache the media query results.\r\n   */\r\n  public expanded = false;;\r\n\r\n  /**\r\n   * Track the subscription to the window\r\n   * resize event and media query result\r\n   * stream.\r\n   */\r\n  private expandedSubscription: Subscription;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    /*\r\n     * Save the close on click outside\r\n     * state.  This will be toggled so\r\n     * that the panel doesnt enter the\r\n     * closed state when the menu bar \r\n     * is in the expanded state.\r\n     * \r\n     * Otherwise the panel collapses and\r\n     * the items disappear with no toggle\r\n     * to bring them back.\r\n     */\r\n    this._cocoInit = this.closeOnClickOutside;\r\n    \r\n    /*\r\n     * Determine the initial expansion state\r\n     * based on the media query.\r\n     */\r\n    this.expanded = window.matchMedia(this.expandOnQuery).matches;\r\n\r\n    if(this.expanded) {  \r\n      this.closeOnClickOutside = false;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    /*\r\n     * Set up the stream\r\n     */\r\n    this.expandedSubscription = \r\n      fromEvent(window,\"resize\")\r\n      .pipe(\r\n        map(_=>window.matchMedia(this.expandOnQuery).matches),\r\n        distinctUntilChanged())\r\n      .subscribe(expanded=>{\r\n          this.expanded = expanded;\r\n          this.togglePanelState();\r\n      });  \r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if(this.expandedSubscription && !this.expandedSubscription.closed) {\r\n      this.expandedSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the state of the panel \r\n   * to showing or hiding based\r\n   * on the cached expanded member\r\n   */\r\n  private togglePanelState() {\r\n    if(this.expanded) {  \r\n      this.closeOnClickOutside = false;\r\n      this.toggle.showPanel();\r\n    }\r\n    else {\r\n      this.closeOnClickOutside = this._cocoInit;\r\n      this.toggle.hidePanel();\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBMenuItem } from './menu-item.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    BBMenuItem,\r\n  ],\r\n  exports: [\r\n    BBMenuItem,\r\n  ]\r\n})\r\nexport class BBCommonModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBCommonModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\nimport { BBHamburgerMenu } from './hamburger-menu.component';\r\nimport { BBMenuItemRight } from './menu-item-right.directive';\r\nimport {BBCommonModule} from '../common/common.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n    BBCommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBHamburgerMenu,\r\n    BBMenuItemRight,\r\n  ],\r\n  \r\n  exports: [\r\n    BBHamburgerMenu,\r\n    BBMenuItemRight,\r\n  ]\r\n})\r\nexport class BBHamburgerMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBHamburgerMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { \r\n  Component,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  EventEmitter,\r\n  TemplateRef,\r\n  ViewRef,\r\n  Renderer,\r\n  ViewChild,\r\n  HostBinding,\r\n  NgZone,\r\n } from '@angular/core';\r\nimport { BBMenuItem } from '../common/menu-item.directive';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-collapsing-menu]',\r\n  template: `<div class=\"menu-container\">\r\n  <div #displayedItems class=\"displayed\">\r\n  </div>\r\n\r\n  <div  #toggle\r\n        [class.hidden]=\"!hasOverflow\" \r\n        [bb-sliding-panel-toggle]=\"panel\"\r\n        [toggleOnClick]=\"toggleOnClick\"\r\n        [closeOnClickOutside]=\"closeOnClickOutside\"\r\n        [showOnHover]=\"showOnHover\">\r\n    \r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n  <div bb-sliding-panel \r\n       #panel=\"bbSlidingPanel\"\r\n       #collapsedItems \r\n       slideDirection=\"down\"\r\n       #panel=\"bbSlidingPanel\">\r\n  </div>\r\n</div>`,\r\n  styles: [`div.displayed{flex-grow:1;flex-direction:row;flex-shrink:0;display:flex}div.menu-container{position:relative;height:inherit;flex-direction:row;display:flex;align-items:center;flex-shrink:0;flex-grow:1}div.bb-sliding-panel{display:flex;flex-direction:column;flex-grow:1;position:absolute;right:0;top:100%}div.hidden{visibility:hidden}`],\r\n  host:{\r\n    '(window:resize)': \"onWindowResize()\",\r\n  },\r\n  exportAs: \"bbCollapsingMenu\"\r\n})\r\nexport class BBCollapsingMenu {\r\n  @HostBinding('class.bb-collapsing-menu') applyHostClass = true;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should  \r\n   * open based on a click event or not.\r\n   */\r\n  @Input() toggleOnClick = true;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should open \r\n   * on mouse over or not.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should close\r\n   * When clicked outside the toggle or panel or not.\r\n   */\r\n  @Input() closeOnClickOutside = true;\r\n\r\n  @ContentChildren(BBMenuItem, {read:ElementRef, descendants: false}) \r\n    items: QueryList<ElementRef>;\r\n  @ViewChild('displayedItems', {read:ElementRef}) \r\n    displayedItems: ElementRef;\r\n  @ViewChild('collapsedItems', {read:ElementRef}) \r\n    collapsedItems: ElementRef;\r\n  @ViewChild('toggle', {read:ElementRef}) \r\n    toggle: ElementRef;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  /**\r\n   * Per issue 10098 ContentChildren currently also adds the host component\r\n   * to a QueryList that it satisfies making it necessary to filter the \r\n   * host component out of it's own list in case someone wants to nest\r\n   * a collapsing menu inside another BB component that uses BBMenuItems.\r\n   * \r\n   * https://github.com/angular/angular/issues/10098#issuecomment-235157642\r\n   */\r\n  private get itemElements(): ElementRef[] {\r\n    return this.items.toArray()\r\n      .filter(el=> el.nativeElement !== this.hostElementRef.nativeElement);\r\n  }\r\n\r\n  private get hostDiv(): HTMLDivElement {\r\n    return this.hostElementRef.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get displayedDiv(): HTMLDivElement {\r\n    return this.displayedItems.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get collapsedDiv(): HTMLDivElement {\r\n    return this.collapsedItems.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get toggleDiv(): HTMLDivElement {\r\n    return this.toggle.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  hasOverflow = false;\r\n\r\n  constructor(\r\n    private renderer: Renderer, \r\n    private hostElementRef: ElementRef,\r\n    private zone: NgZone) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.calculateOverflow();\r\n  }\r\n\r\n  /**\r\n   * Determine which, if any, items need to be \r\n   * moved into the collapsed panel when they \r\n   * overflow the menu width.\r\n   */\r\n  private calculateOverflow() {\r\n      this.renderer.projectNodes(this.displayedDiv, \r\n        this.itemElements.map(el=>{ return el.nativeElement }));\r\n\r\n      if(this.areDisplayedItemsToWide()) {\r\n\r\n        this.zone.run(()=>{\r\n          setTimeout(()=>{\r\n            this.hasOverflow = true})});\r\n\r\n        const menuCalcedRight = \r\n          (this.hostDiv.offsetLeft + \r\n          this.hostDiv.offsetWidth - \r\n          this.toggleDiv.offsetWidth);\r\n\r\n        let firstOverflowIndex = Number.POSITIVE_INFINITY;\r\n        let overflowAmount = 0;\r\n                   \r\n        // find the first item that is outside the menu's size - toggle size\r\n        for(let i = 0; i < this.itemElements.length; i++) {\r\n          const ele = (this.itemElements[i].nativeElement as HTMLElement);\r\n          const eleCalcedRight = (ele.offsetLeft + this.hostDiv.offsetLeft + ele.offsetWidth);\r\n\r\n          // calculate how much an item overflows the container\r\n          // taking the toggles width into account.\r\n          overflowAmount = eleCalcedRight - menuCalcedRight;\r\n\r\n          if(overflowAmount > 0) {\r\n            firstOverflowIndex = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // all items are collapsed\r\n        if (firstOverflowIndex == 0) {\r\n            this.renderer.projectNodes(this.collapsedDiv,\r\n              this.itemElements.map(el=>{return el.nativeElement}));\r\n        }\r\n\r\n        // the overflow items make enough room for the toggle\r\n        else {\r\n            this.renderer.projectNodes(this.collapsedDiv,\r\n              this.itemElements\r\n                .filter((el,index)=>{\r\n                  return (index >= firstOverflowIndex)})\r\n                .map(el=>{return el.nativeElement}));\r\n        }\r\n      }\r\n      else {\r\n        this.zone.run(()=>{\r\n          setTimeout(()=>{\r\n            this.hasOverflow = false})});\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Determine if the menu content width is larger than the menu width\r\n   */\r\n  private areDisplayedItemsToWide() {\r\n    return this.displayedDiv.getBoundingClientRect().width > \r\n      this.hostDiv.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Event handlers\r\n   */\r\n\r\n  onWindowResize() {\r\n    this.calculateOverflow();\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBCommonModule } from '../common/common.module';\r\nimport { BBCollapsingMenu } from './collapsing-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBCommonModule,\r\n    BBSlidingPanelModule\r\n  ],\r\n  declarations: [BBCollapsingMenu],\r\n  exports: [BBCollapsingMenu]\r\n})\r\nexport class BBCollapsingMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBCollapsingMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","import { \r\n    Component, \r\n    OnInit, \r\n    Input, \r\n    Output,\r\n    EventEmitter,\r\n    ViewChild, \r\n    ElementRef } from '@angular/core';\r\nimport { Observable ,  fromEvent } from 'rxjs';\r\nimport { map ,  debounceTime ,  distinctUntilChanged } from 'rxjs/operators';\r\nimport { BBMultiSelectItem } from './multi-select-item.interface';\r\n\r\n@Component({\r\n    selector: 'div[bb-multi-select]',\r\n    template: `<input class=\"selections-filter\" #filter [attr.placeholder]=\"placeholderText\"/>\r\n<div class=\"container-labels\">\r\n    <span>Items</span><span>Selected</span>\r\n</div>\r\n<div class=\"selections-container\">\r\n    <div class=\"choices\">\r\n        <ul>\r\n            <li *ngFor=\"let choice of choices\">\r\n                <a (click)=\"onChoiceClicked(choice)\">{{choice.text}}</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"selections\">\r\n        <ul>\r\n            <li *ngFor=\"let selection of selections\">\r\n                <a (click)=\"onSelectionClicked(selection)\">{{selection.text}}</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>`,\r\n    styles: [`:host div{display:flex;flex-direction:column}input.selections-filter{justify-content:center}div.container-labels,div.selections-container{width:inherit;display:flex;flex-direction:row;justify-content:space-between}.selections-container ul{padding-left:0}.choices ul,.selections ul{list-style:none}div.container-labels{border-bottom:1px solid #000}`],\r\n})\r\nexport class BBMultiSelectComponent implements OnInit {\r\n    @Input() placeholderText = \"Search...\";\r\n    @Input() filterChangeDelayms = 200;\r\n\r\n    @Input() selectionItems: BBMultiSelectItem[];\r\n\r\n    get choices(): BBMultiSelectItem[] {\r\n        return this.selectionItems.filter(item=>{ return !item.selected});\r\n    }\r\n\r\n    get selections(): BBMultiSelectItem[] {\r\n        return this.selectionItems.filter(item=>{ return item.selected});\r\n    }\r\n\r\n    @ViewChild('filter') filterInput: ElementRef;\r\n\r\n    @Output() itemSelected = new EventEmitter<BBMultiSelectItem>();\r\n    @Output() itemUnselected = new EventEmitter<BBMultiSelectItem>();\r\n\r\n    constructor() {\r\n        console.log('Warning this component is still under heavy development.');\r\n        console.log('It isn\\'t completely functional yet and is subject to change.');\r\n    }\r\n\r\n    ngOnInit() { \r\n        fromEvent(this.filterInput.nativeElement, 'keyup')\r\n        .pipe(\r\n            map((event:KeyboardEvent)=>(event.target as HTMLInputElement).value),\r\n            debounceTime(this.filterChangeDelayms),\r\n            distinctUntilChanged())\r\n        .subscribe(\r\n            filterText=> this.filterItems(filterText)\r\n        );\r\n\r\n        // temp testing code\r\n        if(!this.selectionItems) {\r\n            this.selectionItems = [\r\n                {\r\n                    text: 'Name',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Position',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Year of Birth',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Rookie Season',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Height',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Weight',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Forty Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Bench Weight',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Vertical Jump',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Broad Jump',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Shuttle Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Cone Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Draft Position',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'College',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'College Division',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Current Team',\r\n                    payload: {},\r\n                    selected: false,\r\n                }\r\n            ];\r\n        }\r\n\r\n        this.selections.push(this.choices[1]);\r\n    }\r\n\r\n    onChoiceClicked(item: BBMultiSelectItem) {\r\n        item.selected = true;\r\n        this.itemSelected.emit(item);\r\n    }\r\n\r\n    onSelectionClicked(item: BBMultiSelectItem) {\r\n        item.selected = false;\r\n        this.itemUnselected.emit(item);\r\n    }\r\n\r\n    filterItems(text: string) {\r\n        console.log(text);\r\n    }\r\n}\r\n\r\n\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBMultiSelectComponent } from './multi-select.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBMultiSelectComponent\r\n  ],\r\n  \r\n  exports: [\r\n    BBMultiSelectComponent\r\n  ]\r\n})\r\nexport class BBMultiSelectModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBMultiSelectModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import { Subscription } from 'rxjs';\r\n\r\nexport function closeSubscription(sub: Subscription) {\r\n    if(sub && !sub.closed) {\r\n        sub.unsubscribe();\r\n    }\r\n}","export const bbDnDType = \"bb/dnd\";","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class BBDragAndDropService {\n\n  constructor() { }\n\n}\n","import { \n  Directive, \n  OnInit, \n  ElementRef, \n  ViewRef, \n  ViewContainerRef, \n  TemplateRef, \n  EmbeddedViewRef, \n  OnDestroy,\n  EventEmitter,\n  Output} from '@angular/core';\nimport { Observable ,  Subscription ,  fromEvent } from 'rxjs';\nimport { bbDnDType } from './../dnd.const';\nimport { closeSubscription } from '../../common';\nimport { BBDragAndDropService } from '../drag-and-drop.service';\nimport { BBVector, BBDragStartEvent } from './../dnd.models';\n\n/**\n * BB Draggable Structural Directive\n */\n@Directive({\n  selector: '[bbDraggable]'\n})\nexport class BBDraggableDirective implements OnInit, OnDestroy {\n  @Output() dragStartedOnView = new EventEmitter<BBDragStartEvent>();\n  @Output() dragEndedOnView = new EventEmitter<ViewRef>();\n  \n  /**\n   * \n   */\n  public get isBeingDragged() {\n    return this._isBeingDragged;\n  }\n\n  /**\n   * \n   */\n  public get draggableTemplateRef() {\n    return this.templateRef;\n  }\n\n  /**\n   * \n   */\n  private draggableViewRef: ViewRef;\n\n  /**\n   * \n   */\n  private embeddedTemplateRef: EmbeddedViewRef<any>;\n\n  /**\n   * \n   */\n  private dragStartSubscription: Subscription;\n\n  /**\n   * \n   */\n  private dragEndSubscription: Subscription;\n\n  /**\n   * \n   */\n  private set isDragged(dragged: boolean) {\n    this._isBeingDragged = dragged;\n\n    if(this._isBeingDragged) {\n      //this.dragStartedOnView.next(this.draggableViewRef);\n      //this.viewContainer.detach();\n    } else {\n      //this.dragEndedOnView.next(this.draggableViewRef);\n      //this.viewContainer.insert(this.draggedViewRef);\n    }\n  }\n\n  /**\n   * \n   */\n  private _isBeingDragged = false;\n\n  /**\n   * \n   */\n  private context = new DraggableContext();\n\n  /**\n   * \n   * @param dndService \n   * @param templateRef \n   */\n  constructor(\n    private dndService: BBDragAndDropService,    \n    private templateRef: TemplateRef<any>\n  ) {\n  }\n\n  /**\n   * \n   */\n  ngOnInit() {\n    /*\n    this.embeddedTemplateRef = \n      this.viewContainer.createEmbeddedView(this.templateRef);\n    this.registerDragAndDropEvents(this.embeddedTemplateRef.rootNodes[0]);\n    this.draggedViewRef = this.viewContainer.get(0);\n    */\n  }\n\n  /**\n   * \n   */\n  ngOnDestroy() {\n    closeSubscription(this.dragStartSubscription);\n    closeSubscription(this.dragEndSubscription);\n  }\n\n  /**\n   * \n   * @param target \n   */\n  registerDragAndDropEvents(view: EmbeddedViewRef<any>) {\n    this.draggableViewRef = view;\n    let target = view.rootNodes[0] as HTMLElement;\n\n    target.setAttribute(\"draggable\",\"true\");\n\n    this.dragStartSubscription = \n      fromEvent<DragEvent>(target,\"dragstart\")\n        .subscribe((event: DragEvent)=>{\n          event.dataTransfer.setData(bbDnDType,'bbdraggable');\n          //event.dataTransfer.effectAllowed = \"move\";\n          //event.dataTransfer.setDragImage(\n          //  target.cloneNode(true) as HTMLElement,0,0);\n\n          let rect = event.srcElement.getBoundingClientRect();\n          let y = rect.top + (rect.height / 2);\n          let x = rect.left + (rect.width / 2);\n          console.log(x,y);\n\n          let e: BBDragStartEvent = {\n            view: this.draggableViewRef,\n            mouseOffset: {\n              offsetX: event.clientX - x,\n              offsetY: event.clientY - y\n            }\n          }\n\n          /*\n          let center = document.createElement(\"div\") as HTMLDivElement;\n          center.style.position = 'absolute';\n          center.style.left = `${mouseOffset.offsetX}px`;\n          center.style.top = `${mouseOffset.offsetY}px`;\n          center.style.borderRadius= \"20px\"\n          center.style.height = \"20px\";\n          center.style.width= \"20px\";\n          \n          let i = new Image();\n          \n          let clone = event.srcElement.cloneNode(true) as HTMLLIElement;\n          clone.appendChild(center);\n          i.appendChild(clone);\n          console.log(i);\n          event.dataTransfer.setDragImage(\n             i,event.pageX, event.pageY);\n          */\n\n          /*\n          event.dataTransfer.setDragImage(\n            event.srcElement,event.clientX, event.clientY);\n          */\n\n          /* Chrome calls dragend if the dom is changed during  */\n          /* drag start so in order to not call dragend         */\n          /* immediately we have to fire the dom manipulations  */\n          /* outside of the event                               */\n          setTimeout(()=>{\n            this.dragStartedOnView.next(e)\n          });\n        },\n        err=>console.log(err),\n        ()=>{});\n\n    this.dragEndSubscription = \n    fromEvent(target,\"dragend\")\n        .subscribe((event: DragEvent)=>{\n          //this.isDragged = false;\n          this.dragEndedOnView.next(this.draggableViewRef);\n        },\n        err=>console.log(err),\n        ()=>{});\n  }\n\n\n}\n\nexport class DraggableContext {\n  public implicit$: any = null;\n}\n","import { \n  Directive, \n  OnInit, \n  QueryList, \n  AfterContentInit, \n  ContentChildren,  \n  ElementRef,\n  ViewContainerRef,\n  Component,\n  ViewChild,\n  TemplateRef,\n  EmbeddedViewRef,\n  ViewRef,\n  OnDestroy} from '@angular/core';\nimport { BBDraggableDirective } from '../draggable/draggable.directive';\nimport { Observable ,  Subscription ,  fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { bbDnDType } from './../dnd.const';\nimport { BBDragAndDropService } from '../drag-and-drop.service';\nimport { BBDragStartEvent, BBVector } from '../dnd.models';\n\n@Component({\n  selector: '[bbDnDContainer]',\n  template: `<ng-container #dndContainer></ng-container>\r\n\r\n<ng-content></ng-content>\r\n`,\n  styles: [``]\n})\nexport class BBDragAndDropContainerComponent implements OnInit, AfterContentInit, OnDestroy {\n  @ContentChildren(BBDraggableDirective) draggablesQL: QueryList<BBDraggableDirective>;\n  @ViewChild(\"dndContainer\", {read: ViewContainerRef}) dndContainer: ViewContainerRef;\n  \n  private draggingMouseOffset: BBVector;\n  private dragStartEvent: BBDragStartEvent;\n  private draggableEmbeddedViews: EmbeddedViewRef<any>[] = [];\n  private dragSubscriptions: Subscription[] = [];\n\n  private readonly DefaultDragLocationTarget: DragLocationTarget = {\n    lowIndex: -1, \n    highIndex: -1,\n    viewBeingDragged: null\n  };\n\n  private dragLocation : DragLocationTarget = this.DefaultDragLocationTarget;\n  \n  constructor(\n    private dndService: BBDragAndDropService,\n    private hostElementRef: ElementRef    \n  ) {\n    console.warn('BB Drag and Drop is still under development.')\n  }\n\n  ngOnInit() {\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragenter\")\n      .subscribe(this.onDragEnter));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragover\")\n      .pipe(\n        debounceTime(50))\n      .subscribe(this.onDragOver));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragover\")\n      .subscribe((e:Event)=>\n        e.preventDefault()));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"drop\")\n      .subscribe(this.onDrop));\n  }\n\n  ngAfterContentInit() {\n    this.dragSubscriptions.push(\n    this.draggablesQL\n      .changes\n      .subscribe((draggables:BBDraggableDirective[])=>{\n      }));\n    console.log(\"container\");\n    console.log(this.dndContainer);\n    this.draggablesQL.map(this.initDraggable);\n  }\n\n  ngOnDestroy() {\n    this.dragSubscriptions.forEach(sub=>{\n      if(!sub.closed) {\n        sub.unsubscribe();\n      }\n    })\n  }\n\n  /**\n   * \n   * @param draggable \n   * @param index \n   */\n  initDraggable = (draggable: BBDraggableDirective, index: number) => {\n    let embeddedViewRef = \n      this.dndContainer.createEmbeddedView(draggable.draggableTemplateRef)\n    this.draggableEmbeddedViews.push(embeddedViewRef);\n    draggable.registerDragAndDropEvents(embeddedViewRef);\n    this.dragSubscriptions.push(\n      draggable.dragStartedOnView.subscribe(this.onDragStart));\n    this.dragSubscriptions.push(\n      draggable.dragEndedOnView.subscribe(this.onDragEnd));\n  }\n\n  /**\n   * \n   * @param event \n   */\n  onDragStart = (event: BBDragStartEvent) => {\n    this.dragStartEvent = event;\n    this.draggingMouseOffset = event.mouseOffset;\n    let viewIndex = this.dndContainer.indexOf(event.view);\n    this.dndContainer.detach(viewIndex);\n    this.draggableEmbeddedViews.splice(viewIndex,1);\n  }\n\n  /**\n   * \n   * @param view \n   */\n  onDragEnd = (view: EmbeddedViewRef<any>) => {\n    //this.dndContainer.insert(view);\n    return;\n  }\n\n  onDragEnter = (event:DragEvent) => {\n    console.log(\"dragenter\");\n    event.dataTransfer.dropEffect = \"move\";\n    event.preventDefault();\n  }\n\n  onDragOver = (event:DragEvent) => {\n    console.log(\"dragover\");\n    // console.log(event.dataTransfer.types);\n    let shortestDistance = Number.MAX_SAFE_INTEGER;\n    let closestView: EmbeddedViewRef<any> = null;\n    let closestIndex = 0; \n    let nextClosestIndex = 0;\n\n    this.draggableEmbeddedViews\n      /*\n       * TODO: Long term optimization maybe use the item\n       * filtered out's index as the starting location\n       * for further hit tests since we know that it\n       * is the one being dragged.  Ie.  If Index 4 is\n       * filtered out then start hit tests at index 3 \n       * and 5 instead of starting hit tests at index \n       * 0 and checking all items.\n       */\n      .filter(view=>view!==this.dragStartEvent.view)\n      .map(view=>{\n        let element = (view.rootNodes[0] as HTMLElement);\n        let rect = element.getBoundingClientRect();\n        return {\n          view: view,\n          x: rect.left + (rect.width / 2),\n          y: rect.top + (rect.height / 2)\n        }})\n      .forEach((centerCoordinates, i) =>{\n        let dy = this.calculate1DimensionDistance(\n          centerCoordinates.y,\n          event.clientY + this.dragStartEvent.mouseOffset.offsetY);\n\n        console.log(`${i} = ${dy} y's: ${centerCoordinates.y} - ${event.clientY} + ${this.dragStartEvent.mouseOffset.offsetY}`)\n          \n        let distance = Math.abs(dy);\n\n        if(distance < shortestDistance) {\n          shortestDistance = distance;\n          closestView = centerCoordinates.view;\n          closestIndex = i;\n\n          // determine which side of the closest draggable\n          // the draggable being dragged is on and set the\n          // next closest accordingly\n          nextClosestIndex = (dy < 0)? closestIndex + 1: closestIndex - 1;\n\n          this.dragLocation = {\n            lowIndex: Math.min(closestIndex,nextClosestIndex),\n            highIndex: Math.max(closestIndex,nextClosestIndex),\n            viewBeingDragged: this.dragStartEvent.view\n          };\n        }\n      });\n\n    event.preventDefault();\n\n    /* this signifies that the container is a valid drop target  */\n    /* TODO: doesn't work at the moment? the BBDnDType is never */\n    /* properly attached to the event even though I am setting   */\n    /* the type inside the draggable directive event...          */\n    /*\n    if(event.dataTransfer.types.includes(bbDnDType)) {\n      console.log('bb transfer detected');\n    }\n    */\n  }\n\n  onDrop = (event:DragEvent) => {\n    this.dndContainer.insert(\n      this.dragLocation.viewBeingDragged,\n      this.dragLocation.highIndex);\n\n    this.draggableEmbeddedViews.splice(\n      this.dragLocation.highIndex,\n      0,\n      this.dragLocation.viewBeingDragged as EmbeddedViewRef<any>);\n  }\n\n  /**\n   * \n   * @param p1 \n   * @param p2 \n   */\n  private calculate1DimensionDistance(p1: number, p2: number) {\n    return p1 - p2;\n  }\n\n  /**\n   * \n   * @param x1 \n   * @param x2 \n   * @param y1 \n   * @param y2 \n   */\n  private calculate2DimensionDistance(x1: number,x2: number,y1: number,y2: number) {\n    return Math.sqrt(\n      this.calculate1DimensionDistance(x1,x2)**2 + \n      this.calculate1DimensionDistance(y1,y2)**2);\n  }\n\n    \n  \n}\n\nexport interface DragLocationTarget {\n  lowIndex: number;\n  highIndex: number;\n  viewBeingDragged: ViewRef;\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBDragAndDropContainerComponent } from './drag-and-drop-container/drag-and-drop-container.component';\nimport { BBDraggableDirective } from './draggable/draggable.directive';\nimport { BBDragAndDropService } from './drag-and-drop.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    BBDragAndDropContainerComponent,\n    BBDraggableDirective\n  ],\n  exports: [\n    BBDragAndDropContainerComponent,\n    BBDraggableDirective\n  ],\n  providers: [BBDragAndDropService]\n})\nexport class BBDragAndDropComponentModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDragAndDropComponentModule,\n      providers: []\n    };\n  }\n }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TabService {\n  activeTab: string = '';\n  tabsets = {};\n\n  constructor() { }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { TabService } from './tab.service';\n\n@Directive({\n  selector: '[bbTab]'\n})\nexport class TabDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public tabService: TabService\n  ) { }\n\n  @Input('bbtab') tabName: string;\n  @Input('bbtabset') tabset: string;\n  @Input('bbactive') active: boolean;\n  @Input('bbactiveclass') activeClass: string;\n\n  @Output() bbshowstart = new EventEmitter();\n  @Output() bbshowend = new EventEmitter();\n\n  ngOnInit() {\n      if (this.active) {\n          this.bbshowstart.emit(this.tabName);\n          this.tabService.tabsets[this.tabset] = {};\n          this.setActive();\n      }\n  }\n\n  @HostListener('click', ['$event']) onClick(event) {\n      this.bbshowstart.emit(this.tabName);\n      event.preventDefault();\n      this.setActive();\n  }\n\n  setActive() {\n      let parentElement = this.el.nativeElement.parentNode;\n      let child = this.el.nativeElement.children[0];\n\n      let activeClassElement = 'none';\n      let activeClassTarget = 'none';\n\n      // Find out if this element, the parent element, or child elements have an active class set.\n      // Order of precedence: Parent, tab, child.\n      if (parentElement.hasAttribute('bbactiveclass')) {\n          activeClassElement = 'parent';\n          activeClassTarget = parentElement.attributes['bbtarget'].value;\n      }\n\n      if (this.activeClass) {\n          activeClassElement = 'tab';\n      }\n\n      if (child) {\n          if (child.hasAttribute('bbactiveclass')) {\n              activeClassElement = 'child';\n          }\n      }\n\n      // If the tab element itself has it set, apply it.\n      if (activeClassElement === 'tab') {\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  this.renderer.removeClass(parentElement.children[i], this.activeClass);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          this.renderer.addClass(this.el.nativeElement, this.activeClass);\n      } else if (activeClassElement === 'child') {\n          let childActiveClass = child.attributes.bbactiveclass.value;\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  this.renderer.removeClass(parentElement.children[i].children[0], childActiveClass);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          this.renderer.addClass(child, childActiveClass);\n\n      } else if (activeClassElement === 'parent') {\n          let parentActiveClass = parentElement.attributes.bbactiveclass.value;\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  if (activeClassTarget === 'tab') {\n                      this.renderer.removeClass(parentElement.children[i], parentActiveClass);\n                  } else if (activeClassTarget === 'child') {\n                      this.renderer.removeClass(parentElement.children[i].children[0], parentActiveClass);\n                  }\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          if (activeClassTarget === 'tab') {\n              this.renderer.addClass(this.el.nativeElement, parentActiveClass);\n          } else if (activeClassTarget === 'child') {\n              this.renderer.addClass(this.el.nativeElement.children[0], parentActiveClass);\n          }\n      } else {\n          // There are no child elements and bbactiveClass isn't set.\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n      }\n      this.tabService.tabsets[this.tabset]['activeTab'] = this.tabName;\n      this.bbshowend.emit(this.tabName);\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\nimport { TabService } from './tab.service';\n\n@Directive({\n  selector: '[bbTabContent]'\n})\nexport class TabContentDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public tabService: TabService\n  ) { }\n\n  @Input('bbtabcontent') name: string;\n  @Input('bbtabset') tabset: string;\n\n  ngOnInit() {\n      this.setVisibility();\n  }\n\n  ngDoCheck() {\n      this.setVisibility();\n  }\n\n  setVisibility() {\n      let display = this.tabService.tabsets[this.tabset].activeTab === this.name ? 'block' : 'none';\n      this.renderer.setStyle(this.el.nativeElement, 'display', display);\n}\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TabService } from './tab.service';\nimport { TabDirective } from './tab.directive';\nimport { TabContentDirective } from './tab-content.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  \n  declarations: [\n    TabDirective,\n    TabContentDirective\n  ],\n  \n  exports: [\n    TabDirective,\n    TabContentDirective\n  ]\n})\nexport class BBTabModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBTabModule,\n      providers: [TabService]\n    };\n  }\n }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DragAndDropService {\n  el: any;\n  dropzoneIndex: number;\n  droppableIndex: number;\n  model: Array<any>;\n  dropzones: Array<string> = [];\n\n  constructor() { }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { DragAndDropService } from './drag-and-drop.service';\n\n@Directive({\n  selector: '[bbDropper]'\n})\nexport class DropperDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public dndService: DragAndDropService\n  ) {\n      el.nativeElement.draggable = true;\n      el.nativeElement.dragstart = this.dragstart;\n      el.nativeElement.dragend = this.dragend;\n  }\n\n  ngOnInit() {\n      if (this.bbdropperClass) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropperClass);\n      }\n  }\n\n  @Input('bbdropper') name: string;\n  @Input('bbdropperClass') bbdropperClass: string;\n  @Input('bbholdingClass') bbholdingClass: string;\n  @Input('bbpayload') bbpayload:string;\n  @Input('bbdropperId') bbdropperId: string;\n  @Output() bbstart = new EventEmitter();\n  @Output() bbend = new EventEmitter();\n\n  @HostListener('dragstart', ['$event']) dragstart(event:any) {\n      if (this.bbholdingClass !== undefined) {\n          this.renderer.addClass(this.el.nativeElement, this.bbholdingClass);\n      }\n      event.dataTransfer.setData('text/plain', this.bbpayload || null);\n      this.dndService.el = this.el;\n      if(this.bbdropperId) {\n          this.bbstart.emit(this.bbdropperId);\n      }\n  }\n\n  @HostListener('dragend') dragend() {\n      if (this.bbholdingClass !== undefined) {\n          this.renderer.removeClass(this.el.nativeElement, this.bbholdingClass);\n      }\n      if(this.bbdropperId) {\n          this.bbstart.emit(this.bbdropperId);\n      }\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, HostListener, EventEmitter } from '@angular/core';\nimport { DragAndDropService } from './drag-and-drop.service';\n\n@Directive({\n  selector: '[bbDropZone]'\n})\nexport class DropZoneDirective {\n  constructor(\n    public el: ElementRef,\n    public dndService: DragAndDropService,\n    public renderer: Renderer2\n  ) { }\n\n  ngOnInit() {\n      if (this.bbdropzoneClass !== undefined) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (!this.dndService.dropzones.includes(this.name)) {\n          this.dndService.dropzones.push(this.name);\n      }\n  }\n\n  @Input('bbdropzone') name: string;\n\n  @Input('bbdropzoneClass') bbdropzoneClass: string;\n  @Input('bbdropzoneHoverClass') bbdropzoneHoverClass: string;\n  @Input('bbdropzoneId') bbdropzoneId: string;\n  @Output() bbdata = new EventEmitter();\n  @Output() bbenter = new EventEmitter();\n  @Output() bbleave = new EventEmitter();\n  @Output() bbdrop = new EventEmitter();\n\n  @HostListener('dragover', ['$event']) dragover(event) {\n      event.preventDefault();\n  }\n\n  @HostListener('dragenter') dragenter() {\n      if (this.bbdropzoneHoverClass) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (this.bbdropzoneId) {\n          this.bbenter.emit(this.bbdropzoneId);\n      }\n  }\n\n  @HostListener('dragleave') dragleave() {\n      if (this.bbdropzoneHoverClass) {\n          this.renderer.removeClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (this.bbdropzoneId) {\n          this.bbleave.emit(this.bbdropzoneId);\n      }\n  }\n\n  @HostListener('drop', ['$event']) drop(event) {\n      event.preventDefault();\n      this.renderer.removeClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n\n      let dropped = this.dndService.el.nativeElement;\n      if (dropped.attributes.bbdropper.value === this.name) {\n          this.renderer.removeChild(this.dndService.el.nativeElement.parentNode, this.dndService.el.nativeElement);\n          this.renderer.appendChild(this.el.nativeElement, this.dndService.el.nativeElement);\n          if (dropped.attributes.bbpayload) {\n              this.bbdata.emit(dropped.attributes.bbpayload.value);\n          }\n      }\n      if (this.bbdropzoneId) {\n          this.bbdrop.emit(this.bbdropzoneId);\n      }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DragAndDropService } from './drag-and-drop.service';\nimport { DropperDirective } from './dropper.directive';\nimport { DropZoneDirective } from './drop-zone.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    DropperDirective,\n    DropZoneDirective,\n  ],\n  exports: [\n    DropperDirective,\n    DropZoneDirective,\n  ]\n})\nexport class BBDragAndDropModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDragAndDropModule,\n      providers: [DragAndDropService]\n    };\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[bbSortable]'\n})\nexport class SortableDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2\n  ) { }\n\n  @Input('bbsortable') name: string;\n  @Input('bboptions') options: any;\n\n  // Event emitters\n  @Output() orderChanged = new EventEmitter();\n  @Output() bbstart = new EventEmitter();\n  @Output() bbend = new EventEmitter();\n  @Output() bbenter = new EventEmitter();\n  @Output() bbleave = new EventEmitter();\n  @Output() bbdrop = new EventEmitter();\n\n  draggedItem:number;\n  dropTarget:any;\n\n  ngOnInit() {\n      if (!this.options) {\n          this.options = {};\n      }\n  }\n\n  ngAfterContentInit() {\n      this.initChildren();\n  }\n\n  // Dropper listeners\n  @HostListener('dragstart', ['$event']) dragstart(event) {\n      event.dataTransfer.setData('text/plain', event.target['bbvalue'] || null);\n      if (this.options.holdingClass !== undefined) {\n          this.renderer.addClass(event.target, this.options.holdingClass);\n      }\n\n      this.draggedItem = +event.target['bbsortable-index'];\n      this.bbstart.emit(this.draggedItem);\n  }\n\n  @HostListener('dragend', ['$event']) dragend(event) {\n      if (this.options.holdingClass !== undefined) {\n          this.renderer.removeClass(event.target, this.options.holdingClass);\n      }\n      this.bbend.emit(this.draggedItem);\n  }\n\n  // Dropzone listeners\n  @HostListener('dragover', ['$event']) dragover(event:any) {\n      event.preventDefault();\n  }\n\n  @HostListener('dragenter', ['$event']) dragenter(event:any) {\n      if (this.options.hoverClass !== undefined) {\n          if (event.target['bbsortable-name'] === this.name && event.target['bbsortable-index'] !== this.draggedItem) {\n              this.renderer.addClass(event.target, this.options.hoverClass);\n          } else {\n              this.updateDropzoneClass(event, this.options.hoverClass, true);\n          }\n      }\n      this.bbenter.emit(+event.target['bbsortable-index']);\n  }\n\n  @HostListener('dragleave', ['$event']) dragleave(event:any) {\n      if (this.options.hoverClass !== undefined) {\n          if (event.target['bbsortable-name'] === this.name && event.target['bbsortable-index'] !== this.draggedItem) {\n              this.renderer.removeClass(event.target, this.options.hoverClass);\n          } else {\n              this.updateDropzoneClass(event, this.options.hoverClass, false);\n          }\n      }\n      this.bbleave.emit(+event.target['bbsortable-index']);\n  }\n\n  @HostListener('drop', ['$event']) drop(event:any) {\n      event.preventDefault();\n\n      let doDrop:boolean = false;\n\n      let dropTarget:any = event.target;\n      if (dropTarget['bbsortable-name'] !== this.name) {\n          while (dropTarget.parentNode !== null) {\n              if (dropTarget.parentNode['bbsortable-name'] === this.name) {\n                  dropTarget = dropTarget.parentNode;\n                  doDrop = true;\n                  break;\n              } else {\n                  dropTarget = dropTarget.parentNode\n              }\n          }\n      } else {\n          doDrop = true;\n      }\n\n      if (doDrop) {\n          if (this.options.hoverClass !== undefined) {\n              this.renderer.removeClass(dropTarget, this.options.hoverClass);\n          }\n          let draggedItem = this.draggedItem;\n          let newPosition = dropTarget['bbsortable-index'];\n\n          if (draggedItem > newPosition) {\n              for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n                  if (i >= newPosition && i < draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i + 1);\n                  }\n\n                  if (i === draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', newPosition);\n                  }\n              }\n          } else {\n              for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n                  if (i > draggedItem && i <= newPosition) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i - 1);\n                  }\n\n                  if (i === draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', newPosition);\n                  }\n              }\n          }\n          this.bbdrop.emit(+newPosition);\n          this.orderChanged.emit({ draggedItem, newPosition });\n      }\n  }\n\n  initChildren() {\n      for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'draggable', true);\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i);\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-name', this.name);\n\n          if (this.options.restingClass) {\n              this.renderer.addClass(this.el.nativeElement.children[i], this.options.restingClass);\n          }\n      }\n  }\n\n  updateDropzoneClass(event:any, cssClass:string, adding:boolean) {\n      let parentNode = event.target.parentNode;\n      while (parentNode !== null) {\n          if (parentNode['bbsortable-name'] === this.name && parentNode['bbsortable-index'] !== this.draggedItem) {\n              if (adding && !parentNode.classList.contains(cssClass)) {\n                  this.renderer.addClass(parentNode, cssClass);\n              } else {\n                  this.renderer.removeClass(parentNode, cssClass);\n              }\n              break;\n          } else {\n              parentNode = parentNode.parentNode;\n          }\n      }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SortableDirective } from './sortable.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SortableDirective,\n  ],\n  exports: [\n    SortableDirective,\n  ]\n})\nexport class BBSortableModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBSortableModule,\n      providers: []\n    };\n  }\n }\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { BBSlidingPanelModule } from './sliding-panel/index';\r\nimport { BBDropdownMenuModule } from './dropdown-menu/index';\r\nimport { BBSlideoutMenuModule } from './slideout-menu/index';\r\nimport { BBDropdownInputModule } from './dropdown-input/index';\r\nimport { BBHamburgerMenuModule } from './hamburger-menu/index';\r\nimport { BBCollapsingMenuModule } from './collapsing-menu/index';\r\nimport { BBMultiSelectModule } from './multi-select/index';\r\nimport { BBCommonModule } from './common/index';\r\nimport { BBDragAndDropComponentModule } from './drag-and-drop-component/index';\r\nimport { BBTabModule } from './tab/index';\r\nimport { BBDragAndDropModule } from './drag-and-drop/index';\r\nimport { BBSortableModule } from './sortable/index';\r\n\r\nconst BB_MODULES = [\r\n    BBSlidingPanelModule,\r\n    BBDropdownMenuModule,\r\n    BBSlideoutMenuModule,\r\n    BBDropdownInputModule,\r\n    BBHamburgerMenuModule,\r\n    BBCollapsingMenuModule,\r\n    BBMultiSelectModule,\r\n    BBCommonModule,\r\n    BBDragAndDropComponentModule,\r\n    BBTabModule,\r\n    BBDragAndDropModule,\r\n    BBSortableModule,\r\n];\r\n\r\n/**\r\n * This module only exists to allow the demo \r\n * to import the entire library quickly.  It \r\n * should not be used by consumers of the \r\n * library and is not exported as part of \r\n * the distrbuted package.\r\n */\r\n@NgModule({\r\n  imports: [\r\n    BBSlidingPanelModule.forRoot(),\r\n    BBDropdownMenuModule.forRoot(),\r\n    BBSlideoutMenuModule.forRoot(),\r\n    BBDropdownInputModule.forRoot(),\r\n    BBHamburgerMenuModule.forRoot(),\r\n    BBCollapsingMenuModule.forRoot(),\r\n    BBMultiSelectModule.forRoot(),\r\n    BBCommonModule.forRoot(),\r\n    BBDragAndDropComponentModule.forRoot(),\r\n    BBTabModule.forRoot(),\r\n    BBDragAndDropModule.forRoot(),\r\n    BBSortableModule.forRoot(),\r\n    \r\n  ],\r\n  exports: BB_MODULES\r\n})\r\nexport class BBRootModule { }\r\n\r\n@NgModule({\r\n  imports: BB_MODULES,\r\n  exports: BB_MODULES,\r\n})\r\nexport class BearBonesModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {ngModule: BBRootModule, providers: []};\r\n  }\r\n}\r\n"]}