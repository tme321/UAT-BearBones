{"version":3,"sources":["ng://@uat/bearbones/lib/sliding-panel/sliding-panel.enums.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.animations.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.component.ts","ng://@uat/bearbones/lib/sliding-panel/toggle/sliding-panel-toggle.directive.ts","ng://@uat/bearbones/lib/sliding-panel/sliding-panel.module.ts","ng://@uat/bearbones/lib/dropdown-menu/dropdown-menu.component.ts","ng://@uat/bearbones/lib/dropdown-menu/dropdown-menu.module.ts","ng://@uat/bearbones/lib/slideout-menu/slideout-menu.component.ts","ng://@uat/bearbones/lib/slideout-menu/slideout-menu.module.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.component.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.directive.ts","ng://@uat/bearbones/lib/dynamic-component/dynamic-component.directive.ts","ng://@uat/bearbones/lib/dynamic-component/dynamic-component.module.ts","ng://@uat/bearbones/lib/dropdown-input/item-list/dropdown-input-item-list.component.ts","ng://@uat/bearbones/lib/dropdown-input/dropdown-input.module.ts","ng://@uat/bearbones/lib/common/menu-item.directive.ts","ng://@uat/bearbones/lib/hamburger-menu/menu-item-right.directive.ts","ng://@uat/bearbones/lib/hamburger-menu/hamburger-menu.component.ts","ng://@uat/bearbones/lib/common/common.module.ts","ng://@uat/bearbones/lib/hamburger-menu/hamburger-menu.module.ts","ng://@uat/bearbones/lib/collapsing-menu/collapsing-menu.component.ts","ng://@uat/bearbones/lib/collapsing-menu/collapsing-menu.module.ts","ng://@uat/bearbones/lib/multi-select/multi-select.component.ts","ng://@uat/bearbones/lib/multi-select/multi-select.module.ts","ng://@uat/bearbones/lib/common/close-subscription.ts","ng://@uat/bearbones/lib/drag-and-drop-component/dnd.const.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop.service.ts","ng://@uat/bearbones/lib/drag-and-drop-component/draggable/draggable.directive.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop-container/drag-and-drop-container.component.ts","ng://@uat/bearbones/lib/drag-and-drop-component/drag-and-drop.module.ts","ng://@uat/bearbones/lib/tab/tab.service.ts","ng://@uat/bearbones/lib/tab/tab.directive.ts","ng://@uat/bearbones/lib/tab/tab-content.directive.ts","ng://@uat/bearbones/lib/tab/tab.module.ts","ng://@uat/bearbones/lib/drag-and-drop/drag-and-drop.service.ts","ng://@uat/bearbones/lib/drag-and-drop/dropper.directive.ts","ng://@uat/bearbones/lib/drag-and-drop/drop-zone.directive.ts","ng://@uat/bearbones/lib/drag-and-drop/drag-and-drop.module.ts","ng://@uat/bearbones/lib/sortable/sortable.directive.ts","ng://@uat/bearbones/lib/sortable/sortable.module.ts","ng://@uat/bearbones/lib/bear-bones.module.ts"],"names":["verticalSlideAnimations","trigger","state","SlideAnimationDirections","CLOSE","style","transform","SLIDE_DOWN","SLIDE_UP","transition","transform-origin","animate","horizontalSlideAnimations","SLIDE_RIGHT","SLIDE_LEFT","BBSlidingPanel","cdRef","this","SlideDirections","EventEmitter","prototype","horizontalState","verticalState","show","slideDirection","markForCheck","hide","toggle","isShowing","Component","args","selector","template","styles","host","[@horizontalTrigger]","[@verticalTrigger]","[class.open]","[class.closed]","[class.pinned]","(mouseenter)","(mouseleave)","(mouseover)","(click)","[class.bb-sliding-panel]","animations","exportAs","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Input","Output","BBSlidingPanelToggle","element","_this","onNextState","hover","pin","nextStates","previousPinnedState","panel","pinned","ngOnInit","Error","showHideSubscription","closed","unsubscribe","documentClick$","fromEvent","document","toggleClick$","nativeElement","toggleMouseEnter$","toggleMouseLeave$","panelMouseEntered$","mouseEnterPanel","asObservable","panelMouseLeft$","mouseLeavePanel","panelClick$","clickPanel","leaveBoth$","pipe","merge","filter","_","showOnHover","map","enterEither$","toggleClicked$","event","stopPropagation","panelClicked$","documentClicked$","closeOnClickOutside","nextPinnedState$","of","showOnInit","isHovering$","debounceTime","combineLatest","states","subscribe","ngOnDestroy","Directive","[class.bb-sliding-panel-toggle]","ElementRef","BBSlidingPanelModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports","BBDropdownMenu","HostBinding","ViewChild","BBDropdownMenuModule","BBSlideoutMenu","Object","defineProperty","[class.slide-left]","[class.slide-right]","BBSlideoutMenuModule","BBDropdownInputServiceToken","InjectionToken","BBDropdownInput","_diServ","ele","chDetRef","BehaviorSubject","diServ","numItems","inputElementRef","maxItems","setMaxItems","inputSub","inputElement","value","inputValueChangeDelayms","distinctUntilChanged","newText","setSearchText","err","console","log","itemsSub","items$","items","length","num","hasItems","detectChanges","clearItems","onNewItemContainers","containers","clearAutoSelection","clearSelection","dynamicContainers","autoSelectItem","chooseCurrentItem","currentItem","selectedIndex","getCurrentItem","autoSelectedIndex","setTextOnChoice","matchText","listItemChosen","emit","index","component","currentCompRef","instance","list","dynamicComponentsData","autoSelectionMode","containerIndex_1","find","cnt","i","toLowerCase","containerIndex_2","substr","changeAutoSelection","selectPreviousListItem","e","getNextSelection","selectNextListItem","indexChange","changeSelection","listElement","listElements","containerElement","panelElementRef","inViewData","elementOffsetFromView","inView","scrollTop","scrollBy","container","listRec","getBoundingClientRect","contRec","topViz","top","botViz","bottom","onKeyDown","keyCode","EventKeys","UPARROW","preventDefault","DOWNARROW","ENTER","onOutsideClick","wasInsideClicked","wasFocused","setTimeout","onInsideClick","onHostFocusIn","onHostFocusOut","onListItemMouseOver","onListItemClicked","(focusout)","(focusin)","Inject","forwardRef","read","HostListener","BBDropdownInputDirective","onFocus","canShow","onBlur","(focus)","(blur)","BBDynamicComponentDirective","vcRef","resolver","compData","createComponent","destroy","inputProviders","keys","provName","provide","useValue","injector","ReflectiveInjector","fromResolvedProviders","resolve","parentInjector","compRef","resolveComponentFactory","create","insert","hostView","inputs","input","changeDetectorRef","ViewContainerRef","ComponentFactoryResolver","BBDynamicComponentModule","BBDropdownInputItemsList","listItems","toArray","li","selected","itemSelected","itemAutoSelected","ngAfterViewInit","newContainers","dynamicComponentContainers","newContainersSub","changes","newList","error","onListItemClick","listItemClick","listItemMouseOver","ViewChildren","BBDropdownInputModule","BBMenuItem","_viewContainer","BBMenuItemRight","BBHamburgerMenu","concat","rightItems","_cocoInit","expanded","window","matchMedia","expandOnQuery","matches","expandedSubscription","togglePanelState","showPanel","hidePanel","[class.expanded]","[class.collapsed]","ContentChildren","descendants","BBCommonModule","BBHamburgerMenuModule","BBCollapsingMenu","renderer","hostElementRef","zone","el","displayedItems","collapsedItems","calculateOverflow","projectNodes","displayedDiv","itemElements","areDisplayedItemsToWide","run","hasOverflow","menuCalcedRight","hostDiv","offsetLeft","offsetWidth","toggleDiv","firstOverflowIndex_1","Number","POSITIVE_INFINITY","collapsedDiv","width","onWindowResize","(window:resize)","Renderer","NgZone","BBCollapsingMenuModule","BBMultiSelectComponent","selectionItems","item","filterInput","filterChangeDelayms","filterText","filterItems","text","payload","selections","push","choices","onChoiceClicked","onSelectionClicked","itemUnselected","BBMultiSelectModule","closeSubscription","sub","BBDragAndDropService","Injectable","BBDraggableDirective","dndService","templateRef","DraggableContext","_isBeingDragged","dragged","dragStartSubscription","dragEndSubscription","registerDragAndDropEvents","view","target","draggableViewRef","rootNodes","setAttribute","dataTransfer","setData","rect","srcElement","y","height","x","left","mouseOffset","offsetX","clientX","offsetY","clientY","dragStartedOnView","next","dragEndedOnView","TemplateRef","BBDragAndDropContainerComponent","lowIndex","highIndex","viewBeingDragged","DefaultDragLocationTarget","draggable","embeddedViewRef","dndContainer","createEmbeddedView","draggableTemplateRef","draggableEmbeddedViews","dragSubscriptions","onDragStart","onDragEnd","dragStartEvent","draggingMouseOffset","viewIndex","indexOf","detach","splice","dropEffect","shortestDistance","MAX_SAFE_INTEGER","closestIndex","nextClosestIndex","forEach","centerCoordinates","dy","calculate1DimensionDistance","distance","Math","abs","dragLocation","min","max","warn","onDragEnter","onDragOver","onDrop","ngAfterContentInit","draggablesQL","draggables","initDraggable","p1","p2","calculate2DimensionDistance","x1","x2","y1","y2","sqrt","pow","BBDragAndDropComponentModule","TabService","TabDirective","tabService","active","bbshowstart","tabName","tabsets","tabset","setActive","onClick","parentElement","parentNode","child","children","activeClassElement","activeClassTarget","hasAttribute","attributes","activeClass","setProperty","removeClass","addClass","childActiveClass","bbactiveclass","parentActiveClass","bbshowend","Renderer2","TabContentDirective","setVisibility","ngDoCheck","display","activeTab","name","setStyle","BBTabModule","DragAndDropService","DropperDirective","dragstart","dragend","bbdropperClass","bbholdingClass","undefined","bbpayload","bbdropperId","bbstart","DropZoneDirective","bbdropzoneClass","bbdropzoneHoverClass","dropzones","includes","dragover","dragenter","bbdropzoneId","bbenter","dragleave","bbleave","drop","dropped","bbdropper","removeChild","appendChild","bbdata","bbdrop","BBDragAndDropModule","SortableDirective","options","initChildren","holdingClass","draggedItem","bbend","hoverClass","updateDropzoneClass","doDrop","dropTarget","newPosition","orderChanged","restingClass","cssClass","adding","classList","contains","BBSortableModule","BB_MODULES","BearBonesModule","BBRootModule"],"mappings":"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","sourcesContent":["export enum SlideAnimationDirections {\r\n    CLOSE = 'close',\r\n    SLIDE_LEFT = 'slide-left',\r\n    SLIDE_RIGHT = 'slide-right',\r\n    SLIDE_UP = 'slide-up',\r\n    SLIDE_DOWN = 'slide-down',\r\n}\r\n\r\nexport enum SlideDirections {\r\n    LEFT = 'left',\r\n    RIGHT = 'right',\r\n    UP = 'up',\r\n    DOWN = 'down',\r\n}","import { animation, trigger, state, style, transition, group, animate } from \"@angular/animations\";\r\nimport { AnimationMetadata } from '@angular/animations';\r\nimport { SlideAnimationDirections } from \"./sliding-panel.enums\";\r\n\r\nexport function verticalSlideAnimations(): AnimationMetadata  {\r\n    return trigger('verticalTrigger', [\r\n        state(SlideAnimationDirections.CLOSE, style({\r\n            transform: 'scaleY(0)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_DOWN, style({\r\n            transform: 'scaleY(1)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_UP, style({\r\n            transform: 'scaleY(1)', \r\n        })),\r\n        transition(\r\n                /*\r\n                SlideDirections.CLOSE + \r\n                ' => ' + \r\n                SlideDirections.SLIDE_DOWN, \r\n                */\r\n                `${SlideAnimationDirections.CLOSE} => ${SlideAnimationDirections.SLIDE_DOWN}`, \r\n                [\r\n            style({ \r\n                transform: 'scaleY(0)', \r\n                'transform-origin': 'top' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleY(1)', \r\n                    'transform-origin': 'top' \r\n            })),\r\n        ]),\r\n        transition(\r\n            `${SlideAnimationDirections.SLIDE_DOWN} => ${SlideAnimationDirections.CLOSE}`,\r\n            /*\r\n                SlideDirections.SLIDE_DOWN + \r\n                ' => ' + \r\n                SlideDirections.CLOSE, \r\n            */\r\n            [\r\n            style({ \r\n                transform: 'scaleY(1)', \r\n                'transform-origin': 'top' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleY(0)', \r\n                    'transform-origin': 'top' \r\n            \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_UP, [\r\n            style({ \r\n                transform: 'scaleY(0)', \r\n                'transform-origin': 'bottom' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleY(1)', \r\n                    'transform-origin': 'bottom' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_UP + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleY(1)', \r\n                'transform-origin': 'bottom' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleY(0)', \r\n                    'transform-origin': 'bottom' \r\n            \r\n            })),\r\n        ])\r\n        \r\n    ]);\r\n}\r\n\r\nexport function horizontalSlideAnimations(): AnimationMetadata  {\r\n    return trigger('horizontalTrigger', [\r\n        state(SlideAnimationDirections.CLOSE, style({\r\n            transform: 'scaleX(0)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_RIGHT, style({\r\n            transform: 'scaleX(1)', \r\n        })),\r\n        state(SlideAnimationDirections.SLIDE_LEFT, style({\r\n            transform: 'scaleX(1)', \r\n        })),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_RIGHT, [\r\n            style({ \r\n                transform: 'scaleX(0)', \r\n                'transform-origin': 'left' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleX(1)', \r\n                    'transform-origin': 'left' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_RIGHT + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleX(1)', \r\n                'transform-origin': 'left' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleX(0)', \r\n                    'transform-origin': 'left' \r\n            \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.CLOSE + \r\n            ' => ' + \r\n            SlideAnimationDirections.SLIDE_LEFT, [\r\n            style({ \r\n                transform: 'scaleX(0)', \r\n                'transform-origin': 'right' \r\n            }),\r\n            animate('150ms ease-in', \r\n                style({ \r\n                    transform: 'scaleX(1)', \r\n                    'transform-origin': 'right' \r\n            })),\r\n        ]),\r\n        transition(\r\n            SlideAnimationDirections.SLIDE_LEFT + \r\n            ' => ' + \r\n            SlideAnimationDirections.CLOSE, [\r\n            style({ \r\n                transform: 'scaleX(1)', \r\n                'transform-origin': 'right' \r\n            }),\r\n            animate('150ms ease-out', \r\n                style({ \r\n                    transform: 'scaleX(0)', \r\n                    'transform-origin': 'right' \r\n            \r\n            })),\r\n        ])\r\n        \r\n    ]);\r\n}\r\n","import { \r\n  Component, \r\n  Input, \r\n  Output, \r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  HostListener,\r\n  NgZone,\r\n  HostBinding,\r\n} from '@angular/core';\r\n\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  transition,\r\n  keyframes,\r\n  animate,\r\n  group\r\n} from '@angular/animations';\r\n\r\nimport { \r\n  verticalSlideAnimations, \r\n  horizontalSlideAnimations } from './sliding-panel.animations';\r\nimport { SlideAnimationDirections, SlideDirections } from './sliding-panel.enums';\r\n\r\n\r\n\r\n/**\r\n * A sliding panel is a div element that can be \r\n * set to slide up, down, left, or right.\r\n * \r\n * It can be tied to a slidiing panel toggle\r\n * or can be shown or hidden by calling the\r\n * public members show, hide, or toggle. \r\n */\r\n@Component({\r\n  selector: 'div[bb-sliding-panel]',\r\n  template: `<ng-content></ng-content>`,\r\n  styles: [``],\r\n  host: {\r\n    '[@horizontalTrigger]':'horizontalState',\r\n    '[@verticalTrigger]':'verticalState',\r\n    '[class.open]':'isShowing',\r\n    '[class.closed]':'!isShowing',\r\n    '[class.pinned]':'pinned',\r\n    '(mouseenter)':'mouseEnterPanel.emit($event)',\r\n    '(mouseleave)':'mouseLeavePanel.emit($event)',\r\n    '(mouseover)':'mouseOverPanel.emit($event)',\r\n    '(click)':'clickPanel.emit($event)',\r\n    '[class.bb-sliding-panel]':\"'true'\"\r\n  },\r\n  animations: [\r\n    verticalSlideAnimations(), \r\n    horizontalSlideAnimations(),\r\n  ],\r\n  exportAs: 'bbSlidingPanel',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BBSlidingPanel {\r\n  /**\r\n   * Specify the direction of the panels sliding animation.\r\n   * Valid values: 'up', 'down', 'left', or 'right'\r\n   */\r\n  @Input() slideDirection: SlideDirections = SlideDirections.DOWN;\r\n\r\n  /**\r\n   * Event for when the mouse enters the panel.\r\n   */\r\n  @Output() mouseEnterPanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the mouse leaves the panel.\r\n   */\r\n  @Output() mouseLeavePanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the mouse is over the panel.\r\n   */\r\n  @Output() mouseOverPanel= new EventEmitter<MouseEvent>();\r\n\r\n  /**\r\n   * Event for when the panel is clicked.\r\n   */\r\n  @Output() clickPanel= new EventEmitter<MouseEvent>();\r\n\r\n  public pinned = false;\r\n\r\n\r\n  /**\r\n   * Trigger for the horizontal animations.\r\n   */\r\n  horizontalState : SlideAnimationDirections = SlideAnimationDirections.CLOSE;\r\n\r\n  /**\r\n   * Trigger for the vertical animations.\r\n   */\r\n  verticalState : SlideAnimationDirections = SlideAnimationDirections.CLOSE;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef) { }\r\n\r\n  /**\r\n   * Returns whether the panel is open or closed.\r\n   */\r\n  public get isShowing() {\r\n    return (this.horizontalState !== SlideAnimationDirections.CLOSE ||\r\n        this.verticalState !== SlideAnimationDirections.CLOSE);\r\n  }\r\n\r\n  /**\r\n   * Show the panel with a sliding animation.\r\n   */\r\n  public show() {\r\n    switch(this.slideDirection) {\r\n      case SlideDirections.LEFT: {\r\n        this.horizontalState = SlideAnimationDirections.SLIDE_LEFT;\r\n        break;\r\n      }\r\n      case SlideDirections.RIGHT: {\r\n        this.horizontalState = SlideAnimationDirections.SLIDE_RIGHT;\r\n        break;\r\n      }\r\n      case SlideDirections.UP: {\r\n        this.verticalState = SlideAnimationDirections.SLIDE_UP;\r\n        break;\r\n      }\r\n      case SlideDirections.DOWN: {\r\n        this.verticalState = SlideAnimationDirections.SLIDE_DOWN;\r\n        break;\r\n      }\r\n      default: {\r\n        this.horizontalState = SlideAnimationDirections.CLOSE;\r\n        this.verticalState = SlideAnimationDirections.CLOSE;\r\n        break;\r\n      }\r\n    }\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Hide the panel with a sliding animation.\r\n   */\r\n  public hide() {\r\n    this.horizontalState = SlideAnimationDirections.CLOSE;\r\n    this.verticalState = SlideAnimationDirections.CLOSE;\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Toggle the panel state with a sliding animation.\r\n   */\r\n  public toggle() {\r\n    if(this.isShowing){\r\n      this.hide();\r\n    }\r\n    else{\r\n      this.show();\r\n    }\r\n  }\r\n\r\n}\r\n","import { \r\n  Directive, \r\n  Input, \r\n  HostListener, \r\n  HostBinding, \r\n  NgZone, \r\n  ElementRef, \r\n  OnInit,\r\n  OnDestroy,\r\n  AfterViewInit} from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel.component';\r\nimport { Observable ,  Subscription ,  fromEvent ,  of } from 'rxjs';\r\nimport { filter ,  combineLatest ,  merge ,  map ,  debounceTime } from 'rxjs/operators';\r\n\r\n/**\r\n * Control a sliding panels shown or hidden state.\r\n * \r\n * Should only be attached to elements that have\r\n * a click event.\r\n */\r\n@Directive({\r\n  selector: '[bb-sliding-panel-toggle]',\r\n  host: {\r\n    '[class.open]':'panel.isShowing',\r\n    '[class.closed]':'!panel.isShowing',\r\n    '[class.pinned]':'panel.pinned',\r\n    '[class.bb-sliding-panel-toggle]':\"'true'\"\r\n  },\r\n  exportAs:'bbSlidingPanelToggle'\r\n})\r\nexport class BBSlidingPanelToggle implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * The panel that the toggle is attached to.\r\n   * \r\n   * If this value is not set an error will be \r\n   * thrown during init.\r\n   */\r\n  @Input('bb-sliding-panel-toggle') panel: BBSlidingPanel;\r\n\r\n  /**\r\n   * Controls whether the panel should open based \r\n   * on a click event or not.\r\n   */\r\n  @Input() toggleOnClick = false;\r\n\r\n  /**\r\n   * Controls whether the panel should open \r\n   * on mouse over or not.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Controls whether the panel should close When\r\n   * clicked outside the toggle or panel or not.\r\n   */\r\n  @Input() closeOnClickOutside = false;\r\n\r\n  /**\r\n   * Sets the initial state of the panel \r\n   * by pinning open it if true.\r\n   */\r\n  @Input() showOnInit: boolean;\r\n\r\n  /**\r\n   * Keep track of the previous pin state.\r\n   * This is needed to determine if the \r\n   * new pin state should actually cause a\r\n   * transition or not.\r\n   */\r\n  private previousPinnedState: boolean = false;\r\n  \r\n  /**\r\n   * Save he subscription so the stream\r\n   * can be properly closed.\r\n   */\r\n  private showHideSubscription: Subscription;\r\n\r\n  constructor(private element: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if(!this.panel){\r\n      throw new Error('No SlidingPanel component supplied to ' + \r\n                      'the bb-sliding-panel-toggle directive ' + \r\n                      '([bb-sliding-panel-toggle]=\"$PanelVariable\").');\r\n    }\r\n\r\n    if(this.showHideSubscription && !this.showHideSubscription.closed) {\r\n      this.showHideSubscription.unsubscribe();\r\n    }\r\n\r\n    /*\r\n     * Streams of the events necessary \r\n     * for the logic of the toggle.\r\n     */\r\n\r\n    let documentClick$ = fromEvent<MouseEvent>(document, 'click');\r\n    \r\n    let toggleClick$ = fromEvent<MouseEvent>(this.element.nativeElement, 'click');\r\n    let toggleMouseEnter$ = fromEvent<MouseEvent>(this.element.nativeElement, 'mouseenter');\r\n    let toggleMouseLeave$ = fromEvent<MouseEvent>(this.element.nativeElement, 'mouseleave');\r\n\r\n    let panelMouseEntered$ = this.panel.mouseEnterPanel.asObservable();\r\n    let panelMouseLeft$ = this.panel.mouseLeavePanel.asObservable();\r\n    let panelClick$ = this.panel.clickPanel.asObservable();\r\n\r\n    /*\r\n     * Reduce both leaving events to \r\n     * a false emission.\r\n     */\r\n    let leaveBoth$ = toggleMouseLeave$\r\n      .pipe(\r\n        merge(panelMouseLeft$),\r\n        filter(_=>this.showOnHover), \r\n        map(_=>false));\r\n\r\n    /*\r\n     * Reduce both enter events to \r\n     * a true emission.\r\n     */\r\n    let enterEither$ = toggleMouseEnter$\r\n      .pipe(\r\n        merge(panelMouseEntered$),\r\n        filter(_=>this.showOnHover),\r\n        map(_=>true));\r\n\r\n    /*\r\n     * When the toggle is clicked \r\n     * stop the event from bubbling\r\n     * and toggle the pinned state.\r\n     */\r\n    let toggleClicked$ = toggleClick$\r\n      .pipe(\r\n        map(_=> {\r\n          /*\r\n           * should probably be done with\r\n           * a do operator, once it works again,\r\n           * for both toggle clicked and panel\r\n           * clicked\r\n           */\r\n          event.stopPropagation();\r\n          return !this.previousPinnedState }));\r\n\r\n    /*\r\n     * When the panel is clicked\r\n     * stop the event from bubbling\r\n     * and just continue to emit the\r\n     * previous pinned state.\r\n     */\r\n    let panelClicked$ = panelClick$\r\n      .pipe(map(_=>{\r\n        event.stopPropagation();\r\n        return this.previousPinnedState }));\r\n\r\n    /*\r\n     * A document click is only\r\n     * triggered when the panel\r\n     * and the toggle don't prevent\r\n     * the bubbling so just emit \r\n     * false as the next pinned state.\r\n     */\r\n    let documentClicked$ = documentClick$\r\n      .pipe(\r\n        filter(_=>this.closeOnClickOutside),\r\n        map(_=>false));\r\n    \r\n    /*\r\n     * Combine all the pinned state\r\n     * streams.\r\n     */\r\n    let nextPinnedState$ = of(this.showOnInit)\r\n      .pipe(\r\n        merge(toggleClicked$, panelClicked$, documentClicked$));\r\n\r\n    /*\r\n     * Combine all the mouse movement\r\n     * streams.\r\n     */\r\n    let isHovering$ = of(false)\r\n      .pipe(\r\n        merge(leaveBoth$, enterEither$),\r\n        /*\r\n          * 50 here is arbitrary but \r\n          * seems to be below the \r\n          * human threshhold for noticing\r\n          * the delay while letting \r\n          * slower systems have plenty of\r\n          * time to process the events.\r\n          * \r\n          * Maybe it should be configurable?\r\n          */\r\n        debounceTime(50));\r\n\r\n    /*\r\n     * Combine the hover and pinned state\r\n     * streams into a stream that determines\r\n     * whether the panel state needs to change.\r\n     */\r\n    this.showHideSubscription = \r\n      isHovering$\r\n        .pipe(\r\n          combineLatest(nextPinnedState$),\r\n          map(states=>({hover:states[0],pin:states[1] })))\r\n        .subscribe(this.onNextState);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if(this.showHideSubscription && !this.showHideSubscription.closed) {\r\n      this.showHideSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  showPanel = () => this.onNextState({hover: false, pin: true});\r\n  hidePanel = () => this.onNextState({hover: false, pin: false});\r\n\r\n  /**\r\n   * Determine what the next panel state\r\n   * should be based on the new hover and\r\n   * pin states.\r\n   */\r\n  private onNextState = (nextStates:{hover: boolean, pin: boolean}) => {\r\n    if(nextStates.hover ) {\r\n      if(this.previousPinnedState && !nextStates.pin) { \r\n        this.panel.hide();  \r\n      }\r\n      else {\r\n        this.panel.show();\r\n      }\r\n    }\r\n    else {\r\n      if(!this.previousPinnedState && nextStates.pin) {\r\n        this.panel.show();\r\n      }\r\n      else if(!nextStates.pin){\r\n        this.panel.hide();\r\n      }\r\n    }\r\n    this.previousPinnedState = nextStates.pin;\r\n    this.panel.pinned = nextStates.pin;\r\n  }\r\n\r\n  \r\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { BBSlidingPanel } from './sliding-panel.component';\r\nimport { BBSlidingPanelToggle } from './toggle/sliding-panel-toggle.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBSlidingPanel, \r\n    BBSlidingPanelToggle\r\n  ],\r\n\r\n  exports: [\r\n    BBSlidingPanel, \r\n    BBSlidingPanelToggle\r\n  ]\r\n})\r\nexport class BBSlidingPanelModule { \r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBSlidingPanelModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Renderer,\r\n  ViewChild,\r\n  ElementRef,\r\n  ContentChildren,\r\n  HostBinding } from '@angular/core';\r\nimport {BBMenuItem} from '../common/menu-item.directive';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-dropdown-menu]',\r\n  template: `<div [bb-sliding-panel-toggle]=\"panel\" \r\n     [toggleOnClick]=\"toggleOnClick\"\r\n     [showOnHover]=\"showOnHover\"\r\n     [closeOnClickOutside]=\"closeOnClickOutside\">\r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n</div>\r\n<div class=\"dropdown-container\">\r\n  <div bb-sliding-panel \r\n    #panel=\"bbSlidingPanel\"\r\n    slideDirection=\"down\">\r\n    <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.dropdown-container{position:relative}/deep/ .dropdown-container>div.bb-sliding-panel{position:absolute;top:0}.dropdown-container div.bb-sliding-panel{display:flex;flex:1;flex-direction:column}`],\r\n  exportAs:'bbDropdownMenu'\r\n})\r\nexport class BBDropdownMenu {\r\n  @HostBinding('class.bb-dropdown-menu') applyHostClass = true;\r\n\r\n  @Input() public showOnHover = false;\r\n  @Input() public toggleOnClick = true;\r\n  @Input() public closeOnClickOutside = true;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  constructor() { }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBDropdownMenu } from './dropdown-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule\r\n  ],\r\n  \r\n  declarations: [\r\n    BBDropdownMenu\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBDropdownMenu\r\n  ]\r\n})\r\nexport class BBDropdownMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBDropdownMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","import { Component, Input, HostBinding, ViewChild } from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-slideout-menu]',\r\n  template: `<div class=\"slide-container\">\r\n  <div [bb-sliding-panel-toggle]=\"panel\" \r\n    [toggleOnClick]=\"pinOnClick\"\r\n    [showOnHover]=\"showOnMouseOver\"\r\n    [closeOnClickOutside]=\"closeOnClickOutside\">\r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n  <div class=\"slide-position\">\r\n    <div class=\"slide-anchor\">\r\n      <div bb-sliding-panel \r\n        #panel=\"bbSlidingPanel\"\r\n        [slideDirection]=\"slideDirection\">\r\n          <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.slide-container{position:relative}.slide-container>div.slide-position{position:absolute;top:0}/deep/ .slide-left>div.slide-container{background-color:red}/deep/ .slide-left div.slide-position{left:0}/deep/ .slide-right div.slide-position{right:0}.slide-container>>div.slide-anchor{position:relative}/deep/ .slide-anchor>div.bb-sliding-panel{position:absolute;display:flex;flex-direction:row;flex:1}/deep/ .slide-left div.bb-sliding-panel{right:0}/deep/ .slide-right div.bb-sliding-panel{left:0}`],\r\n  host: {\r\n    '[class.slide-left]':\"slideLeft\",\r\n    '[class.slide-right]':\"!slideLeft\"\r\n  }\r\n})\r\nexport class BBSlideoutMenu {\r\n  @HostBinding('class.bb-slideout-menu') applyHostClass = true;\r\n\r\n  @Input() public showOnMouseOver = true;\r\n  @Input() public pinOnClick = true;\r\n  @Input() public closeOnClickOutside = true;\r\n  @Input() slideDirection: \"left\" | \"right\" = \"right\";\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  get slideLeft() {\r\n    return this.slideDirection === \"left\";\r\n  }\r\n\r\n  constructor() { }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBSlideoutMenu } from './slideout-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBSlideoutMenu\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBSlideoutMenu\r\n  ]\r\n})\r\nexport class BBSlideoutMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBSlideoutMenuModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import { \r\n  Component, \r\n  Input,\r\n  Output,\r\n  Inject,\r\n  forwardRef,\r\n  EventEmitter,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  InjectionToken,\r\n  HostListener,\r\n  HostBinding,\r\n  ViewChild  \r\n      } from '@angular/core';\r\n\r\nimport { Observable ,  Subscription ,  BehaviorSubject ,  fromEvent } from 'rxjs';\r\nimport { debounceTime ,  map ,  distinctUntilChanged } from 'rxjs/operators';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\nimport { BBDropdownInputItemsList } from './item-list/dropdown-input-item-list.component';\r\nimport { BBDynamicComponentDirective } from '../dynamic-component/dynamic-component.directive';\r\nimport { DropdownInputService } from './service/dropdown-input-service.interface';\r\nimport { DropdownInputItemChosenEvent, DropdownInputItemsMouseEvent } from './events/dropdown-input-item-events.interface';\r\n\r\nexport const BBDropdownInputServiceToken = new InjectionToken<DropdownInputService>('DdIService');\r\n\r\n@Component({\r\n  selector: 'div[bb-dropdown-input]',\r\n  template: `<div class=\"dropdown-anchor\">\r\n  <input #dropdownInput\r\n\t\t (keydown)=\"onKeyDown($event)\"\r\n\t\t [attr.placeholder]=\"placeholderText\"/>\r\n  \t<div bb-sliding-panel\r\n\t     class=\"results\" \r\n\t\t slideDirection=\"down\"\r\n\t\t #panel=\"bbSlidingPanel\">\r\n\t\t <ul bb-dropdown-input-items-list\r\n\t\t \t#dropdownList\r\n\t\t    [dynamicComponentsData]=\"diServ.items$ | async\"\r\n\t\t\t(listItemMouseOver)=\"onListItemMouseOver($event)\"\r\n\t\t\t(listItemClick)=\"onListItemClicked($event)\"\r\n\t\t\t(newContainers)=\"onNewItemContainers($event)\">\r\n\t\t </ul>\r\n  \t</div>\t\r\n</div>\r\n`,\r\n  styles: [`div.dropdown-anchor{position:relative}.dropdown-anchor>div.bb-sliding-panel{position:absolute}.dropdown-anchor>.bb-sliding-panel ul.bb-dropdown-input-items-list{display:flex;flex:1;flex-direction:column;padding-left:0;list-style:none}`],\r\n  host: {\r\n    '(focusout)':\"onHostFocusOut($event)\",\r\n    '(focusin)':\"onHostFocusIn($event)\",\r\n  },\r\n  exportAs:'bbDropdownInput',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class BBDropdownInput {\r\n  @HostBinding('class.bb-dropdown-input') applyHostClass = true;\r\n\r\n  /**\r\n   * Set maximum number of items for the service.\r\n   */\r\n  @Input() maxItems: number;\r\n\r\n  /**\r\n   * Toggles whether the displayText should be set into the input\r\n   * box when an item is 'chosen'.  Defaults to true. \r\n   */\r\n  @Input() setTextOnChoice = true;\r\n\r\n  /**\r\n   * Set the place holder text on the input element.\r\n   */\r\n  @Input() placeholderText = '';\r\n\r\n  /**\r\n   * Sets how long, in ms, the delay is \r\n   * between updates to the DropdownInputService\r\n   * when the value of the input element\r\n   * has been changed.\r\n   * \r\n   * Defaults to 400ms.\r\n   */\r\n  @Input() public inputValueChangeDelayms = 400;\r\n\r\n  /**\r\n   * The auto selection mode determine which item will be selected if the\r\n   * choose item method is executed when no item has been specifically\r\n   * selected by user interaction.\r\n   * \r\n   * 'none'    - nothing is chosen without user interaction\r\n   *  \r\n   * 'lazy'    - the first item in the list is chosen\r\n   *  \r\n   * 'exact'   - if any item's displayText matches the input exactly,\r\n   *             ignoring case, the first match is chosen\r\n   * \r\n   * 'only'    - if there is only a single item in the list it is chosen\r\n   * \r\n   * 'partial' - math the first item in the list that, ignoring case, \r\n   *             exactly matches the current value\r\n   */\r\n  @Input() autoSelectionMode: 'none' | 'lazy' | 'exact' | 'only' | 'partial' = 'none'; \r\n\r\n  /**\r\n   * The index of the auto selection mode selection made.\r\n   */\r\n  private autoSelectedIndex = -1;\r\n\r\n  private selectedIndex = -1;\r\n\r\n  /**\r\n   * Emit the data for the list item selected either through \r\n   * a mouse click or hitting enter when it is in the selected \r\n   * state.\r\n   */\r\n  @Output() listItemChosen = new EventEmitter<DropdownInputItemChosenEvent>();\r\n\r\n  /**\r\n   * Return true if the service has returned\r\n   * at least 1 item to the component.\r\n   */\r\n  public get hasItems() {\r\n      return this.numItems > 0;\r\n  }\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  @ViewChild('dropdownInput', {read: ElementRef}) inputElementRef: ElementRef;\r\n  @ViewChild('panel', {read: ElementRef}) panelElementRef: ElementRef;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n  @ViewChild('dropdownList') list: BBDropdownInputItemsList;\r\n\r\n  public get inputElement() {\r\n    return (this.inputElementRef.nativeElement as HTMLInputElement);\r\n  }\r\n\r\n  // determine the location of clicks\r\n  // to determine if the dropdown should\r\n  // show or not.\r\n  private outsideClick = new EventEmitter();\r\n  private insideClick = new EventEmitter();\r\n\r\n  private clickedInside = new BehaviorSubject(false);\r\n\r\n  /* user interaction state tracking */\r\n  private wasInsideClicked = false;\r\n  private wasFocused = false;\r\n\r\n  // for tracking the state of the panel\r\n  private inputSub: Subscription;\r\n\r\n  private itemsSub: Subscription;\r\n  private numItems: number = 0;\r\n\r\n  /*\r\n   * Internal list of the dynamic components' containers.\r\n   */\r\n  private dynamicContainers: BBDynamicComponentDirective[];\r\n\r\n  public diServ: DropdownInputService;\r\n\r\n  constructor(\r\n    @Inject(forwardRef(()=>BBDropdownInputServiceToken)) private _diServ: DropdownInputService,\r\n    private ele: ElementRef,\r\n    private chDetRef: ChangeDetectorRef) {\r\n      this.diServ = _diServ;\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    if(this.maxItems) {\r\n      this.diServ.setMaxItems(this.maxItems);\r\n    }\r\n\r\n    /*\r\n     * Track the value changes of the input element\r\n     * without bringing in angular forms to keep\r\n     * the requirements for bb as low as possible.\r\n     */\r\n    this.inputSub = \r\n      fromEvent(this.inputElement, 'keyup')\r\n        .pipe(\r\n          map((event:KeyboardEvent)=>(event.target as HTMLInputElement).value),\r\n          debounceTime(this.inputValueChangeDelayms),\r\n          distinctUntilChanged())\r\n        .subscribe(\r\n            newText=>{\r\n              this.diServ.setSearchText(newText);\r\n            },\r\n        err=>console.log(err),\r\n        ()=>{/*done*/});\r\n\r\n    this.itemsSub = this.diServ.items$\r\n      .pipe(\r\n        map(items=> items? items.length:-1))\r\n      .subscribe(\r\n        num=> {\r\n          this.numItems = num;\r\n\r\n          if(this.hasItems){\r\n            this.panel.show();\r\n          }\r\n          else {\r\n            this.panel.hide();\r\n          }\r\n          this.chDetRef.markForCheck();\r\n          this.chDetRef.detectChanges();\r\n        },\r\n        err=>console.log(err),\r\n        ()=>{/*done*/});\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.inputSub.unsubscribe();\r\n    this.itemsSub.unsubscribe();\r\n    this.diServ.clearItems();\r\n  }\r\n\r\n  /**\r\n   * Clear any previous selection criteria and\r\n   * perform a new auto selection.\r\n   */\r\n   onNewItemContainers(\r\n    containers: BBDynamicComponentDirective[]) {\r\n      this.clearAutoSelection();\r\n      this.clearSelection();\r\n      this.dynamicContainers = containers;\r\n      if(this.dynamicContainers && this.dynamicContainers.length > 0){\r\n        this.autoSelectItem();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Choose either the currently selected item or\r\n   * the auto chosen item and emit it.\r\n   */\r\n  private chooseCurrentItem() {\r\n      let currentItem: DropdownInputItemChosenEvent;\r\n      if (this.selectedIndex >= 0) {\r\n            currentItem = this.getCurrentItem(this.selectedIndex);\r\n      }\r\n      else {\r\n          if (this.autoSelectedIndex >= 0) {\r\n            currentItem = this.getCurrentItem(this.autoSelectedIndex);\r\n          }\r\n      }\r\n\r\n      if(currentItem){\r\n        if (this.setTextOnChoice) {\r\n          this.inputElement.value = currentItem.matchText;\r\n        }\r\n\r\n        this.listItemChosen.emit(currentItem);\r\n        this.clearSelection();\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Return a data structure of the dynamic component\r\n   * described by the index value.\r\n   */\r\n  private getCurrentItem(index: number): DropdownInputItemChosenEvent {\r\n    return {\r\n      component: this.dynamicContainers[index].currentCompRef.instance,\r\n      index: index,\r\n      matchText: this.list.dynamicComponentsData[index].matchText,\r\n    }\r\n  }\r\n\r\n  /* Soft Selection Handling */\r\n  private autoSelectItem() {\r\n    let index = -1;\r\n    switch (this.autoSelectionMode) {\r\n        case 'none': {\r\n            // do nothing\r\n            break;\r\n        }\r\n        case 'lazy': {\r\n            if (this.dynamicContainers) {\r\n                index = 0;\r\n            }\r\n            break;\r\n        }\r\n        case 'exact': {\r\n          if (this.dynamicContainers) {\r\n            let containerIndex = -1;\r\n\r\n            this.list.dynamicComponentsData.find(\r\n            (cnt,i) => {\r\n              if (cnt.matchText.toLowerCase() === \r\n                this.inputElement.value.toLowerCase()) {\r\n                containerIndex = i;\r\n                return true;\r\n              }\r\n            });\r\n            if (containerIndex >= 0) {\r\n                index = containerIndex;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 'partial': {\r\n          if (this.dynamicContainers) {\r\n            let containerIndex = -1;\r\n\r\n            this.list.dynamicComponentsData.find(\r\n            (cnt,i) => {\r\n              if (cnt.matchText.toLowerCase()\r\n                  .substr(0,\r\n                    this.inputElement.value.length) === \r\n                  this.inputElement.value.toLowerCase()) {\r\n                containerIndex = i;\r\n                return true;\r\n              }\r\n            });\r\n            if (containerIndex >= 0) {\r\n                index = containerIndex;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 'only': {\r\n            if (this.dynamicContainers && this.dynamicContainers.length === 1) {\r\n                index = 0;\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (index != this.autoSelectedIndex) {\r\n      this.clearAutoSelection();\r\n\r\n      if (index >= 0) {\r\n        this.list.changeAutoSelection(index, true);\r\n      }\r\n      this.autoSelectedIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear current auto selection\r\n   */\r\n  private clearAutoSelection() {\r\n    if (this.autoSelectedIndex >= 0) {\r\n      this.list.changeAutoSelection(this.autoSelectedIndex, false);\r\n      this.autoSelectedIndex = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select previous, wrapping\r\n   */\r\n  private selectPreviousListItem(e: KeyboardEvent) {\r\n    this.getNextSelection(-1);\r\n    \r\n  }\r\n\r\n  /**\r\n   * Select next, wrapping\r\n   */\r\n  private selectNextListItem(e: KeyboardEvent) {\r\n    this.getNextSelection(1);\r\n  }\r\n\r\n  /**\r\n   * Get the next selection based on the indexChange\r\n   * and wrapping around the array of items.\r\n   */\r\n  private getNextSelection(indexChange:number) {\r\n    if (this.dynamicContainers && this.dynamicContainers.length > 0) {\r\n        this.list.changeSelection(this.selectedIndex, false);\r\n\r\n        // move selection index\r\n        this.selectedIndex += indexChange;\r\n\r\n        // wrap the selection\r\n        if (this.selectedIndex < 0) {\r\n            this.selectedIndex = this.dynamicContainers.length - 1;\r\n        }\r\n        else if (this.selectedIndex >= this.dynamicContainers.length) {\r\n            this.selectedIndex = 0;\r\n        }\r\n\r\n        // set the selection\r\n        this.list.changeSelection(this.selectedIndex, true);\r\n\r\n        // the container element is considered to be the angular binding comment, so we have to go up 1 level to the li element\r\n        const listElement = this.list.listElements[this.selectedIndex];\r\n        const containerElement = (this.panelElementRef.nativeElement as HTMLDivElement);\r\n\r\n        // check if item is in view\r\n        const inViewData = this.elementOffsetFromView(listElement, containerElement);\r\n        if (!inViewData.inView) {\r\n            containerElement.scrollTop += inViewData.scrollBy;\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * clear current selection\r\n   */\r\n  private clearSelection() {\r\n    if (this.selectedIndex >= 0) {\r\n      this.list.changeSelection(this.selectedIndex, false);\r\n      this.selectedIndex = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine if an element is within the view of the container element\r\n   * and if it isn't also determine the vertical offset from being in view\r\n   * it is at.\r\n   * @param listElement the element to determine if it is in view\r\n   * @param container the viewing container of the element\r\n   */\r\n  private elementOffsetFromView(listElement: HTMLElement, container: HTMLElement) {\r\n      const listRec = listElement.getBoundingClientRect();\r\n      const contRec = container.getBoundingClientRect();\r\n      const topViz = listRec.top >= contRec.top;\r\n      const botViz = listRec.bottom <= contRec.bottom;\r\n\r\n      const inViewData = {\r\n          inView: topViz && botViz,\r\n          scrollBy: 0 \r\n      }\r\n\r\n      if (!botViz) {\r\n          inViewData.scrollBy = listRec.bottom - contRec.bottom;\r\n      }\r\n      else if (!topViz) {\r\n          inViewData.scrollBy = -(contRec.top - listRec.top);\r\n      }\r\n      \r\n      return inViewData;\r\n  }\r\n\r\n\r\n  /* Event Handlers */\r\n\r\n  /**\r\n   * Read for extra control keys pressed, up and down arrows and enter,\r\n   * and take the appropriate action based on them.\r\n   * Up Arrow - select the previous item on the list, or the last item if none has been selected yet\r\n   * Down Arrow - select the next item on the list, or the first if none has been selected \r\n   * Enter - 'choose' the currently selected item\r\n   * @param e\r\n   */\r\n   onKeyDown(e: KeyboardEvent) {\r\n      switch (e.keyCode) {\r\n          case EventKeys.UPARROW:\r\n              this.clearAutoSelection();\r\n              this.selectPreviousListItem(e);\r\n              e.preventDefault();\r\n              break;\r\n          case EventKeys.DOWNARROW:\r\n              this.clearAutoSelection();\r\n              this.selectNextListItem(e);\r\n              e.preventDefault();\r\n              break;\r\n          case EventKeys.ENTER:\r\n              this.chooseCurrentItem();\r\n              e.preventDefault();\r\n              break;\r\n          default:\r\n              // do nothing\r\n              break;\r\n      }\r\n  }\r\n\r\n\r\n  @HostListener('document:click',['$event']) \r\n  onOutsideClick(e: MouseEvent) {\r\n    if(!this.wasInsideClicked) {\r\n      this.wasFocused = false;\r\n      setTimeout(_=>{\r\n        if(!this.wasFocused){\r\n          this.panel.hide();\r\n          this.chDetRef.markForCheck();\r\n          this.chDetRef.detectChanges();\r\n        }},150);\r\n    }\r\n    this.wasInsideClicked = false;\r\n  }\r\n\r\n  @HostListener('click',['$event']) \r\n  onInsideClick(e: MouseEvent) {\r\n    this.wasInsideClicked = true;\r\n    this.wasFocused = true;\r\n  }\r\n\r\n  onHostFocusIn(e: FocusEvent) {\r\n    if(this.hasItems){\r\n      this.panel.show();\r\n      this.chDetRef.markForCheck();\r\n      this.chDetRef.detectChanges();\r\n    }\r\n    this.wasFocused = true;\r\n  }\r\n\r\n  onHostFocusOut(e: FocusEvent){\r\n    this.wasFocused = false;\r\n    setTimeout(_=>{\r\n      if(!this.wasFocused){\r\n        this.panel.hide();\r\n        this.chDetRef.markForCheck();\r\n      }},150);\r\n  }\r\n\r\n  onListItemMouseOver(e: DropdownInputItemsMouseEvent) {\r\n    this.clearAutoSelection();\r\n    this.clearSelection();\r\n    this.selectedIndex = e.index;\r\n    this.list.changeSelection(this.selectedIndex,true);\r\n  }\r\n\r\n  onListItemClicked(e: DropdownInputItemsMouseEvent) {\r\n    this.selectedIndex = e.index;\r\n    this.list.changeSelection(this.selectedIndex,true);\r\n    this.chooseCurrentItem();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Enumerate the desired key codes for key events\r\n */\r\nenum EventKeys {\r\n    ENTER = 13,\r\n    UPARROW = 38,\r\n    DOWNARROW = 40,\r\n};\r\n","import { Directive, Input } from '@angular/core';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Directive({\r\n  selector: '[bb-sliding-panel-focus]',\r\n  host: {\r\n    '(focus)':\"onFocus($event)\",\r\n    '(blur)':\"onBlur($event)\"\r\n  }\r\n})\r\nexport class BBDropdownInputDirective {\r\n  @Input('bb-sliding-panel-focus') panel: BBSlidingPanel;\r\n  @Input() canShow: boolean = false;\r\n\r\n  constructor() { }\r\n\r\n  onFocus(e: FocusEvent) {\r\n    if(this.canShow) {\r\n      console.log('showing');\r\n      this.panel.show();\r\n    }\r\n  }\r\n\r\n  onBlur(e: FocusEvent) {\r\n    this.panel.hide();\r\n  }\r\n\r\n\r\n}\r\n","import {\r\n    Directive,  \r\n    Component,\r\n    ComponentFactoryResolver,\r\n    ComponentRef,\r\n    ChangeDetectionStrategy,\r\n    Input,\r\n    ReflectiveInjector,\r\n    ViewChild,\r\n    ViewContainerRef } from '@angular/core';\r\nimport { DynamicComponentData } from './dynamic-component-data.interface';\r\n\r\n/**\r\n */\r\n@Directive({\r\n  selector: '[bb-dynamic-component]',\r\n  exportAs:'dynamicComp',\r\n})\r\nexport class BBDynamicComponentDirective {\r\n    public currentCompRef: ComponentRef<any>;\r\n\r\n    public dccClasses: any = {};\r\n\r\n    @Input('bb-dynamic-component') public set componentData(compData: DynamicComponentData) {\r\n      this.createComponent(compData);\r\n    }\r\n\r\n    constructor(protected vcRef: ViewContainerRef,\r\n                protected resolver: ComponentFactoryResolver) {\r\n    }\r\n\r\n    protected createComponent(compData: DynamicComponentData) {\r\n      if (!compData) {\r\n        return;\r\n      }\r\n\r\n      if (this.currentCompRef) {\r\n        this.currentCompRef.destroy();\r\n      }\r\n\r\n      let inputProviders: any[] = []\r\n\r\n      if (compData.providers) {\r\n        inputProviders = Object.keys(compData.providers).map(\r\n          (provName: any) => {\r\n            return { provide: provName, useValue: compData.providers[provName] };\r\n          });\r\n      }\r\n\r\n      let injector =\r\n        ReflectiveInjector\r\n          .fromResolvedProviders(\r\n            ReflectiveInjector.resolve(inputProviders),\r\n            this.vcRef.parentInjector);\r\n      \r\n      let compRef: ComponentRef<any> =\r\n        this.resolver\r\n          .resolveComponentFactory(compData.component)\r\n          .create(injector);\r\n\r\n      this.vcRef.insert(compRef.hostView);\r\n\r\n      if (compData.inputs) {\r\n        Object.keys(compData.inputs).map(\r\n          input => {\r\n            compRef.instance[input] = compData.inputs[input];\r\n          }\r\n        )\r\n      }\r\n\r\n      compRef.changeDetectorRef.markForCheck();\r\n      this.currentCompRef = compRef;\r\n    }\r\n\r\n \r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBDynamicComponentDirective } from './dynamic-component.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [BBDynamicComponentDirective],\n  exports: [BBDynamicComponentDirective]\n})\nexport class BBDynamicComponentModule { }\n","import {\r\n    Component,\r\n    ComponentRef,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    ComponentFactoryResolver,\r\n    ReflectiveInjector,\r\n    ViewContainerRef,\r\n    ViewChildren,\r\n    QueryList,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    HostBinding,\r\n} from '@angular/core';\r\nimport { Observable ,  Subscription } from 'rxjs';\r\nimport { DropdownItemComponentData } from '../service/dropdown-input-service.interface';\r\nimport { BBDynamicComponentDirective } from '../../dynamic-component/dynamic-component.directive';\r\nimport { DropdownInputItemsMouseEvent } from '../events/dropdown-input-item-events.interface';\r\n\r\n@Component({\r\n    selector:'ul[bb-dropdown-input-items-list]',\r\n    template: `<li *ngFor=\"let compData of dynamicComponentsData; let i = index;\"\r\n    #listItem\r\n    class=\"item\"\r\n    [class.auto-selected]=\"itemAutoSelected[i]\"\r\n    [class.selected]=\"itemSelected[i]\"\r\n    (click)=\"onListItemClick($event, i)\"\r\n    (mouseover)=\"onListItemMouseOver($event, i)\">\r\n    <ng-template #container=\"dynamicComp\" [bb-dynamic-component]=\"compData\"></ng-template>\r\n</li>\r\n\r\n\r\n`,\r\n    styles: [``],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BBDropdownInputItemsList {\r\n    @HostBinding('class.bb-dropdown-input-items-list') applyHostClass = true;\r\n\r\n    @Input() public dynamicComponentsData: DropdownItemComponentData[] = [];\r\n\r\n    public dynamicComponentClasses: any[];\r\n\r\n    @ViewChildren('container') \r\n        public dynamicComponentContainers: QueryList<BBDynamicComponentDirective>;\r\n\r\n    @ViewChildren('listItem',{read:ViewContainerRef})\r\n        public listItems: QueryList<ViewContainerRef>;\r\n\r\n    public get listElements() {\r\n        return this.listItems.toArray().map(li=>{\r\n            return (li.element.nativeElement as HTMLLIElement);\r\n        });\r\n    }\r\n\r\n    @Output() public newContainers = new EventEmitter<BBDynamicComponentDirective[]>();\r\n\r\n    @Output() public listItemMouseOver = new EventEmitter<DropdownInputItemsMouseEvent>();\r\n\r\n    @Output() public listItemClick = new EventEmitter<DropdownInputItemsMouseEvent>();\r\n\r\n    private newContainersSub: Subscription;\r\n\r\n    itemAutoSelected: boolean[] = [];\r\n    itemSelected: boolean[] = [];\r\n\r\n    constructor(private chDetRef: ChangeDetectorRef) {\r\n    }\r\n\r\n    public changeSelection(index:number, selected: boolean) {\r\n        this.itemSelected[index]=selected;\r\n        this.chDetRef.markForCheck();\r\n        this.chDetRef.detectChanges();\r\n    }\r\n\r\n    public changeAutoSelection(index: number, selected: boolean) {\r\n        this.itemAutoSelected[index]=selected;\r\n        this.chDetRef.markForCheck();\r\n        this.chDetRef.detectChanges();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // emit the original list\r\n        this.newContainers.emit(this.dynamicComponentContainers.toArray());\r\n        \r\n        if (this.newContainersSub) {\r\n            this.newContainersSub.unsubscribe();\r\n        }\r\n\r\n        this.newContainersSub =\r\n            this.dynamicComponentContainers\r\n                .changes\r\n                .subscribe(\r\n                    newList => {\r\n                        this.itemAutoSelected = [];\r\n                        this.itemSelected = [];\r\n                        this.newContainers.emit(newList.toArray());\r\n                    },\r\n                    (error: string) => console.log(error),\r\n                    () => {\r\n                        this.newContainersSub.unsubscribe()\r\n                    });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.newContainersSub) {\r\n            this.newContainersSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onListItemClick(\r\n        e: MouseEvent, \r\n        index: number){\r\n        this.listItemClick.emit({\r\n            event: e,\r\n            index: index\r\n        });\r\n    }\r\n\r\n    onListItemMouseOver(\r\n        e: MouseEvent, \r\n        index: number) {\r\n        this.listItemMouseOver.emit({\r\n            event: e,\r\n            index: index\r\n        });\r\n    }\r\n}\r\n\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBDropdownInput } from './dropdown-input.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\nimport { BBDropdownInputDirective } from './dropdown-input.directive';\r\nimport { BBDynamicComponentModule } from '../dynamic-component/dynamic-component.module';\r\nimport { BBDropdownInputItemsList } from './item-list/dropdown-input-item-list.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n    BBDynamicComponentModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBDropdownInput,\r\n    BBDropdownInputDirective, \r\n    BBDropdownInputItemsList,\r\n  ],\r\n  \r\n  exports: [\r\n\t  BBDropdownInput,\r\n  ]\r\n})\r\nexport class BBDropdownInputModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBDropdownInputModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[bb-menu-item]',\r\n})\r\nexport class  BBMenuItem {\r\n    constructor(\r\n        private _viewContainer: ViewContainerRef) { }\r\n}","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[bb-menu-item-right]',\r\n})\r\nexport class  BBMenuItemRight {\r\n    constructor() { }\r\n}","import { \r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  HostBinding,\r\n  OnInit,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  NgZone,\r\n } from '@angular/core';\r\n\r\nimport { \r\n  BBSlidingPanel, \r\n  BBSlidingPanelToggle } from '../sliding-panel';\r\n\r\nimport {BBMenuItem} from '../common/menu-item.directive';\r\nimport {BBMenuItemRight} from './menu-item-right.directive';\r\nimport { Observable ,  fromEvent ,  of ,  Subscription } from 'rxjs';\r\nimport { merge ,  map ,  distinctUntilChanged } from 'rxjs/operators';\r\n\r\n/**\r\n * A hamburger menu is either a div or nav element\r\n * that has arbitrary items as it's content with the\r\n * bb-menu-item or bb-menu-item-right directives.\r\n * \r\n * It takes a standard css media query as an input,\r\n * expandOnQuery, and when that query returns true \r\n * the menu will display the items inside it's borders.\r\n * \r\n * If the query is false the menu will be rendered in \r\n * the collapsed state where a toggle will be right \r\n * justified and when clicked will show and hide the\r\n * menu item contents in a panel that drops down.\r\n * \r\n * The toggle itself is set by adding the bb-menu-toggle\r\n * directive to content inside the menu element that \r\n * should act as the toggle.\r\n * \r\n * The hamburger menu component is exported as BBHamburgerMenu\r\n * and provides the state of the panel with isOpen and the \r\n * state of the menu itself as expanded.  These can be used \r\n * to modify the menu content itself based on the current\r\n * state of the menu.\r\n */\r\n@Component({\r\n  selector: 'div[bb-hamburger-menu], nav[bb-hamburger-menu]',\r\n  template: `<div class=\"menu-container\">\r\n  <ng-content select=\"[bb-fixed-content]\"></ng-content>\r\n\r\n  <div bb-sliding-panel\r\n      class=\"menu-items-container\"\r\n      slideDirection=\"down\"\r\n      #panel=\"bbSlidingPanel\">\r\n    <div class=\"menu-items\">\r\n      <ng-content select=\"[bb-menu-item]\"></ng-content>\r\n    </div>\r\n    <div class=\"menu-items-right\">\r\n      <ng-content select=\"[bb-menu-item-right]\"></ng-content>\r\n    </div>\r\n  </div>\r\n  \r\n  <div [bb-sliding-panel-toggle]=\"panel\"\r\n       #toggle=\"bbSlidingPanelToggle\" \r\n       [toggleOnClick]=\"toggleOnClick\"\r\n       [showOnHover]=\"showOnHover\"\r\n       [showOnInit]=\"expanded\"\r\n       [closeOnClickOutside]=\"closeOnClickOutside\">\r\n      <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n</div>`,\r\n  styles: [`div.menu-container{display:flex;flex:1;flex-direction:row;align-items:center;position:relative;min-height:inherit;max-height:inherit;height:inherit}:host.bb-hamburger-menu.expanded div.menu-items-container{display:flex;flex-direction:row;flex:1;justify-content:space-between}:host.bb-hamburger-menu.expanded div.menu-items,:host.bb-hamburger-menu.expanded div.menu-items-right{display:flex;flex-direction:row;flex-grow:1;flex-shrink:1;flex-basis:auto}:host.bb-hamburger-menu.expanded div.menu-items-right{justify-content:flex-end}:host.bb-hamburger-menu.collapsed div.menu-items-container{display:flex;flex-direction:column;flex:1}:host.bb-hamburger-menu.collapsed div.menu-items,:host.bb-hamburger-menu.collapsed div.menu-items-right{display:flex;flex-direction:column;flex-grow:1;flex-shrink:1;flex-basis:auto}:host.bb-hamburger-menu.expanded div.bb-sliding-panel-toggle{visibility:hidden;width:0}div.bb-sliding-panel-toggle{display:inline-block}:host.collapsed div.menu-items-container{position:absolute;top:100%;left:0;right:0}:host.collapsed div.menu-container{justify-content:space-between}div.menu-items{flex-grow:1;flex-shrink:1;flex-basis:auto}`],\r\n  host: {\r\n    '[class.expanded]': \"expanded\",\r\n    '[class.collapsed]': \"!expanded\",\r\n  },\r\n  exportAs:'bbHamburgerMenu'\r\n})\r\nexport class BBHamburgerMenu implements OnInit, OnDestroy, AfterViewInit {\r\n  @HostBinding('class.bb-hamburger-menu') applyHostClass = true;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n  @ViewChild('toggle') toggle: BBSlidingPanelToggle;\r\n\r\n  @ContentChildren(BBMenuItem, { read:ElementRef, descendants:true }) \r\n  items: QueryList<ElementRef>;\r\n  @ContentChildren(BBMenuItemRight, {read:ElementRef, descendants:true}) \r\n  rightItems: QueryList<ElementRef>;\r\n\r\n  /**\r\n   * Get the items currently being displayed\r\n   * in the hamburger menu.\r\n   */\r\n  public get itemElementRefs(): ElementRef[] {\r\n    return this.items.toArray().concat(this.rightItems.toArray());\r\n  }\r\n\r\n  /**\r\n   * Return if the panel is open or not.\r\n   */\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  /**\r\n   * A css media query as a string that\r\n   * will determine when the hamburger menu\r\n   * should expand the items onto the menu \r\n   * bar and remove the dropdown toggle\r\n   */\r\n  @Input() expandOnQuery: string;\r\n         \r\n  /**\r\n   * Show the menu if the toggle is hovered\r\n   * over.  Defaults to false.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Close the menu if a click happens outside\r\n   * it.  Defaults to true.\r\n   */\r\n  @Input() closeOnClickOutside = true;\r\n\r\n  /**\r\n   * Allow the toggle to work on the\r\n   * click event.\r\n   */\r\n  readonly toggleOnClick = true;\r\n\r\n  /**\r\n   * Cache for the closeOnClickOutside\r\n   * input.\r\n   */\r\n  private _cocoInit = false;\r\n\r\n  /**\r\n   * Use a flag member for the expanded \r\n   * state because host bindings can't \r\n   * use the async pipe so we have to \r\n   * cache the media query results.\r\n   */\r\n  public expanded = false;;\r\n\r\n  /**\r\n   * Track the subscription to the window\r\n   * resize event and media query result\r\n   * stream.\r\n   */\r\n  private expandedSubscription: Subscription;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    /*\r\n     * Save the close on click outside\r\n     * state.  This will be toggled so\r\n     * that the panel doesnt enter the\r\n     * closed state when the menu bar \r\n     * is in the expanded state.\r\n     * \r\n     * Otherwise the panel collapses and\r\n     * the items disappear with no toggle\r\n     * to bring them back.\r\n     */\r\n    this._cocoInit = this.closeOnClickOutside;\r\n    \r\n    /*\r\n     * Determine the initial expansion state\r\n     * based on the media query.\r\n     */\r\n    this.expanded = window.matchMedia(this.expandOnQuery).matches;\r\n\r\n    if(this.expanded) {  \r\n      this.closeOnClickOutside = false;\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    /*\r\n     * Set up the stream\r\n     */\r\n    this.expandedSubscription = \r\n      fromEvent(window,\"resize\")\r\n      .pipe(\r\n        map(_=>window.matchMedia(this.expandOnQuery).matches),\r\n        distinctUntilChanged())\r\n      .subscribe(expanded=>{\r\n          this.expanded = expanded;\r\n          this.togglePanelState();\r\n      });  \r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if(this.expandedSubscription && !this.expandedSubscription.closed) {\r\n      this.expandedSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the state of the panel \r\n   * to showing or hiding based\r\n   * on the cached expanded member\r\n   */\r\n  private togglePanelState() {\r\n    if(this.expanded) {  \r\n      this.closeOnClickOutside = false;\r\n      this.toggle.showPanel();\r\n    }\r\n    else {\r\n      this.closeOnClickOutside = this._cocoInit;\r\n      this.toggle.hidePanel();\r\n    }\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBMenuItem } from './menu-item.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    BBMenuItem,\r\n  ],\r\n  exports: [\r\n    BBMenuItem,\r\n  ]\r\n})\r\nexport class BBCommonModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBCommonModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\nimport { BBHamburgerMenu } from './hamburger-menu.component';\r\nimport { BBMenuItemRight } from './menu-item-right.directive';\r\nimport {BBCommonModule} from '../common/common.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBSlidingPanelModule,\r\n    BBCommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBHamburgerMenu,\r\n    BBMenuItemRight,\r\n  ],\r\n  \r\n  exports: [\r\n    BBHamburgerMenu,\r\n    BBMenuItemRight,\r\n  ]\r\n})\r\nexport class BBHamburgerMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBHamburgerMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n}\r\n","import { \r\n  Component,\r\n  Input,\r\n  ContentChildren,\r\n  QueryList,\r\n  ElementRef,\r\n  EventEmitter,\r\n  TemplateRef,\r\n  ViewRef,\r\n  Renderer,\r\n  ViewChild,\r\n  HostBinding,\r\n  NgZone,\r\n } from '@angular/core';\r\nimport { BBMenuItem } from '../common/menu-item.directive';\r\nimport { BBSlidingPanel } from '../sliding-panel/sliding-panel.component';\r\n\r\n@Component({\r\n  selector: 'div[bb-collapsing-menu]',\r\n  template: `<div class=\"menu-container\">\r\n  <div #displayedItems class=\"displayed\">\r\n  </div>\r\n\r\n  <div  #toggle\r\n        [class.hidden]=\"!hasOverflow\" \r\n        [bb-sliding-panel-toggle]=\"panel\"\r\n        [toggleOnClick]=\"toggleOnClick\"\r\n        [closeOnClickOutside]=\"closeOnClickOutside\"\r\n        [showOnHover]=\"showOnHover\">\r\n    \r\n    <ng-content select=\"[bb-menu-toggle]\"></ng-content>\r\n  </div>\r\n  <div bb-sliding-panel \r\n       #panel=\"bbSlidingPanel\"\r\n       #collapsedItems \r\n       slideDirection=\"down\"\r\n       #panel=\"bbSlidingPanel\">\r\n  </div>\r\n</div>`,\r\n  styles: [`div.displayed{flex-grow:1;flex-direction:row;flex-shrink:0;display:flex}div.menu-container{position:relative;height:inherit;flex-direction:row;display:flex;align-items:center;flex-shrink:0;flex-grow:1}div.bb-sliding-panel{display:flex;flex-direction:column;flex-grow:1;position:absolute;right:0;top:100%}div.hidden{visibility:hidden}`],\r\n  host:{\r\n    '(window:resize)': \"onWindowResize()\",\r\n  },\r\n  exportAs: \"bbCollapsingMenu\"\r\n})\r\nexport class BBCollapsingMenu {\r\n  @HostBinding('class.bb-collapsing-menu') applyHostClass = true;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should  \r\n   * open based on a click event or not.\r\n   */\r\n  @Input() toggleOnClick = true;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should open \r\n   * on mouse over or not.\r\n   */\r\n  @Input() showOnHover = false;\r\n\r\n  /**\r\n   * Controls whether the collapsed items should close\r\n   * When clicked outside the toggle or panel or not.\r\n   */\r\n  @Input() closeOnClickOutside = true;\r\n\r\n  @ContentChildren(BBMenuItem, {read:ElementRef, descendants: false}) \r\n    items: QueryList<ElementRef>;\r\n  @ViewChild('displayedItems', {read:ElementRef}) \r\n    displayedItems: ElementRef;\r\n  @ViewChild('collapsedItems', {read:ElementRef}) \r\n    collapsedItems: ElementRef;\r\n  @ViewChild('toggle', {read:ElementRef}) \r\n    toggle: ElementRef;\r\n\r\n  @ViewChild('panel') panel: BBSlidingPanel;\r\n\r\n  public get isOpen() {\r\n    return this.panel.isShowing;\r\n  }\r\n\r\n  /**\r\n   * Per issue 10098 ContentChildren currently also adds the host component\r\n   * to a QueryList that it satisfies making it necessary to filter the \r\n   * host component out of it's own list in case someone wants to nest\r\n   * a collapsing menu inside another BB component that uses BBMenuItems.\r\n   * \r\n   * https://github.com/angular/angular/issues/10098#issuecomment-235157642\r\n   */\r\n  private get itemElements(): ElementRef[] {\r\n    return this.items.toArray()\r\n      .filter(el=> el.nativeElement !== this.hostElementRef.nativeElement);\r\n  }\r\n\r\n  private get hostDiv(): HTMLDivElement {\r\n    return this.hostElementRef.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get displayedDiv(): HTMLDivElement {\r\n    return this.displayedItems.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get collapsedDiv(): HTMLDivElement {\r\n    return this.collapsedItems.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  private get toggleDiv(): HTMLDivElement {\r\n    return this.toggle.nativeElement as HTMLDivElement;\r\n  }\r\n\r\n  hasOverflow = false;\r\n\r\n  constructor(\r\n    private renderer: Renderer, \r\n    private hostElementRef: ElementRef,\r\n    private zone: NgZone) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.calculateOverflow();\r\n  }\r\n\r\n  /**\r\n   * Determine which, if any, items need to be \r\n   * moved into the collapsed panel when they \r\n   * overflow the menu width.\r\n   */\r\n  private calculateOverflow() {\r\n      this.renderer.projectNodes(this.displayedDiv, \r\n        this.itemElements.map(el=>{ return el.nativeElement }));\r\n\r\n      if(this.areDisplayedItemsToWide()) {\r\n\r\n        this.zone.run(()=>{\r\n          setTimeout(()=>{\r\n            this.hasOverflow = true})});\r\n\r\n        const menuCalcedRight = \r\n          (this.hostDiv.offsetLeft + \r\n          this.hostDiv.offsetWidth - \r\n          this.toggleDiv.offsetWidth);\r\n\r\n        let firstOverflowIndex = Number.POSITIVE_INFINITY;\r\n        let overflowAmount = 0;\r\n                   \r\n        // find the first item that is outside the menu's size - toggle size\r\n        for(let i = 0; i < this.itemElements.length; i++) {\r\n          const ele = (this.itemElements[i].nativeElement as HTMLElement);\r\n          const eleCalcedRight = (ele.offsetLeft + this.hostDiv.offsetLeft + ele.offsetWidth);\r\n\r\n          // calculate how much an item overflows the container\r\n          // taking the toggles width into account.\r\n          overflowAmount = eleCalcedRight - menuCalcedRight;\r\n\r\n          if(overflowAmount > 0) {\r\n            firstOverflowIndex = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        // all items are collapsed\r\n        if (firstOverflowIndex == 0) {\r\n            this.renderer.projectNodes(this.collapsedDiv,\r\n              this.itemElements.map(el=>{return el.nativeElement}));\r\n        }\r\n\r\n        // the overflow items make enough room for the toggle\r\n        else {\r\n            this.renderer.projectNodes(this.collapsedDiv,\r\n              this.itemElements\r\n                .filter((el,index)=>{\r\n                  return (index >= firstOverflowIndex)})\r\n                .map(el=>{return el.nativeElement}));\r\n        }\r\n      }\r\n      else {\r\n        this.zone.run(()=>{\r\n          setTimeout(()=>{\r\n            this.hasOverflow = false})});\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Determine if the menu content width is larger than the menu width\r\n   */\r\n  private areDisplayedItemsToWide() {\r\n    return this.displayedDiv.getBoundingClientRect().width > \r\n      this.hostDiv.getBoundingClientRect().width;\r\n  }\r\n\r\n  /**\r\n   * Event handlers\r\n   */\r\n\r\n  onWindowResize() {\r\n    this.calculateOverflow();\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBCommonModule } from '../common/common.module';\r\nimport { BBCollapsingMenu } from './collapsing-menu.component';\r\nimport { BBSlidingPanelModule } from '../sliding-panel/sliding-panel.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    BBCommonModule,\r\n    BBSlidingPanelModule\r\n  ],\r\n  declarations: [BBCollapsingMenu],\r\n  exports: [BBCollapsingMenu]\r\n})\r\nexport class BBCollapsingMenuModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBCollapsingMenuModule,\r\n      providers: []\r\n    };\r\n  }\r\n }\r\n","import { \r\n    Component, \r\n    OnInit, \r\n    Input, \r\n    Output,\r\n    EventEmitter,\r\n    ViewChild, \r\n    ElementRef } from '@angular/core';\r\nimport { Observable ,  fromEvent } from 'rxjs';\r\nimport { map ,  debounceTime ,  distinctUntilChanged } from 'rxjs/operators';\r\nimport { BBMultiSelectItem } from './multi-select-item.interface';\r\n\r\n@Component({\r\n    selector: 'div[bb-multi-select]',\r\n    template: `<input class=\"selections-filter\" #filter [attr.placeholder]=\"placeholderText\"/>\r\n<div class=\"container-labels\">\r\n    <span>Items</span><span>Selected</span>\r\n</div>\r\n<div class=\"selections-container\">\r\n    <div class=\"choices\">\r\n        <ul>\r\n            <li *ngFor=\"let choice of choices\">\r\n                <a (click)=\"onChoiceClicked(choice)\">{{choice.text}}</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"selections\">\r\n        <ul>\r\n            <li *ngFor=\"let selection of selections\">\r\n                <a (click)=\"onSelectionClicked(selection)\">{{selection.text}}</a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>`,\r\n    styles: [`:host div{display:flex;flex-direction:column}input.selections-filter{justify-content:center}div.container-labels,div.selections-container{width:inherit;display:flex;flex-direction:row;justify-content:space-between}.selections-container ul{padding-left:0}.choices ul,.selections ul{list-style:none}div.container-labels{border-bottom:1px solid #000}`],\r\n})\r\nexport class BBMultiSelectComponent implements OnInit {\r\n    @Input() placeholderText = \"Search...\";\r\n    @Input() filterChangeDelayms = 200;\r\n\r\n    @Input() selectionItems: BBMultiSelectItem[];\r\n\r\n    get choices(): BBMultiSelectItem[] {\r\n        return this.selectionItems.filter(item=>{ return !item.selected});\r\n    }\r\n\r\n    get selections(): BBMultiSelectItem[] {\r\n        return this.selectionItems.filter(item=>{ return item.selected});\r\n    }\r\n\r\n    @ViewChild('filter') filterInput: ElementRef;\r\n\r\n    @Output() itemSelected = new EventEmitter<BBMultiSelectItem>();\r\n    @Output() itemUnselected = new EventEmitter<BBMultiSelectItem>();\r\n\r\n    constructor() {\r\n        console.log('Warning this component is still under heavy development.');\r\n        console.log('It isn\\'t completely functional yet and is subject to change.');\r\n    }\r\n\r\n    ngOnInit() { \r\n        fromEvent(this.filterInput.nativeElement, 'keyup')\r\n        .pipe(\r\n            map((event:KeyboardEvent)=>(event.target as HTMLInputElement).value),\r\n            debounceTime(this.filterChangeDelayms),\r\n            distinctUntilChanged())\r\n        .subscribe(\r\n            filterText=> this.filterItems(filterText)\r\n        );\r\n\r\n        // temp testing code\r\n        if(!this.selectionItems) {\r\n            this.selectionItems = [\r\n                {\r\n                    text: 'Name',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Position',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Year of Birth',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Rookie Season',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Height',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Weight',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Forty Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Bench Weight',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Vertical Jump',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Broad Jump',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Shuttle Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Cone Time',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Draft Position',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'College',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'College Division',\r\n                    payload: {},\r\n                    selected: false,\r\n                },\r\n                {\r\n                    text: 'Current Team',\r\n                    payload: {},\r\n                    selected: false,\r\n                }\r\n            ];\r\n        }\r\n\r\n        this.selections.push(this.choices[1]);\r\n    }\r\n\r\n    onChoiceClicked(item: BBMultiSelectItem) {\r\n        item.selected = true;\r\n        this.itemSelected.emit(item);\r\n    }\r\n\r\n    onSelectionClicked(item: BBMultiSelectItem) {\r\n        item.selected = false;\r\n        this.itemUnselected.emit(item);\r\n    }\r\n\r\n    filterItems(text: string) {\r\n        console.log(text);\r\n    }\r\n}\r\n\r\n\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BBMultiSelectComponent } from './multi-select.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  \r\n  declarations: [\r\n    BBMultiSelectComponent\r\n  ],\r\n  \r\n  exports: [\r\n    BBMultiSelectComponent\r\n  ]\r\n})\r\nexport class BBMultiSelectModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: BBMultiSelectModule,\r\n      providers: []\r\n    };\r\n  }  \r\n}\r\n","import { Subscription } from 'rxjs';\r\n\r\nexport function closeSubscription(sub: Subscription) {\r\n    if(sub && !sub.closed) {\r\n        sub.unsubscribe();\r\n    }\r\n}","export const bbDnDType = \"bb/dnd\";","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class BBDragAndDropService {\n\n  constructor() { }\n\n}\n","import { \n  Directive, \n  OnInit, \n  ElementRef, \n  ViewRef, \n  ViewContainerRef, \n  TemplateRef, \n  EmbeddedViewRef, \n  OnDestroy,\n  EventEmitter,\n  Output} from '@angular/core';\nimport { Observable ,  Subscription ,  fromEvent } from 'rxjs';\nimport { bbDnDType } from './../dnd.const';\nimport { closeSubscription } from '../../common';\nimport { BBDragAndDropService } from '../drag-and-drop.service';\nimport { BBVector, BBDragStartEvent } from './../dnd.models';\n\n/**\n * BB Draggable Structural Directive\n */\n@Directive({\n  selector: '[bbDraggable]'\n})\nexport class BBDraggableDirective implements OnInit, OnDestroy {\n  @Output() dragStartedOnView = new EventEmitter<BBDragStartEvent>();\n  @Output() dragEndedOnView = new EventEmitter<ViewRef>();\n  \n  /**\n   * \n   */\n  public get isBeingDragged() {\n    return this._isBeingDragged;\n  }\n\n  /**\n   * \n   */\n  public get draggableTemplateRef() {\n    return this.templateRef;\n  }\n\n  /**\n   * \n   */\n  private draggableViewRef: ViewRef;\n\n  /**\n   * \n   */\n  private embeddedTemplateRef: EmbeddedViewRef<any>;\n\n  /**\n   * \n   */\n  private dragStartSubscription: Subscription;\n\n  /**\n   * \n   */\n  private dragEndSubscription: Subscription;\n\n  /**\n   * \n   */\n  private set isDragged(dragged: boolean) {\n    this._isBeingDragged = dragged;\n\n    if(this._isBeingDragged) {\n      //this.dragStartedOnView.next(this.draggableViewRef);\n      //this.viewContainer.detach();\n    } else {\n      //this.dragEndedOnView.next(this.draggableViewRef);\n      //this.viewContainer.insert(this.draggedViewRef);\n    }\n  }\n\n  /**\n   * \n   */\n  private _isBeingDragged = false;\n\n  /**\n   * \n   */\n  private context = new DraggableContext();\n\n  /**\n   * \n   * @param dndService \n   * @param templateRef \n   */\n  constructor(\n    private dndService: BBDragAndDropService,    \n    private templateRef: TemplateRef<any>\n  ) {\n  }\n\n  /**\n   * \n   */\n  ngOnInit() {\n    /*\n    this.embeddedTemplateRef = \n      this.viewContainer.createEmbeddedView(this.templateRef);\n    this.registerDragAndDropEvents(this.embeddedTemplateRef.rootNodes[0]);\n    this.draggedViewRef = this.viewContainer.get(0);\n    */\n  }\n\n  /**\n   * \n   */\n  ngOnDestroy() {\n    closeSubscription(this.dragStartSubscription);\n    closeSubscription(this.dragEndSubscription);\n  }\n\n  /**\n   * \n   * @param target \n   */\n  registerDragAndDropEvents(view: EmbeddedViewRef<any>) {\n    this.draggableViewRef = view;\n    let target = view.rootNodes[0] as HTMLElement;\n\n    target.setAttribute(\"draggable\",\"true\");\n\n    this.dragStartSubscription = \n      fromEvent<DragEvent>(target,\"dragstart\")\n        .subscribe((event: DragEvent)=>{\n          event.dataTransfer.setData(bbDnDType,'bbdraggable');\n          //event.dataTransfer.effectAllowed = \"move\";\n          //event.dataTransfer.setDragImage(\n          //  target.cloneNode(true) as HTMLElement,0,0);\n\n          let rect = event.srcElement.getBoundingClientRect();\n          let y = rect.top + (rect.height / 2);\n          let x = rect.left + (rect.width / 2);\n          console.log(x,y);\n\n          let e: BBDragStartEvent = {\n            view: this.draggableViewRef,\n            mouseOffset: {\n              offsetX: event.clientX - x,\n              offsetY: event.clientY - y\n            }\n          }\n\n          /*\n          let center = document.createElement(\"div\") as HTMLDivElement;\n          center.style.position = 'absolute';\n          center.style.left = `${mouseOffset.offsetX}px`;\n          center.style.top = `${mouseOffset.offsetY}px`;\n          center.style.borderRadius= \"20px\"\n          center.style.height = \"20px\";\n          center.style.width= \"20px\";\n          \n          let i = new Image();\n          \n          let clone = event.srcElement.cloneNode(true) as HTMLLIElement;\n          clone.appendChild(center);\n          i.appendChild(clone);\n          console.log(i);\n          event.dataTransfer.setDragImage(\n             i,event.pageX, event.pageY);\n          */\n\n          /*\n          event.dataTransfer.setDragImage(\n            event.srcElement,event.clientX, event.clientY);\n          */\n\n          /* Chrome calls dragend if the dom is changed during  */\n          /* drag start so in order to not call dragend         */\n          /* immediately we have to fire the dom manipulations  */\n          /* outside of the event                               */\n          setTimeout(()=>{\n            this.dragStartedOnView.next(e)\n          });\n        },\n        err=>console.log(err),\n        ()=>{});\n\n    this.dragEndSubscription = \n    fromEvent(target,\"dragend\")\n        .subscribe((event: DragEvent)=>{\n          //this.isDragged = false;\n          this.dragEndedOnView.next(this.draggableViewRef);\n        },\n        err=>console.log(err),\n        ()=>{});\n  }\n\n\n}\n\nexport class DraggableContext {\n  public implicit$: any = null;\n}\n","import { \n  Directive, \n  OnInit, \n  QueryList, \n  AfterContentInit, \n  ContentChildren,  \n  ElementRef,\n  ViewContainerRef,\n  Component,\n  ViewChild,\n  TemplateRef,\n  EmbeddedViewRef,\n  ViewRef,\n  OnDestroy} from '@angular/core';\nimport { BBDraggableDirective } from '../draggable/draggable.directive';\nimport { Observable ,  Subscription ,  fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { bbDnDType } from './../dnd.const';\nimport { BBDragAndDropService } from '../drag-and-drop.service';\nimport { BBDragStartEvent, BBVector } from '../dnd.models';\n\n@Component({\n  selector: '[bbDnDContainer]',\n  template: `<ng-container #dndContainer></ng-container>\r\n\r\n<ng-content></ng-content>\r\n`,\n  styles: [``]\n})\nexport class BBDragAndDropContainerComponent implements OnInit, AfterContentInit, OnDestroy {\n  @ContentChildren(BBDraggableDirective) draggablesQL: QueryList<BBDraggableDirective>;\n  @ViewChild(\"dndContainer\", {read: ViewContainerRef}) dndContainer: ViewContainerRef;\n  \n  private draggingMouseOffset: BBVector;\n  private dragStartEvent: BBDragStartEvent;\n  private draggableEmbeddedViews: EmbeddedViewRef<any>[] = [];\n  private dragSubscriptions: Subscription[] = [];\n\n  private readonly DefaultDragLocationTarget: DragLocationTarget = {\n    lowIndex: -1, \n    highIndex: -1,\n    viewBeingDragged: null\n  };\n\n  private dragLocation : DragLocationTarget = this.DefaultDragLocationTarget;\n  \n  constructor(\n    private dndService: BBDragAndDropService,\n    private hostElementRef: ElementRef    \n  ) {\n    console.warn('BB Drag and Drop is still under development.')\n  }\n\n  ngOnInit() {\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragenter\")\n      .subscribe(this.onDragEnter));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragover\")\n      .pipe(\n        debounceTime(50))\n      .subscribe(this.onDragOver));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"dragover\")\n      .subscribe((e:Event)=>\n        e.preventDefault()));\n\n    this.dragSubscriptions.push(\n    fromEvent(this.hostElementRef.nativeElement,\"drop\")\n      .subscribe(this.onDrop));\n  }\n\n  ngAfterContentInit() {\n    this.dragSubscriptions.push(\n    this.draggablesQL\n      .changes\n      .subscribe((draggables:BBDraggableDirective[])=>{\n      }));\n    console.log(\"container\");\n    console.log(this.dndContainer);\n    this.draggablesQL.map(this.initDraggable);\n  }\n\n  ngOnDestroy() {\n    this.dragSubscriptions.forEach(sub=>{\n      if(!sub.closed) {\n        sub.unsubscribe();\n      }\n    })\n  }\n\n  /**\n   * \n   * @param draggable \n   * @param index \n   */\n  initDraggable = (draggable: BBDraggableDirective, index: number) => {\n    let embeddedViewRef = \n      this.dndContainer.createEmbeddedView(draggable.draggableTemplateRef)\n    this.draggableEmbeddedViews.push(embeddedViewRef);\n    draggable.registerDragAndDropEvents(embeddedViewRef);\n    this.dragSubscriptions.push(\n      draggable.dragStartedOnView.subscribe(this.onDragStart));\n    this.dragSubscriptions.push(\n      draggable.dragEndedOnView.subscribe(this.onDragEnd));\n  }\n\n  /**\n   * \n   * @param event \n   */\n  onDragStart = (event: BBDragStartEvent) => {\n    this.dragStartEvent = event;\n    this.draggingMouseOffset = event.mouseOffset;\n    let viewIndex = this.dndContainer.indexOf(event.view);\n    this.dndContainer.detach(viewIndex);\n    this.draggableEmbeddedViews.splice(viewIndex,1);\n  }\n\n  /**\n   * \n   * @param view \n   */\n  onDragEnd = (view: EmbeddedViewRef<any>) => {\n    //this.dndContainer.insert(view);\n    return;\n  }\n\n  onDragEnter = (event:DragEvent) => {\n    console.log(\"dragenter\");\n    event.dataTransfer.dropEffect = \"move\";\n    event.preventDefault();\n  }\n\n  onDragOver = (event:DragEvent) => {\n    console.log(\"dragover\");\n    // console.log(event.dataTransfer.types);\n    let shortestDistance = Number.MAX_SAFE_INTEGER;\n    let closestView: EmbeddedViewRef<any> = null;\n    let closestIndex = 0; \n    let nextClosestIndex = 0;\n\n    this.draggableEmbeddedViews\n      /*\n       * TODO: Long term optimization maybe use the item\n       * filtered out's index as the starting location\n       * for further hit tests since we know that it\n       * is the one being dragged.  Ie.  If Index 4 is\n       * filtered out then start hit tests at index 3 \n       * and 5 instead of starting hit tests at index \n       * 0 and checking all items.\n       */\n      .filter(view=>view!==this.dragStartEvent.view)\n      .map(view=>{\n        let element = (view.rootNodes[0] as HTMLElement);\n        let rect = element.getBoundingClientRect();\n        return {\n          view: view,\n          x: rect.left + (rect.width / 2),\n          y: rect.top + (rect.height / 2)\n        }})\n      .forEach((centerCoordinates, i) =>{\n        let dy = this.calculate1DimensionDistance(\n          centerCoordinates.y,\n          event.clientY + this.dragStartEvent.mouseOffset.offsetY);\n\n        console.log(`${i} = ${dy} y's: ${centerCoordinates.y} - ${event.clientY} + ${this.dragStartEvent.mouseOffset.offsetY}`)\n          \n        let distance = Math.abs(dy);\n\n        if(distance < shortestDistance) {\n          shortestDistance = distance;\n          closestView = centerCoordinates.view;\n          closestIndex = i;\n\n          // determine which side of the closest draggable\n          // the draggable being dragged is on and set the\n          // next closest accordingly\n          nextClosestIndex = (dy < 0)? closestIndex + 1: closestIndex - 1;\n\n          this.dragLocation = {\n            lowIndex: Math.min(closestIndex,nextClosestIndex),\n            highIndex: Math.max(closestIndex,nextClosestIndex),\n            viewBeingDragged: this.dragStartEvent.view\n          };\n        }\n      });\n\n    event.preventDefault();\n\n    /* this signifies that the container is a valid drop target  */\n    /* TODO: doesn't work at the moment? the BBDnDType is never */\n    /* properly attached to the event even though I am setting   */\n    /* the type inside the draggable directive event...          */\n    /*\n    if(event.dataTransfer.types.includes(bbDnDType)) {\n      console.log('bb transfer detected');\n    }\n    */\n  }\n\n  onDrop = (event:DragEvent) => {\n    this.dndContainer.insert(\n      this.dragLocation.viewBeingDragged,\n      this.dragLocation.highIndex);\n\n    this.draggableEmbeddedViews.splice(\n      this.dragLocation.highIndex,\n      0,\n      this.dragLocation.viewBeingDragged as EmbeddedViewRef<any>);\n  }\n\n  /**\n   * \n   * @param p1 \n   * @param p2 \n   */\n  private calculate1DimensionDistance(p1: number, p2: number) {\n    return p1 - p2;\n  }\n\n  /**\n   * \n   * @param x1 \n   * @param x2 \n   * @param y1 \n   * @param y2 \n   */\n  private calculate2DimensionDistance(x1: number,x2: number,y1: number,y2: number) {\n    return Math.sqrt(\n      this.calculate1DimensionDistance(x1,x2)**2 + \n      this.calculate1DimensionDistance(y1,y2)**2);\n  }\n\n    \n  \n}\n\nexport interface DragLocationTarget {\n  lowIndex: number;\n  highIndex: number;\n  viewBeingDragged: ViewRef;\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BBDragAndDropContainerComponent } from './drag-and-drop-container/drag-and-drop-container.component';\nimport { BBDraggableDirective } from './draggable/draggable.directive';\nimport { BBDragAndDropService } from './drag-and-drop.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    BBDragAndDropContainerComponent,\n    BBDraggableDirective\n  ],\n  exports: [\n    BBDragAndDropContainerComponent,\n    BBDraggableDirective\n  ],\n  providers: [BBDragAndDropService]\n})\nexport class BBDragAndDropComponentModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDragAndDropComponentModule,\n      providers: []\n    };\n  }\n }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TabService {\n  activeTab: string = '';\n  tabsets = {};\n\n  constructor() { }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { TabService } from './tab.service';\n\n@Directive({\n  selector: '[bbTab]'\n})\nexport class TabDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public tabService: TabService\n  ) { }\n\n  @Input('bbtab') tabName: string;\n  @Input('bbtabset') tabset: string;\n  @Input('bbactive') active: boolean;\n  @Input('bbactiveclass') activeClass: string;\n\n  @Output() bbshowstart = new EventEmitter();\n  @Output() bbshowend = new EventEmitter();\n\n  ngOnInit() {\n      if (this.active) {\n          this.bbshowstart.emit(this.tabName);\n          this.tabService.tabsets[this.tabset] = {};\n          this.setActive();\n      }\n  }\n\n  @HostListener('click', ['$event']) onClick(event) {\n      this.bbshowstart.emit(this.tabName);\n      event.preventDefault();\n      this.setActive();\n  }\n\n  setActive() {\n      let parentElement = this.el.nativeElement.parentNode;\n      let child = this.el.nativeElement.children[0];\n\n      let activeClassElement = 'none';\n      let activeClassTarget = 'none';\n\n      // Find out if this element, the parent element, or child elements have an active class set.\n      // Order of precedence: Parent, tab, child.\n      if (parentElement.hasAttribute('bbactiveclass')) {\n          activeClassElement = 'parent';\n          activeClassTarget = parentElement.attributes['bbtarget'].value;\n      }\n\n      if (this.activeClass) {\n          activeClassElement = 'tab';\n      }\n\n      if (child) {\n          if (child.hasAttribute('bbactiveclass')) {\n              activeClassElement = 'child';\n          }\n      }\n\n      // If the tab element itself has it set, apply it.\n      if (activeClassElement === 'tab') {\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  this.renderer.removeClass(parentElement.children[i], this.activeClass);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          this.renderer.addClass(this.el.nativeElement, this.activeClass);\n      } else if (activeClassElement === 'child') {\n          let childActiveClass = child.attributes.bbactiveclass.value;\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  this.renderer.removeClass(parentElement.children[i].children[0], childActiveClass);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          this.renderer.addClass(child, childActiveClass);\n\n      } else if (activeClassElement === 'parent') {\n          let parentActiveClass = parentElement.attributes.bbactiveclass.value;\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n                  if (activeClassTarget === 'tab') {\n                      this.renderer.removeClass(parentElement.children[i], parentActiveClass);\n                  } else if (activeClassTarget === 'child') {\n                      this.renderer.removeClass(parentElement.children[i].children[0], parentActiveClass);\n                  }\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n          if (activeClassTarget === 'tab') {\n              this.renderer.addClass(this.el.nativeElement, parentActiveClass);\n          } else if (activeClassTarget === 'child') {\n              this.renderer.addClass(this.el.nativeElement.children[0], parentActiveClass);\n          }\n      } else {\n          // There are no child elements and bbactiveClass isn't set.\n          for(let i = 0; i < parentElement.children.length; i++) {\n              if (parentElement.children[i].hasAttribute('bbtab')) {\n                  this.renderer.setProperty(parentElement.children[i], 'bbactive', false);\n              }\n          }\n          this.renderer.setProperty(this.el.nativeElement, 'bbactive', true);\n      }\n      this.tabService.tabsets[this.tabset]['activeTab'] = this.tabName;\n      this.bbshowend.emit(this.tabName);\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\nimport { TabService } from './tab.service';\n\n@Directive({\n  selector: '[bbTabContent]'\n})\nexport class TabContentDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public tabService: TabService\n  ) { }\n\n  @Input('bbtabcontent') name: string;\n  @Input('bbtabset') tabset: string;\n\n  ngOnInit() {\n      this.setVisibility();\n  }\n\n  ngDoCheck() {\n      this.setVisibility();\n  }\n\n  setVisibility() {\n      let display = this.tabService.tabsets[this.tabset].activeTab === this.name ? 'block' : 'none';\n      this.renderer.setStyle(this.el.nativeElement, 'display', display);\n}\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TabService } from './tab.service';\nimport { TabDirective } from './tab.directive';\nimport { TabContentDirective } from './tab-content.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  \n  declarations: [\n    TabDirective,\n    TabContentDirective\n  ],\n  \n  exports: [\n    TabDirective,\n    TabContentDirective\n  ]\n})\nexport class BBTabModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBTabModule,\n      providers: [TabService]\n    };\n  }\n }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DragAndDropService {\n  el: any;\n  dropzoneIndex: number;\n  droppableIndex: number;\n  model: Array<any>;\n  dropzones: Array<string> = [];\n\n  constructor() { }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { DragAndDropService } from './drag-and-drop.service';\n\n@Directive({\n  selector: '[bbDropper]'\n})\nexport class DropperDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2,\n    public dndService: DragAndDropService\n  ) {\n      el.nativeElement.draggable = true;\n      el.nativeElement.dragstart = this.dragstart;\n      el.nativeElement.dragend = this.dragend;\n  }\n\n  ngOnInit() {\n      if (this.bbdropperClass) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropperClass);\n      }\n  }\n\n  @Input('bbdropper') name: string;\n  @Input('bbdropperClass') bbdropperClass: string;\n  @Input('bbholdingClass') bbholdingClass: string;\n  @Input('bbpayload') bbpayload:string;\n  @Input('bbdropperId') bbdropperId: string;\n  @Output() bbstart = new EventEmitter();\n  @Output() bbend = new EventEmitter();\n\n  @HostListener('dragstart', ['$event']) dragstart(event:any) {\n      if (this.bbholdingClass !== undefined) {\n          this.renderer.addClass(this.el.nativeElement, this.bbholdingClass);\n      }\n      event.dataTransfer.setData('text/plain', this.bbpayload || null);\n      this.dndService.el = this.el;\n      if(this.bbdropperId) {\n          this.bbstart.emit(this.bbdropperId);\n      }\n  }\n\n  @HostListener('dragend') dragend() {\n      if (this.bbholdingClass !== undefined) {\n          this.renderer.removeClass(this.el.nativeElement, this.bbholdingClass);\n      }\n      if(this.bbdropperId) {\n          this.bbstart.emit(this.bbdropperId);\n      }\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, HostListener, EventEmitter } from '@angular/core';\nimport { DragAndDropService } from './drag-and-drop.service';\n\n@Directive({\n  selector: '[bbDropZone]'\n})\nexport class DropZoneDirective {\n  constructor(\n    public el: ElementRef,\n    public dndService: DragAndDropService,\n    public renderer: Renderer2\n  ) { }\n\n  ngOnInit() {\n      if (this.bbdropzoneClass !== undefined) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (!this.dndService.dropzones.includes(this.name)) {\n          this.dndService.dropzones.push(this.name);\n      }\n  }\n\n  @Input('bbdropzone') name: string;\n\n  @Input('bbdropzoneClass') bbdropzoneClass: string;\n  @Input('bbdropzoneHoverClass') bbdropzoneHoverClass: string;\n  @Input('bbdropzoneId') bbdropzoneId: string;\n  @Output() bbdata = new EventEmitter();\n  @Output() bbenter = new EventEmitter();\n  @Output() bbleave = new EventEmitter();\n  @Output() bbdrop = new EventEmitter();\n\n  @HostListener('dragover', ['$event']) dragover(event) {\n      event.preventDefault();\n  }\n\n  @HostListener('dragenter') dragenter() {\n      if (this.bbdropzoneHoverClass) {\n          this.renderer.addClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (this.bbdropzoneId) {\n          this.bbenter.emit(this.bbdropzoneId);\n      }\n  }\n\n  @HostListener('dragleave') dragleave() {\n      if (this.bbdropzoneHoverClass) {\n          this.renderer.removeClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n      }\n      if (this.bbdropzoneId) {\n          this.bbleave.emit(this.bbdropzoneId);\n      }\n  }\n\n  @HostListener('drop', ['$event']) drop(event) {\n      event.preventDefault();\n      this.renderer.removeClass(this.el.nativeElement, this.bbdropzoneHoverClass);\n\n      let dropped = this.dndService.el.nativeElement;\n      if (dropped.attributes.bbdropper.value === this.name) {\n          this.renderer.removeChild(this.dndService.el.nativeElement.parentNode, this.dndService.el.nativeElement);\n          this.renderer.appendChild(this.el.nativeElement, this.dndService.el.nativeElement);\n          if (dropped.attributes.bbpayload) {\n              this.bbdata.emit(dropped.attributes.bbpayload.value);\n          }\n      }\n      if (this.bbdropzoneId) {\n          this.bbdrop.emit(this.bbdropzoneId);\n      }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DragAndDropService } from './drag-and-drop.service';\nimport { DropperDirective } from './dropper.directive';\nimport { DropZoneDirective } from './drop-zone.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    DropperDirective,\n    DropZoneDirective,\n  ],\n  exports: [\n    DropperDirective,\n    DropZoneDirective,\n  ]\n})\nexport class BBDragAndDropModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBDragAndDropModule,\n      providers: [DragAndDropService]\n    };\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[bbSortable]'\n})\nexport class SortableDirective {\n  constructor(\n    public el: ElementRef,\n    public renderer: Renderer2\n  ) { }\n\n  @Input('bbsortable') name: string;\n  @Input('bboptions') options: any;\n\n  // Event emitters\n  @Output() orderChanged = new EventEmitter();\n  @Output() bbstart = new EventEmitter();\n  @Output() bbend = new EventEmitter();\n  @Output() bbenter = new EventEmitter();\n  @Output() bbleave = new EventEmitter();\n  @Output() bbdrop = new EventEmitter();\n\n  draggedItem:number;\n  dropTarget:any;\n\n  ngOnInit() {\n      if (!this.options) {\n          this.options = {};\n      }\n  }\n\n  ngAfterContentInit() {\n      this.initChildren();\n  }\n\n  // Dropper listeners\n  @HostListener('dragstart', ['$event']) dragstart(event) {\n      event.dataTransfer.setData('text/plain', event.target['bbvalue'] || null);\n      if (this.options.holdingClass !== undefined) {\n          this.renderer.addClass(event.target, this.options.holdingClass);\n      }\n\n      this.draggedItem = +event.target['bbsortable-index'];\n      this.bbstart.emit(this.draggedItem);\n  }\n\n  @HostListener('dragend', ['$event']) dragend(event) {\n      if (this.options.holdingClass !== undefined) {\n          this.renderer.removeClass(event.target, this.options.holdingClass);\n      }\n      this.bbend.emit(this.draggedItem);\n  }\n\n  // Dropzone listeners\n  @HostListener('dragover', ['$event']) dragover(event:any) {\n      event.preventDefault();\n  }\n\n  @HostListener('dragenter', ['$event']) dragenter(event:any) {\n      if (this.options.hoverClass !== undefined) {\n          if (event.target['bbsortable-name'] === this.name && event.target['bbsortable-index'] !== this.draggedItem) {\n              this.renderer.addClass(event.target, this.options.hoverClass);\n          } else {\n              this.updateDropzoneClass(event, this.options.hoverClass, true);\n          }\n      }\n      this.bbenter.emit(+event.target['bbsortable-index']);\n  }\n\n  @HostListener('dragleave', ['$event']) dragleave(event:any) {\n      if (this.options.hoverClass !== undefined) {\n          if (event.target['bbsortable-name'] === this.name && event.target['bbsortable-index'] !== this.draggedItem) {\n              this.renderer.removeClass(event.target, this.options.hoverClass);\n          } else {\n              this.updateDropzoneClass(event, this.options.hoverClass, false);\n          }\n      }\n      this.bbleave.emit(+event.target['bbsortable-index']);\n  }\n\n  @HostListener('drop', ['$event']) drop(event:any) {\n      event.preventDefault();\n\n      let doDrop:boolean = false;\n\n      let dropTarget:any = event.target;\n      if (dropTarget['bbsortable-name'] !== this.name) {\n          while (dropTarget.parentNode !== null) {\n              if (dropTarget.parentNode['bbsortable-name'] === this.name) {\n                  dropTarget = dropTarget.parentNode;\n                  doDrop = true;\n                  break;\n              } else {\n                  dropTarget = dropTarget.parentNode\n              }\n          }\n      } else {\n          doDrop = true;\n      }\n\n      if (doDrop) {\n          if (this.options.hoverClass !== undefined) {\n              this.renderer.removeClass(dropTarget, this.options.hoverClass);\n          }\n          let draggedItem = this.draggedItem;\n          let newPosition = dropTarget['bbsortable-index'];\n\n          if (draggedItem > newPosition) {\n              for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n                  if (i >= newPosition && i < draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i + 1);\n                  }\n\n                  if (i === draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', newPosition);\n                  }\n              }\n          } else {\n              for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n                  if (i > draggedItem && i <= newPosition) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i - 1);\n                  }\n\n                  if (i === draggedItem) {\n                      this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', newPosition);\n                  }\n              }\n          }\n          this.bbdrop.emit(+newPosition);\n          this.orderChanged.emit({ draggedItem, newPosition });\n      }\n  }\n\n  initChildren() {\n      for(let i = 0; i < this.el.nativeElement.children.length; i++) {\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'draggable', true);\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-index', i);\n          this.renderer.setProperty(this.el.nativeElement.children[i], 'bbsortable-name', this.name);\n\n          if (this.options.restingClass) {\n              this.renderer.addClass(this.el.nativeElement.children[i], this.options.restingClass);\n          }\n      }\n  }\n\n  updateDropzoneClass(event:any, cssClass:string, adding:boolean) {\n      let parentNode = event.target.parentNode;\n      while (parentNode !== null) {\n          if (parentNode['bbsortable-name'] === this.name && parentNode['bbsortable-index'] !== this.draggedItem) {\n              if (adding && !parentNode.classList.contains(cssClass)) {\n                  this.renderer.addClass(parentNode, cssClass);\n              } else {\n                  this.renderer.removeClass(parentNode, cssClass);\n              }\n              break;\n          } else {\n              parentNode = parentNode.parentNode;\n          }\n      }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SortableDirective } from './sortable.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SortableDirective,\n  ],\n  exports: [\n    SortableDirective,\n  ]\n})\nexport class BBSortableModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: BBSortableModule,\n      providers: []\n    };\n  }\n }\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { BBSlidingPanelModule } from './sliding-panel/index';\r\nimport { BBDropdownMenuModule } from './dropdown-menu/index';\r\nimport { BBSlideoutMenuModule } from './slideout-menu/index';\r\nimport { BBDropdownInputModule } from './dropdown-input/index';\r\nimport { BBHamburgerMenuModule } from './hamburger-menu/index';\r\nimport { BBCollapsingMenuModule } from './collapsing-menu/index';\r\nimport { BBMultiSelectModule } from './multi-select/index';\r\nimport { BBCommonModule } from './common/index';\r\nimport { BBDragAndDropComponentModule } from './drag-and-drop-component/index';\r\nimport { BBTabModule } from './tab/index';\r\nimport { BBDragAndDropModule } from './drag-and-drop/index';\r\nimport { BBSortableModule } from './sortable/index';\r\n\r\nconst BB_MODULES = [\r\n    BBSlidingPanelModule,\r\n    BBDropdownMenuModule,\r\n    BBSlideoutMenuModule,\r\n    BBDropdownInputModule,\r\n    BBHamburgerMenuModule,\r\n    BBCollapsingMenuModule,\r\n    BBMultiSelectModule,\r\n    BBCommonModule,\r\n    BBDragAndDropComponentModule,\r\n    BBTabModule,\r\n    BBDragAndDropModule,\r\n    BBSortableModule,\r\n];\r\n\r\n/**\r\n * This module only exists to allow the demo \r\n * to import the entire library quickly.  It \r\n * should not be used by consumers of the \r\n * library and is not exported as part of \r\n * the distrbuted package.\r\n */\r\n@NgModule({\r\n  imports: [\r\n    BBSlidingPanelModule.forRoot(),\r\n    BBDropdownMenuModule.forRoot(),\r\n    BBSlideoutMenuModule.forRoot(),\r\n    BBDropdownInputModule.forRoot(),\r\n    BBHamburgerMenuModule.forRoot(),\r\n    BBCollapsingMenuModule.forRoot(),\r\n    BBMultiSelectModule.forRoot(),\r\n    BBCommonModule.forRoot(),\r\n    BBDragAndDropComponentModule.forRoot(),\r\n    BBTabModule.forRoot(),\r\n    BBDragAndDropModule.forRoot(),\r\n    BBSortableModule.forRoot(),\r\n    \r\n  ],\r\n  exports: BB_MODULES\r\n})\r\nexport class BBRootModule { }\r\n\r\n@NgModule({\r\n  imports: BB_MODULES,\r\n  exports: BB_MODULES,\r\n})\r\nexport class BearBonesModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {ngModule: BBRootModule, providers: []};\r\n  }\r\n}\r\n"]}